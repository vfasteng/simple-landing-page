{"version":3,"file":"aframe-troika-text.min.js","sources":["../node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js","../node_modules/troika-three-utils/dist/troika-three-utils.esm.js","../node_modules/troika-three-text/dist/troika-three-text.esm.js","../src/aframe-troika-text-component.js","../src/index.js","../src/aframe-troika-text-primitive.js"],"sourcesContent":["/**\n * Lightweight thenable implementation that is entirely self-contained within a single\n * function with no external dependencies so it can be easily shipped across to a WorkerModule.\n *\n * This implementation conforms fully to the Promises/A+ spec so it can safely interoperate\n * with other thenable implementations. https://github.com/promises-aplus/promises-spec\n *\n * *However*, it is _not_ a full implementation of ES2015 Promises, e.g. it does not\n * have the same constructor signature and does not expose a `catch` method or the static\n * `resolve`/`reject`/`all`/`race` initializer methods. If you need to hand a Thenable\n * instance off to consuming code that may expect a true Promise, you'll want to wrap it\n * in a native-or-polyfilled Promise first.\n *\n * (Why yet another Promises/A+ implementation? Great question. We needed a polyfill-like\n * thing that was (a) wrapped in a single function for easy serialization across to a Worker,\n * and (b) was as small as possible -- at ~900B minified (~500B gzipped) this is the smallest\n * implementation I've found. And also, exercises like this are challenging and fun.)\n */\nfunction BespokeThenable() {\n  var state = 0; // 0=pending, 1=fulfilled, -1=rejected\n  var queue = [];\n  var value;\n  var scheduled = 0;\n  var completeCalled = 0;\n\n  function then(onResolve, onReject) {\n    var nextThenable = BespokeThenable();\n\n    function handleNext() {\n      var cb = state > 0 ? onResolve : onReject;\n      if (isFn(cb)) {\n        try {\n          var result = cb(value);\n          if (result === nextThenable) {\n            recursiveError();\n          }\n          var resultThen = getThenableThen(result);\n          if (resultThen) {\n            resultThen.call(result, nextThenable.resolve, nextThenable.reject);\n          } else {\n            nextThenable.resolve(result);\n          }\n        } catch (err) {\n          nextThenable.reject(err);\n        }\n      } else {\n        nextThenable[state > 0 ? 'resolve' : 'reject'](value);\n      }\n    }\n\n    queue.push(handleNext);\n    if (state) {\n      scheduleQueueFlush();\n    }\n    return nextThenable\n  }\n\n  var resolve = oneTime(function (val) {\n    if (!completeCalled) {\n      complete(1, val);\n    }\n  });\n\n  var reject = oneTime(function (reason) {\n    if (!completeCalled) {\n      complete(-1, reason);\n    }\n  });\n\n  function complete(st, val) {\n    completeCalled++;\n    var ignoreThrow = 0;\n    try {\n      if (val === thenableObj) {\n        recursiveError();\n      }\n      var valThen = st > 0 && getThenableThen(val);\n      if (valThen) {\n        valThen.call(val, oneTime(function (v) {\n          ignoreThrow++;\n          complete(1, v);\n        }), oneTime(function (v) {\n          ignoreThrow++;\n          complete(-1, v);\n        }));\n      } else {\n        state = st;\n        value = val;\n        scheduleQueueFlush();\n      }\n    } catch(e) {\n      if (!state && !ignoreThrow) {\n        complete(-1, e);\n      }\n    }\n  }\n\n  function scheduleQueueFlush() {\n    if (!scheduled) {\n      setTimeout(flushQueue, 0); //TODO setImmediate or postMessage approach if available?\n      scheduled = 1;\n    }\n  }\n\n  function flushQueue() {\n    var q = queue;\n    scheduled = 0;\n    queue = [];\n    q.forEach(callIt);\n  }\n\n  function callIt(fn) {\n    fn();\n  }\n\n  function getThenableThen(val) {\n    var valThen = val && (isFn(val) || typeof val === 'object') && val.then;\n    return isFn(valThen) && valThen\n  }\n\n  function oneTime(fn) {\n    var called = 0;\n    return function() {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      if (!called++) {\n        fn.apply(this, args);\n      }\n    }\n  }\n\n  function recursiveError() {\n    throw new TypeError('Chaining cycle detected')\n  }\n\n  var isFn = function (v) { return typeof v === 'function'; };\n\n  var thenableObj = {\n    then: then,\n    resolve: resolve,\n    reject: reject\n  };\n  return thenableObj\n}\n\n\n/**\n * Thenable implementation that uses a native Promise under the covers. This implementation\n * is preferred if Promise is available, for better performance and dev tools integration.\n * @constructor\n */\nfunction NativePromiseThenable() {\n  var resolve, reject;\n  var promise = new Promise(function (res, rej) {\n    resolve = res;\n    reject = rej;\n  });\n  return {\n    then: promise.then.bind(promise),\n    resolve: resolve,\n    reject: reject\n  }\n}\n\n/**\n * Promise.all() impl:\n */\nBespokeThenable.all = NativePromiseThenable.all = function(items) {\n  var resultCount = 0;\n  var results = [];\n  var out = DefaultThenable();\n  if (items.length === 0) {\n    out.resolve([]);\n  } else {\n    items.forEach(function (item, i) {\n      var itemThenable = DefaultThenable();\n      itemThenable.resolve(item);\n      itemThenable.then(function (res) {\n        resultCount++;\n        results[i] = res;\n        if (resultCount === items.length) {\n          out.resolve(results);\n        }\n      }, out.reject);\n    });\n  }\n  return out\n};\n\n\n/**\n * Choose the best Thenable implementation and export it as the default.\n */\nvar DefaultThenable = typeof Promise === 'function' ? NativePromiseThenable : BespokeThenable;\n\n/**\n * Main content for the worker that handles the loading and execution of\n * modules within it.\n */\nfunction workerBootstrap() {\n  var modules = Object.create(null);\n\n  // Handle messages for registering a module\n  function registerModule(ref, callback) {\n    var id = ref.id;\n    var name = ref.name;\n    var dependencies = ref.dependencies; if ( dependencies === void 0 ) dependencies = [];\n    var init = ref.init; if ( init === void 0 ) init = function(){};\n    var getTransferables = ref.getTransferables; if ( getTransferables === void 0 ) getTransferables = null;\n\n    // Only register once\n    if (modules[id]) { return }\n\n    try {\n      // If any dependencies are modules, ensure they're registered and grab their value\n      dependencies = dependencies.map(function (dep) {\n        if (dep && dep.isWorkerModule) {\n          registerModule(dep, function (depResult) {\n            if (depResult instanceof Error) { throw depResult }\n          });\n          dep = modules[dep.id].value;\n        }\n        return dep\n      });\n\n      // Rehydrate functions\n      init = rehydrate((\"<\" + name + \">.init\"), init);\n      if (getTransferables) {\n        getTransferables = rehydrate((\"<\" + name + \">.getTransferables\"), getTransferables);\n      }\n\n      // Initialize the module and store its value\n      var value = null;\n      if (typeof init === 'function') {\n        value = init.apply(void 0, dependencies);\n      } else {\n        console.error('worker module init function failed to rehydrate');\n      }\n      modules[id] = {\n        id: id,\n        value: value,\n        getTransferables: getTransferables\n      };\n      callback(value);\n    } catch(err) {\n      if (!(err && err.noLog)) {\n        console.error(err);\n      }\n      callback(err);\n    }\n  }\n\n  // Handle messages for calling a registered module's result function\n  function callModule(ref, callback) {\n    var ref$1;\n\n    var id = ref.id;\n    var args = ref.args;\n    if (!modules[id] || typeof modules[id].value !== 'function') {\n      callback(new Error((\"Worker module \" + id + \": not found or its 'init' did not return a function\")));\n    }\n    try {\n      var result = (ref$1 = modules[id]).value.apply(ref$1, args);\n      if (result && typeof result.then === 'function') {\n        result.then(handleResult, function (rej) { return callback(rej instanceof Error ? rej : new Error('' + rej)); });\n      } else {\n        handleResult(result);\n      }\n    } catch(err) {\n      callback(err);\n    }\n    function handleResult(result) {\n      try {\n        var tx = modules[id].getTransferables && modules[id].getTransferables(result);\n        if (!tx || !Array.isArray(tx) || !tx.length) {\n          tx = undefined; //postMessage is very picky about not passing null or empty transferables\n        }\n        callback(result, tx);\n      } catch(err) {\n        console.error(err);\n        callback(err);\n      }\n    }\n  }\n\n  function rehydrate(name, str) {\n    var result = void 0;\n    self.troikaDefine = function (r) { return result = r; };\n    var url = URL.createObjectURL(\n      new Blob(\n        [(\"/** \" + (name.replace(/\\*/g, '')) + \" **/\\n\\ntroikaDefine(\\n\" + str + \"\\n)\")],\n        {type: 'application/javascript'}\n      )\n    );\n    try {\n      importScripts(url);\n    } catch(err) {\n      console.error(err);\n    }\n    URL.revokeObjectURL(url);\n    delete self.troikaDefine;\n    return result\n  }\n\n  // Handler for all messages within the worker\n  self.addEventListener('message', function (e) {\n    var ref = e.data;\n    var messageId = ref.messageId;\n    var action = ref.action;\n    var data = ref.data;\n    try {\n      // Module registration\n      if (action === 'registerModule') {\n        registerModule(data, function (result) {\n          if (result instanceof Error) {\n            postMessage({\n              messageId: messageId,\n              success: false,\n              error: result.message\n            });\n          } else {\n            postMessage({\n              messageId: messageId,\n              success: true,\n              result: {isCallable: typeof result === 'function'}\n            });\n          }\n        });\n      }\n      // Invocation\n      if (action === 'callModule') {\n        callModule(data, function (result, transferables) {\n          if (result instanceof Error) {\n            postMessage({\n              messageId: messageId,\n              success: false,\n              error: result.message\n            });\n          } else {\n            postMessage({\n              messageId: messageId,\n              success: true,\n              result: result\n            }, transferables || undefined);\n          }\n        });\n      }\n    } catch(err) {\n      postMessage({\n        messageId: messageId,\n        success: false,\n        error: err.stack\n      });\n    }\n  });\n}\n\n/**\n * Fallback for `defineWorkerModule` that behaves identically but runs in the main\n * thread, for when the execution environment doesn't support web workers or they\n * are disallowed due to e.g. CSP security restrictions.\n */\nfunction defineMainThreadModule(options) {\n  var moduleFunc = function() {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    return moduleFunc._getInitResult().then(function (initResult) {\n      if (typeof initResult === 'function') {\n        return initResult.apply(void 0, args)\n      } else {\n        throw new Error('Worker module function was called but `init` did not return a callable function')\n      }\n    })\n  };\n  moduleFunc._getInitResult = function() {\n    // We can ignore getTransferables in main thread. TODO workerId?\n    var dependencies = options.dependencies;\n    var init = options.init;\n\n    // Resolve dependencies\n    dependencies = Array.isArray(dependencies) ? dependencies.map(function (dep) { return dep && dep._getInitResult ? dep._getInitResult() : dep; }\n    ) : [];\n\n    // Invoke init with the resolved dependencies\n    var initThenable = DefaultThenable.all(dependencies).then(function (deps) {\n      return init.apply(null, deps)\n    });\n\n    // Cache the resolved promise for subsequent calls\n    moduleFunc._getInitResult = function () { return initThenable; };\n\n    return initThenable\n  };\n  return moduleFunc\n}\n\nvar supportsWorkers = function () {\n  var supported = false;\n\n  // Only attempt worker initialization in browsers; elsewhere it would just be\n  // noise e.g. loading into a Node environment for SSR.\n  if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {\n    try {\n      // TODO additional checks for things like importScripts within the worker?\n      //  Would need to be an async check.\n      var worker = new Worker(\n        URL.createObjectURL(new Blob([''], { type: 'application/javascript' }))\n      );\n      worker.terminate();\n      supported = true;\n    } catch (err) {\n      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'test') ; else {\n        console.log(\n          (\"Troika createWorkerModule: web workers not allowed; falling back to main thread execution. Cause: [\" + (err.message) + \"]\")\n        );\n      }\n    }\n  }\n\n  // Cached result\n  supportsWorkers = function () { return supported; };\n  return supported\n};\n\nvar _workerModuleId = 0;\nvar _messageId = 0;\nvar _allowInitAsString = false;\nvar workers = Object.create(null);\nvar openRequests = /*#__PURE__*/(function () {\n  var obj = Object.create(null);\n  obj._count = 0;\n  return obj\n})();\n\n\n/**\n * Define a module of code that will be executed with a web worker. This provides a simple\n * interface for moving chunks of logic off the main thread, and managing their dependencies\n * among one another.\n *\n * @param {object} options\n * @param {function} options.init - The main function that initializes the module. This will be run\n *        within the worker, and will be passed the resolved dependencies as arguments. Its\n *        return value becomes the module's content, which can then be used by other modules\n *        that depend on it. This function can perform any logic using those dependencies, but\n *        must not depend on anything from its parent closures.\n * @param {array} [options.dependencies] - Provides any dependencies required by the init function:\n *        - Primitives like strings, numbers, booleans\n *        - Raw functions; these will be stringified and rehydrated within the worker so they\n *          must not depend on anything from their parent closures\n *        - Other worker modules; these will be resolved within the worker, and therefore modules\n *          that provide functions can be called without having to cross the worker/main thread\n *          boundary.\n * @param {function} [options.getTransferables] - An optional function that will be run in the worker\n *        just before posting the response value from a module call back to the main thread.\n *        It will be passed that response value, and if it returns an array then that will be\n *        used as the \"transferables\" parameter to `postMessage`. Use this if there are values\n *        in the response that can/should be transfered rather than cloned.\n * @param {string} [options.name] - A descriptive name for this module; this can be useful for\n *        debugging but is not currently used for anything else.\n * @param {string} [options.workerId] - By default all modules will run in the same dedicated worker,\n *        but if you want to use multiple workers you can pass a `workerId` to indicate a specific\n *        worker to spawn. Note that each worker is completely standalone and no data or state will\n *        be shared between them. If a worker module is used as a dependency by worker modules\n *        using different `workerId`s, then that dependency will be re-registered in each worker.\n * @return {function(...[*]): {then}}\n */\nfunction defineWorkerModule(options) {\n  if ((!options || typeof options.init !== 'function') && !_allowInitAsString) {\n    throw new Error('requires `options.init` function')\n  }\n  var dependencies = options.dependencies;\n  var init = options.init;\n  var getTransferables = options.getTransferables;\n  var workerId = options.workerId;\n\n  if (!supportsWorkers()) {\n    return defineMainThreadModule(options)\n  }\n\n  if (workerId == null) {\n    workerId = '#default';\n  }\n  var id = \"workerModule\" + (++_workerModuleId);\n  var name = options.name || id;\n  var registrationThenable = null;\n\n  dependencies = dependencies && dependencies.map(function (dep) {\n    // Wrap raw functions as worker modules with no dependencies\n    if (typeof dep === 'function' && !dep.workerModuleData) {\n      _allowInitAsString = true;\n      dep = defineWorkerModule({\n        workerId: workerId,\n        name: (\"<\" + name + \"> function dependency: \" + (dep.name)),\n        init: (\"function(){return (\\n\" + (stringifyFunction(dep)) + \"\\n)}\")\n      });\n      _allowInitAsString = false;\n    }\n    // Grab postable data for worker modules\n    if (dep && dep.workerModuleData) {\n      dep = dep.workerModuleData;\n    }\n    return dep\n  });\n\n  function moduleFunc() {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    // Register this module if needed\n    if (!registrationThenable) {\n      registrationThenable = callWorker(workerId,'registerModule', moduleFunc.workerModuleData);\n    }\n\n    // Invoke the module, returning a thenable\n    return registrationThenable.then(function (ref) {\n      var isCallable = ref.isCallable;\n\n      if (isCallable) {\n        return callWorker(workerId,'callModule', {id: id, args: args})\n      } else {\n        throw new Error('Worker module function was called but `init` did not return a callable function')\n      }\n    })\n  }\n  moduleFunc.workerModuleData = {\n    isWorkerModule: true,\n    id: id,\n    name: name,\n    dependencies: dependencies,\n    init: stringifyFunction(init),\n    getTransferables: getTransferables && stringifyFunction(getTransferables)\n  };\n  return moduleFunc\n}\n\n/**\n * Stringifies a function into a form that can be deserialized in the worker\n * @param fn\n */\nfunction stringifyFunction(fn) {\n  var str = fn.toString();\n  // If it was defined in object method/property format, it needs to be modified\n  if (!/^function/.test(str) && /^\\w+\\s*\\(/.test(str)) {\n    str = 'function ' + str;\n  }\n  return str\n}\n\n\nfunction getWorker(workerId) {\n  var worker = workers[workerId];\n  if (!worker) {\n    // Bootstrap the worker's content\n    var bootstrap = stringifyFunction(workerBootstrap);\n\n    // Create the worker from the bootstrap function content\n    worker = workers[workerId] = new Worker(\n      URL.createObjectURL(\n        new Blob(\n          [(\"/** Worker Module Bootstrap: \" + (workerId.replace(/\\*/g, '')) + \" **/\\n\\n;(\" + bootstrap + \")()\")],\n          {type: 'application/javascript'}\n        )\n      )\n    );\n\n    // Single handler for response messages from the worker\n    worker.onmessage = function (e) {\n      var response = e.data;\n      var msgId = response.messageId;\n      var callback = openRequests[msgId];\n      if (!callback) {\n        throw new Error('WorkerModule response with empty or unknown messageId')\n      }\n      delete openRequests[msgId];\n      openRequests.count--;\n      callback(response);\n    };\n  }\n  return worker\n}\n\n// Issue a call to the worker with a callback to handle the response\nfunction callWorker(workerId, action, data) {\n  var thenable = DefaultThenable();\n  var messageId = ++_messageId;\n  openRequests[messageId] = function (response) {\n    if (response.success) {\n      thenable.resolve(response.result);\n    } else {\n      thenable.reject(new Error((\"Error in worker \" + action + \" call: \" + (response.error))));\n    }\n  };\n  openRequests._count++;\n  if (openRequests.count > 1000) { //detect leaks\n    console.warn('Large number of open WorkerModule requests, some may not be returning');\n  }\n  getWorker(workerId).postMessage({\n    messageId: messageId,\n    action: action,\n    data: data\n  });\n  return thenable\n}\n\n/**\n * Just the {@link Thenable} function wrapped as a worker module. If another worker\n * module needs Thenable as a dependency, it's better to pass this module rather than\n * the raw function in its `dependencies` array so it only gets registered once.\n */\nvar ThenableWorkerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'Thenable',\n  dependencies: [DefaultThenable],\n  init: function(Thenable) {\n    return Thenable\n  }\n});\n\nexport { DefaultThenable as Thenable, ThenableWorkerModule, defineWorkerModule, stringifyFunction };\n","import { ShaderChunk, MathUtils, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, DataTexture, Vector3, Mesh, CylinderBufferGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\r\n\r\n/**\r\n * Regular expression for matching the `void main() {` opener line in GLSL.\r\n * @type {RegExp}\r\n */\r\nconst voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\r\n\r\n/**\r\n * Recursively expands all `#include <xyz>` statements within string of shader code.\r\n * Copied from three's WebGLProgram#parseIncludes for external use.\r\n *\r\n * @param {string} source - The GLSL source code to evaluate\r\n * @return {string} The GLSL code with all includes expanded\r\n */\r\nfunction expandShaderIncludes( source ) {\r\n  const pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n  function replace(match, include) {\r\n    let chunk = ShaderChunk[include];\r\n    return chunk ? expandShaderIncludes(chunk) : match\r\n  }\r\n  return source.replace( pattern, replace )\r\n}\r\n\r\n// Local assign polyfill to avoid importing troika-core\r\nconst assign = Object.assign || function(/*target, ...sources*/) {\r\n  let target = arguments[0];\r\n  for (let i = 1, len = arguments.length; i < len; i++) {\r\n    let source = arguments[i];\r\n    if (source) {\r\n      for (let prop in source) {\r\n        if (source.hasOwnProperty(prop)) {\r\n          target[prop] = source[prop];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return target\r\n};\r\n\r\n\r\nconst epoch = Date.now();\r\nconst CONSTRUCTOR_CACHE = new WeakMap();\r\nconst SHADER_UPGRADE_CACHE = new Map();\r\n\r\n// Material ids must be integers, but we can't access the increment from Three's `Material` module,\r\n// so let's choose a sufficiently large starting value that should theoretically never collide.\r\nlet materialInstanceId = 1e10;\r\n\r\n/**\r\n * A utility for creating a custom shader material derived from another material's\r\n * shaders. This allows you to inject custom shader logic and transforms into the\r\n * builtin ThreeJS materials without having to recreate them from scratch.\r\n *\r\n * @param {THREE.Material} baseMaterial - the original material to derive from\r\n *\r\n * @param {Object} options - How the base material should be modified.\r\n * @param {Object} options.defines - Custom `defines` for the material\r\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\r\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\r\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\r\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\r\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\r\n *        both shaders, and it will automatically be updated on each render frame with a number of\r\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\r\n *        true calendar time.\r\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\r\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\r\n *        those attributes exposed by their normal names as read/write values.\r\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\r\n *        shader's `void main` function.\r\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\r\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\r\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\r\n *        want those to apply to your changes use `fragmentColorTransform` instead.\r\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\r\n *        output value. Will be injected near the end of the `void main` function, but before any\r\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\r\n *        `fragmentMainOutro`.\r\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\r\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\r\n *        special that's not covered by the other builtin options. This function will be executed before\r\n *        any other transforms are applied.\r\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\r\n *        material, rather than the default behavior of copying it. This allows the derived material to\r\n *        automatically pick up changes made to the base material and its properties. This can be useful\r\n *        where the derived material is hidden from the user as an implementation detail, allowing them\r\n *        to work with the original material like normal. But it can result in unexpected behavior if not\r\n *        handled carefully.\r\n *\r\n * @return {THREE.Material}\r\n *\r\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\r\n * which can be called to get a variant of the derived material for use in shadow casting. If the\r\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\r\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\r\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\r\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\r\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\r\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\r\n */\r\nfunction createDerivedMaterial(baseMaterial, options) {\r\n  // Generate a key that is unique to the content of these `options`. We'll use this\r\n  // throughout for caching and for generating the upgraded shader code. This increases\r\n  // the likelihood that the resulting shaders will line up across multiple calls so\r\n  // their GL programs can be shared and cached.\r\n  const optionsKey = getKeyForOptions(options);\r\n\r\n  // First check to see if we've already derived from this baseMaterial using this\r\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\r\n  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\r\n  if (!ctorsByDerivation) {\r\n    CONSTRUCTOR_CACHE.set(baseMaterial, (ctorsByDerivation = Object.create(null)));\r\n  }\r\n  if (ctorsByDerivation[optionsKey]) {\r\n    return new ctorsByDerivation[optionsKey]()\r\n  }\r\n\r\n  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;\r\n\r\n  // Private onBeforeCompile handler that injects the modified shaders and uniforms when\r\n  // the renderer switches to this material's program\r\n  const onBeforeCompile = function (shaderInfo) {\r\n    baseMaterial.onBeforeCompile.call(this, shaderInfo);\r\n\r\n    // Upgrade the shaders, caching the result by incoming source code\r\n    const cacheKey = optionsKey + '|||' + shaderInfo.vertexShader + '|||' + shaderInfo.fragmentShader;\r\n    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\r\n    if (!upgradedShaders) {\r\n      const upgraded = upgradeShaders(shaderInfo, options, optionsKey);\r\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\r\n    }\r\n\r\n    // Inject upgraded shaders and uniforms into the program\r\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\r\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\r\n    assign(shaderInfo.uniforms, this.uniforms);\r\n\r\n    // Inject auto-updating time uniform if requested\r\n    if (options.timeUniform) {\r\n      shaderInfo.uniforms[options.timeUniform] = {\r\n        get value() {return Date.now() - epoch}\r\n      };\r\n    }\r\n\r\n    // Users can still add their own handlers on top of ours\r\n    if (this[privateBeforeCompileProp]) {\r\n      this[privateBeforeCompileProp](shaderInfo);\r\n    }\r\n  };\r\n\r\n  const DerivedMaterial = function DerivedMaterial() {\r\n    return derive(options.chained ? baseMaterial : baseMaterial.clone())\r\n  };\r\n\r\n  const derive = function(base) {\r\n    // Prototype chain to the base material\r\n    const derived = Object.create(base, descriptor);\r\n\r\n    // Store the baseMaterial for reference; this is always the original even when cloning\r\n    Object.defineProperty(derived, 'baseMaterial', { value: baseMaterial });\r\n\r\n    // Needs its own ids\r\n    Object.defineProperty(derived, 'id', { value: materialInstanceId++ });\r\n    derived.uuid = MathUtils.generateUUID();\r\n\r\n    // Merge uniforms, defines, and extensions\r\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\r\n    derived.defines = assign({}, base.defines, options.defines);\r\n    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = ''; //force a program change from the base material\r\n    derived.extensions = assign({}, base.extensions, options.extensions);\r\n\r\n    // Don't inherit EventDispatcher listeners\r\n    derived._listeners = undefined;\r\n\r\n    return derived\r\n  };\r\n\r\n  const descriptor = {\r\n    constructor: {value: DerivedMaterial},\r\n    isDerivedMaterial: {value: true},\r\n\r\n    customProgramCacheKey: {\r\n      value: function () {\r\n        return optionsKey\r\n      }\r\n    },\r\n\r\n    onBeforeCompile: {\r\n      get() {\r\n        return onBeforeCompile\r\n      },\r\n      set(fn) {\r\n        this[privateBeforeCompileProp] = fn;\r\n      }\r\n    },\r\n\r\n    copy: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function (source) {\r\n        baseMaterial.copy.call(this, source);\r\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\r\n          assign(this.extensions, source.extensions);\r\n          assign(this.defines, source.defines);\r\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\r\n        }\r\n        return this\r\n      }\r\n    },\r\n\r\n    clone: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function () {\r\n        const newBase = new baseMaterial.constructor();\r\n        return derive(newBase).copy(this)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\r\n    getDepthMaterial: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function() {\r\n        let depthMaterial = this._depthMaterial;\r\n        if (!depthMaterial) {\r\n          depthMaterial = this._depthMaterial = createDerivedMaterial(\r\n            baseMaterial.isDerivedMaterial\r\n              ? baseMaterial.getDepthMaterial()\r\n              : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),\r\n            options\r\n          );\r\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\r\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\r\n        }\r\n        return depthMaterial\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\r\n    getDistanceMaterial: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function() {\r\n        let distanceMaterial = this._distanceMaterial;\r\n        if (!distanceMaterial) {\r\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(\r\n            baseMaterial.isDerivedMaterial\r\n              ? baseMaterial.getDistanceMaterial()\r\n              : new MeshDistanceMaterial(),\r\n            options\r\n          );\r\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\r\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\r\n        }\r\n        return distanceMaterial\r\n      }\r\n    },\r\n\r\n    dispose: {\r\n      writable: true,\r\n      configurable: true,\r\n      value() {\r\n        const {_depthMaterial, _distanceMaterial} = this;\r\n        if (_depthMaterial) _depthMaterial.dispose();\r\n        if (_distanceMaterial) _distanceMaterial.dispose();\r\n        baseMaterial.dispose.call(this);\r\n      }\r\n    }\r\n  };\r\n\r\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\r\n  return new DerivedMaterial()\r\n}\r\n\r\n\r\nfunction upgradeShaders({vertexShader, fragmentShader}, options, key) {\r\n  let {\r\n    vertexDefs,\r\n    vertexMainIntro,\r\n    vertexMainOutro,\r\n    vertexTransform,\r\n    fragmentDefs,\r\n    fragmentMainIntro,\r\n    fragmentMainOutro,\r\n    fragmentColorTransform,\r\n    customRewriter,\r\n    timeUniform\r\n  } = options;\r\n\r\n  vertexDefs = vertexDefs || '';\r\n  vertexMainIntro = vertexMainIntro || '';\r\n  vertexMainOutro = vertexMainOutro || '';\r\n  fragmentDefs = fragmentDefs || '';\r\n  fragmentMainIntro = fragmentMainIntro || '';\r\n  fragmentMainOutro = fragmentMainOutro || '';\r\n\r\n  // Expand includes if needed\r\n  if (vertexTransform || customRewriter) {\r\n    vertexShader = expandShaderIncludes(vertexShader);\r\n  }\r\n  if (fragmentColorTransform || customRewriter) {\r\n    // We need to be able to find postprocessing chunks after include expansion in order to\r\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\r\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\r\n    // so we still mark them.\r\n    fragmentShader = fragmentShader.replace(\r\n      /^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,\r\n      '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n'\r\n    );\r\n    fragmentShader = expandShaderIncludes(fragmentShader);\r\n  }\r\n\r\n  // Apply custom rewriter function\r\n  if (customRewriter) {\r\n    let res = customRewriter({vertexShader, fragmentShader});\r\n    vertexShader = res.vertexShader;\r\n    fragmentShader = res.fragmentShader;\r\n  }\r\n\r\n  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\r\n  // those and re-insert them into the outro in the correct place:\r\n  if (fragmentColorTransform) {\r\n    let postChunks = [];\r\n    fragmentShader = fragmentShader.replace(\r\n      /^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\r\n      match => {\r\n        postChunks.push(match);\r\n        return ''\r\n      }\r\n    );\r\n    fragmentMainOutro = `${fragmentColorTransform}\\n${postChunks.join('\\n')}\\n${fragmentMainOutro}`;\r\n  }\r\n\r\n  // Inject auto-updating time uniform if requested\r\n  if (timeUniform) {\r\n    const code = `\\nuniform float ${timeUniform};\\n`;\r\n    vertexDefs = code + vertexDefs;\r\n    fragmentDefs = code + fragmentDefs;\r\n  }\r\n\r\n  // Inject a function for the vertexTransform and rename all usages of position/normal/uv\r\n  if (vertexTransform) {\r\n    vertexDefs = `${vertexDefs}\r\nvec3 troika_position_${key};\r\nvec3 troika_normal_${key};\r\nvec2 troika_uv_${key};\r\nvoid troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {\r\n  ${vertexTransform}\r\n}\r\n`;\r\n    vertexMainIntro = `\r\ntroika_position_${key} = vec3(position);\r\ntroika_normal_${key} = vec3(normal);\r\ntroika_uv_${key} = vec2(uv);\r\ntroikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});\r\n${vertexMainIntro}\r\n`;\r\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, (match, match1, index, fullStr) => {\r\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`\r\n    });\r\n  }\r\n\r\n  // Inject defs and intro/outro snippets\r\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\r\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\r\n\r\n  return {\r\n    vertexShader,\r\n    fragmentShader\r\n  }\r\n}\r\n\r\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\r\n  if (intro || outro || defs) {\r\n    shaderCode = shaderCode.replace(voidMainRegExp, `\r\n${defs}\r\nvoid troikaOrigMain${id}() {`\r\n    );\r\n    shaderCode += `\r\nvoid main() {\r\n  ${intro}\r\n  troikaOrigMain${id}();\r\n  ${outro}\r\n}`;\r\n  }\r\n  return shaderCode\r\n}\r\n\r\n\r\nfunction optionsJsonReplacer(key, value) {\r\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value\r\n}\r\n\r\nlet _idCtr = 0;\r\nconst optionsHashesToIds = new Map();\r\nfunction getKeyForOptions(options) {\r\n  const optionsHash = JSON.stringify(options, optionsJsonReplacer);\r\n  let id = optionsHashesToIds.get(optionsHash);\r\n  if (id == null) {\r\n    optionsHashesToIds.set(optionsHash, (id = ++_idCtr));\r\n  }\r\n  return id\r\n}\r\n\r\n// Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\r\n// TODO how can we keep this from getting stale?\r\nconst MATERIAL_TYPES_TO_SHADERS = {\r\n  MeshDepthMaterial: 'depth',\r\n  MeshDistanceMaterial: 'distanceRGBA',\r\n  MeshNormalMaterial: 'normal',\r\n  MeshBasicMaterial: 'basic',\r\n  MeshLambertMaterial: 'lambert',\r\n  MeshPhongMaterial: 'phong',\r\n  MeshToonMaterial: 'phong',\r\n  MeshStandardMaterial: 'physical',\r\n  MeshPhysicalMaterial: 'physical',\r\n  MeshMatcapMaterial: 'matcap',\r\n  LineBasicMaterial: 'basic',\r\n  LineDashedMaterial: 'dashed',\r\n  PointsMaterial: 'points',\r\n  ShadowMaterial: 'shadow',\r\n  SpriteMaterial: 'sprite'\r\n};\r\n\r\n/**\r\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\r\n * used to render that material.\r\n *\r\n * @param material - the Material instance\r\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\r\n */\r\nfunction getShadersForMaterial(material) {\r\n  let builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\r\n  return builtinType ? ShaderLib[builtinType] : material //TODO fallback for unknown type?\r\n}\r\n\r\n/**\r\n * Find all uniforms and their types within a shader code string.\r\n *\r\n * @param {string} shader - The shader code to parse\r\n * @return {object} mapping of uniform names to their glsl type\r\n */\r\nfunction getShaderUniformTypes(shader) {\r\n  let uniformRE = /\\buniform\\s+(int|float|vec[234])\\s+([A-Za-z_][\\w]*)/g;\r\n  let uniforms = Object.create(null);\r\n  let match;\r\n  while ((match = uniformRE.exec(shader)) !== null) {\r\n    uniforms[match[2]] = match[1];\r\n  }\r\n  return uniforms\r\n}\r\n\r\n/**\r\n * @class ShaderFloatArray\r\n *\r\n * When writing a custom WebGL shader, sometimes you need to pass it an array of floating\r\n * point numbers that it can read from. Unfortunately this is very difficult to do in WebGL,\r\n * because:\r\n *\r\n *   - GLSL \"array\" uniforms can only be of a constant length.\r\n *   - Textures can only hold floating point numbers in WebGL1 if the `OES_texture_float`\r\n *     extension is available.\r\n *\r\n * ShaderFloatArray is an array-like abstraction that encodes its floating point data into\r\n * an RGBA texture's four Uint8 components, and provides the corresponding ThreeJS uniforms\r\n * and GLSL code for you to put in your custom shader to query the float values by array index.\r\n *\r\n * This should generally only be used within a fragment shader, as some environments (e.g. iOS)\r\n * only allow texture lookups in fragment shaders.\r\n *\r\n * TODO:\r\n *   - Fix texture to fill both dimensions so we don't easily hit max texture size limits\r\n *   - Use a float texture if the extension is available so we can skip the encoding process\r\n */\r\nclass ShaderFloatArray {\r\n  constructor(name) {\r\n    this.name = name;\r\n    this.textureUniform = `dataTex_${name}`;\r\n    this.textureSizeUniform = `dataTexSize_${name}`;\r\n    this.multiplierUniform = `dataMultiplier_${name}`;\r\n\r\n    /**\r\n     * @property dataSizeUniform - the name of the GLSL uniform that will hold the\r\n     * length of the data array.\r\n     * @type {string}\r\n     */\r\n    this.dataSizeUniform = `dataSize_${name}`;\r\n\r\n    /**\r\n     * @property readFunction - the name of the GLSL function that should be called to\r\n     * read data out of the array by index.\r\n     * @type {string}\r\n     */\r\n    this.readFunction = `readData_${name}`;\r\n\r\n    this._raw = new Float32Array(0);\r\n    this._texture = new DataTexture(new Uint8Array(0), 0, 1);\r\n    this._length = 0;\r\n    this._multiplier = 1;\r\n  }\r\n\r\n  /**\r\n   * @property length - the current length of the data array\r\n   * @type {number}\r\n   */\r\n  set length(value) {\r\n    if (value !== this._length) {\r\n      // Find nearest power-of-2 that holds the new length\r\n      const size = Math.pow(2, Math.ceil(Math.log2(value)));\r\n      const raw = this._raw;\r\n      if (size < raw.length) {\r\n        this._raw = raw.subarray(0, size);\r\n      }\r\n      else if(size > raw.length) {\r\n        this._raw = new Float32Array(size);\r\n        this._raw.set(raw);\r\n      }\r\n      this._length = value;\r\n    }\r\n  }\r\n  get length() {\r\n    return this._length\r\n  }\r\n\r\n  /**\r\n   * Add a value to the end of the data array\r\n   * @param {number} value\r\n   */\r\n  push(value) {\r\n    return this.set(this.length++, value)\r\n  }\r\n\r\n  /**\r\n   * Replace the existing data with that from a new array\r\n   * @param {ArrayLike<number>} array\r\n   */\r\n  setArray(array) {\r\n    this.length = array.length;\r\n    this._raw.set(array);\r\n    this._needsRepack = true;\r\n  }\r\n\r\n  /**\r\n   * Get the current value at index\r\n   * @param {number} index\r\n   * @return {number}\r\n   */\r\n  get(index) {\r\n    return this._raw[index]\r\n  }\r\n\r\n  set(index, value) {\r\n    if (index + 1 > this._length) {\r\n      this.length = index + 1;\r\n    }\r\n    if (value !== this._raw[index]) {\r\n      this._raw[index] = value;\r\n      encodeFloatToFourInts(\r\n        value / this._multiplier,\r\n        this._texture.image.data,\r\n        index * 4\r\n      );\r\n      this._needsMultCheck = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a copy of this ShaderFloatArray\r\n   * @return {ShaderFloatArray}\r\n   */\r\n  clone() {\r\n    const clone = new ShaderFloatArray(this.name);\r\n    clone.setArray(this._raw);\r\n    return clone\r\n  }\r\n\r\n  /**\r\n   * Retrieve the set of Uniforms that must to be added to the target ShaderMaterial or\r\n   * DerivedMaterial, to feed the GLSL code generated by {@link #getShaderHeaderCode}.\r\n   * @return {Object}\r\n   */\r\n  getShaderUniforms() {\r\n    const me = this;\r\n    return {\r\n      [this.textureUniform]: {get value() {\r\n        me._sync();\r\n        return me._texture\r\n      }},\r\n      [this.textureSizeUniform]: {get value() {\r\n        me._sync();\r\n        return me._texture.image.width\r\n      }},\r\n      [this.dataSizeUniform]: {get value() {\r\n        me._sync();\r\n        return me.length\r\n      }},\r\n      [this.multiplierUniform]: {get value() {\r\n        me._sync();\r\n        return me._multiplier\r\n      }}\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the GLSL code that must be injected into the shader's definitions area to\r\n   * enable reading from the data array. This exposes a function with a name matching\r\n   * the {@link #readFunction} property, which other shader code can call to read values\r\n   * from the array by their index.\r\n   * @return {string}\r\n   */\r\n  getShaderHeaderCode() {\r\n    const {textureUniform, textureSizeUniform, dataSizeUniform, multiplierUniform, readFunction} = this;\r\n    return `\r\nuniform sampler2D ${textureUniform};\r\nuniform float ${textureSizeUniform};\r\nuniform float ${dataSizeUniform};\r\nuniform float ${multiplierUniform};\r\n\r\nfloat ${readFunction}(float index) {\r\n  vec2 texUV = vec2((index + 0.5) / ${textureSizeUniform}, 0.5);\r\n  vec4 pixel = texture2D(${textureUniform}, texUV);\r\n  return dot(pixel, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0)) * ${multiplierUniform};\r\n}\r\n`\r\n  }\r\n\r\n  /**\r\n   * @private Synchronize any pending changes to the underlying DataTexture\r\n   */\r\n  _sync() {\r\n    const tex = this._texture;\r\n    const raw = this._raw;\r\n    let needsRepack = this._needsRepack;\r\n\r\n    // If the size of the raw array changed, resize the texture to match\r\n    if (raw.length !== tex.image.width) {\r\n      tex.image = {\r\n        data: new Uint8Array(raw.length * 4),\r\n        width: raw.length,\r\n        height: 1\r\n      };\r\n      needsRepack = true;\r\n    }\r\n\r\n    // If the values changed, check the multiplier. This should be a value by which\r\n    // all the values are divided to constrain them to the [0,1] range required by\r\n    // the Uint8 packing algorithm. We pick the nearest power of 2 that holds the\r\n    // maximum value for greatest accuracy.\r\n    if (needsRepack || this._needsMultCheck) {\r\n      const maxVal = this._raw.reduce((a, b) => Math.max(a, b), 0);\r\n      const mult = Math.pow(2, Math.ceil(Math.log2(maxVal)));\r\n      if (mult !== this._multiplier) {\r\n        this._multiplier = mult;\r\n        needsRepack = true;\r\n      }\r\n      tex.needsUpdate = true;\r\n      this._needsMultCheck = false;\r\n    }\r\n\r\n    // If things changed in a way we need to repack, do so\r\n    if (needsRepack) {\r\n      for (let i = 0, len = raw.length, mult = this._multiplier; i < len; i++) {\r\n        encodeFloatToFourInts(raw[i] / mult, tex.image.data, i * 4);\r\n      }\r\n      this._needsRepack = false;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Encode a floating point number into a set of four 8-bit integers.\r\n * Also see the companion decoder function #decodeFloatFromFourInts.\r\n *\r\n * This is adapted to JavaScript from the basic approach at\r\n * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n * but writes out integers in the range 0-255 instead of floats in the range 0-1\r\n * so they can be more easily used in a Uint8Array for standard WebGL rgba textures.\r\n *\r\n * Some precision will necessarily be lost during the encoding and decoding process.\r\n * Testing shows that the maximum precision error is ~1.18e-10 which should be good\r\n * enough for most cases.\r\n *\r\n * @param {Number} value - the floating point number to encode. Must be in the range [0, 1]\r\n *        otherwise the results will be incorrect.\r\n * @param {Array|Uint8Array} array - an array into which the four ints should be written\r\n * @param {Number} startIndex - index in the output array at which to start writing the ints\r\n * @return {Array|Uint8Array}\r\n */\r\nfunction encodeFloatToFourInts(value, array, startIndex) {\r\n  // This is adapted to JS from the basic approach at\r\n  // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n  // but writes to a Uint8Array instead of floats. Input values must be in\r\n  // the range [0, 1]. The maximum error after encoding and decoding is ~1.18e-10\r\n  let enc0 = 255 * value;\r\n  let enc1 = 255 * (enc0 % 1);\r\n  let enc2 = 255 * (enc1 % 1);\r\n  let enc3 = 255 * (enc2 % 1);\r\n\r\n  enc0 = enc0 & 255;\r\n  enc1 = enc1 & 255;\r\n  enc2 = enc2 & 255;\r\n  enc3 = Math.round(enc3) & 255;\r\n\r\n  array[startIndex] = enc0;\r\n  array[startIndex + 1] = enc1;\r\n  array[startIndex + 2] = enc2;\r\n  array[startIndex + 3] = enc3;\r\n  return array\r\n}\r\n\r\n/*\r\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\r\ndivided into a reasonable number of height segments.\r\n*/\r\n\r\nconst vertexDefs = `\r\nuniform vec3 pointA;\r\nuniform vec3 controlA;\r\nuniform vec3 controlB;\r\nuniform vec3 pointB;\r\nuniform float radius;\r\nvarying float bezierT;\r\n\r\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\r\n  float t2 = 1.0 - t;\r\n  float b0 = t2 * t2 * t2;\r\n  float b1 = 3.0 * t * t2 * t2;\r\n  float b2 = 3.0 * t * t * t2;\r\n  float b3 = t * t * t;\r\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\r\n}\r\n\r\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\r\n  float t2 = 1.0 - t;\r\n  return -3.0 * p1 * t2 * t2 +\r\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\r\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\r\n    3.0 * p2 * t * t;\r\n}\r\n`;\r\n\r\nconst vertexTransform = `\r\nfloat t = position.y;\r\nbezierT = t;\r\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\r\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\r\n\r\n// Make \"sideways\" always perpendicular to the camera ray; this ensures that any twists\r\n// in the cylinder occur where you won't see them: \r\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\r\nif (bezierDir == viewDirection) {\r\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\r\n}\r\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\r\nvec3 upish = normalize(cross(sideways, bezierDir));\r\n\r\n// Build a matrix for transforming this disc in the cylinder:\r\nmat4 discTx;\r\ndiscTx[0].xyz = sideways * radius;\r\ndiscTx[1].xyz = bezierDir * radius;\r\ndiscTx[2].xyz = upish * radius;\r\ndiscTx[3].xyz = bezierCenterPos;\r\ndiscTx[3][3] = 1.0;\r\n\r\n// Apply transform, ignoring original y\r\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\r\nnormal = normalize(mat3(discTx) * normal);\r\n`;\r\n\r\nconst fragmentDefs = `\r\nuniform vec3 dashing;\r\nvarying float bezierT;\r\n`;\r\n\r\nconst fragmentMainIntro = `\r\nif (dashing.x + dashing.y > 0.0) {\r\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\r\n  if (dashFrac > dashing.x) {\r\n    discard;\r\n  }\r\n}\r\n`;\r\n\r\n// Debugging: separate color for each of the 6 sides:\r\n// const fragmentColorTransform = `\r\n// float sideNum = floor(vUV.x * 6.0);\r\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\r\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\r\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\r\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\r\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\r\n//   vec3(1.0, 0.0, 1.0);\r\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\r\n// `\r\n\r\n\r\n\r\nfunction createBezierMeshMaterial(baseMaterial) {\r\n  return createDerivedMaterial(\r\n    baseMaterial,\r\n    {\r\n      chained: true,\r\n      uniforms: {\r\n        pointA: {value: new Vector3()},\r\n        controlA: {value: new Vector3()},\r\n        controlB: {value: new Vector3()},\r\n        pointB: {value: new Vector3()},\r\n        radius: {value: 0.01},\r\n        dashing: {value: new Vector3()} //on, off, offset\r\n      },\r\n      vertexDefs,\r\n      vertexTransform,\r\n      fragmentDefs,\r\n      fragmentMainIntro\r\n    }\r\n  )\r\n}\r\n\r\nlet geometry = null;\r\n\r\nconst defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({color: 0xffffff, side: DoubleSide});\r\n\r\n\r\n/**\r\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\r\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\r\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\r\n * automatically.\r\n *\r\n * The cubiz bezier path is determined by its four `Vector3` properties:\r\n * - `pointA`\r\n * - `controlA`\r\n * - `controlB`\r\n * - `pointB`\r\n *\r\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\r\n *\r\n * You can also give the tube a dashed appearance with two properties:\r\n *\r\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\r\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\r\n *   used as input to the cubic bezier function, not its visible length.)\r\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\r\n *\r\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\r\n * thicker tubes.\r\n *\r\n * TODO: proper geometry bounding sphere and raycasting\r\n * TODO: allow control of the geometry's segment counts\r\n */\r\nclass BezierMesh extends Mesh {\r\n  static getGeometry() {\r\n    return geometry || (geometry =\r\n      new CylinderBufferGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0)\r\n    )\r\n  }\r\n\r\n  constructor() {\r\n    super(\r\n      BezierMesh.getGeometry(),\r\n      defaultBaseMaterial\r\n    );\r\n\r\n    this.pointA = new Vector3();\r\n    this.controlA = new Vector3();\r\n    this.controlB = new Vector3();\r\n    this.pointB = new Vector3();\r\n    this.radius = 0.01;\r\n    this.dashArray = new Vector2();\r\n    this.dashOffset = 0;\r\n\r\n    // TODO - disabling frustum culling until I figure out how to customize the\r\n    //  geometry's bounding sphere that gets used\r\n    this.frustumCulled = false;\r\n  }\r\n\r\n  // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\r\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\r\n  get material() {\r\n    let derivedMaterial = this._derivedMaterial;\r\n    const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\r\n    if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\r\n      derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\r\n      // dispose the derived material when its base material is disposed:\r\n      baseMaterial.addEventListener('dispose', function onDispose() {\r\n        baseMaterial.removeEventListener('dispose', onDispose);\r\n        derivedMaterial.dispose();\r\n      });\r\n    }\r\n    return derivedMaterial\r\n  }\r\n  set material(baseMaterial) {\r\n    this._baseMaterial = baseMaterial;\r\n  }\r\n\r\n  // Create and update material for shadows upon request:\r\n  get customDepthMaterial() {\r\n    return this.material.getDepthMaterial()\r\n  }\r\n  get customDistanceMaterial() {\r\n    return this.material.getDistanceMaterial()\r\n  }\r\n\r\n  onBeforeRender(shaderInfo) {\r\n    const {uniforms} = this.material;\r\n    const {pointA, controlA, controlB, pointB, radius, dashArray, dashOffset} = this;\r\n    uniforms.pointA.value.copy(pointA);\r\n    uniforms.controlA.value.copy(controlA);\r\n    uniforms.controlB.value.copy(controlB);\r\n    uniforms.pointB.value.copy(pointB);\r\n    uniforms.radius.value = radius;\r\n    uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\r\n  }\r\n\r\n  raycast(raycaster, intersects) {\r\n    // TODO - just fail for now\r\n  }\r\n}\r\n\r\nexport { BezierMesh, ShaderFloatArray, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, voidMainRegExp };\r\n","import { DataTexture, LuminanceFormat, LinearFilter, Color, Vector3, InstancedBufferGeometry, Sphere, Box3, InstancedBufferAttribute, PlaneBufferGeometry, Vector2, Vector4, Matrix3, MeshBasicMaterial, DoubleSide, Matrix4, Mesh } from 'three';\nimport { defineWorkerModule, ThenableWorkerModule } from 'troika-worker-utils';\nimport { createDerivedMaterial, voidMainRegExp } from 'troika-three-utils';\n\n/**\n * Initializes and returns a function to generate an SDF texture for a given glyph.\n * @param {function} createGlyphSegmentsIndex - factory for a GlyphSegmentsIndex implementation.\n * @param {number} config.sdfExponent\n * @param {number} config.sdfMargin\n *\n * @return {function(Object): {renderingBounds: [minX, minY, maxX, maxY], textureData: Uint8Array}}\n */\nfunction createSDFGenerator(createGlyphSegmentsIndex, config) {\n  const { sdfExponent, sdfMargin } = config;\n\n  /**\n   * How many straight line segments to use when approximating a glyph's quadratic/cubic bezier curves.\n   */\n  const CURVE_POINTS = 16;\n\n  /**\n   * Find the point on a quadratic bezier curve at t where t is in the range [0, 1]\n   */\n  function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t) {\n    const t2 = 1 - t;\n    return {\n      x: t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2,\n      y: t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2\n    }\n  }\n\n  /**\n   * Find the point on a cubic bezier curve at t where t is in the range [0, 1]\n   */\n  function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t) {\n    const t2 = 1 - t;\n    return {\n      x: t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3,\n      y: t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3\n    }\n  }\n\n  /**\n   * Generate an SDF texture segment for a single glyph.\n   * @param {object} glyphObj\n   * @param {number} sdfSize - the length of one side of the SDF image.\n   *        Larger images encode more details. Must be a power of 2.\n   * @return {{textureData: Uint8Array, renderingBounds: *[]}}\n   */\n  function generateSDF(glyphObj, sdfSize) {\n    //console.time('glyphSDF')\n\n    const textureData = new Uint8Array(sdfSize * sdfSize);\n\n    // Determine mapping between glyph grid coords and sdf grid coords\n    const glyphW = glyphObj.xMax - glyphObj.xMin;\n    const glyphH = glyphObj.yMax - glyphObj.yMin;\n\n    // Choose a maximum search distance radius in font units, based on the glyph's max dimensions\n    const fontUnitsMaxSearchDist = Math.max(glyphW, glyphH);\n\n    // Margin - add an extra 0.5 over the configured value because the outer 0.5 doesn't contain\n    // useful interpolated values and will be ignored anyway.\n    const fontUnitsMargin = Math.max(glyphW, glyphH) / sdfSize * (sdfMargin * sdfSize + 0.5);\n\n    // Metrics of the texture/quad in font units\n    const textureMinFontX = glyphObj.xMin - fontUnitsMargin;\n    const textureMinFontY = glyphObj.yMin - fontUnitsMargin;\n    const textureMaxFontX = glyphObj.xMax + fontUnitsMargin;\n    const textureMaxFontY = glyphObj.yMax + fontUnitsMargin;\n    const fontUnitsTextureWidth = textureMaxFontX - textureMinFontX;\n    const fontUnitsTextureHeight = textureMaxFontY - textureMinFontY;\n    const fontUnitsTextureMaxDim = Math.max(fontUnitsTextureWidth, fontUnitsTextureHeight);\n\n    function textureXToFontX(x) {\n      return textureMinFontX + fontUnitsTextureWidth * x / sdfSize\n    }\n\n    function textureYToFontY(y) {\n      return textureMinFontY + fontUnitsTextureHeight * y / sdfSize\n    }\n\n    if (glyphObj.pathCommandCount) { //whitespace chars will have no commands, so we can skip all this\n      // Decompose all paths into straight line segments and add them to a quadtree\n      const lineSegmentsIndex = createGlyphSegmentsIndex(glyphObj);\n      let firstX, firstY, prevX, prevY;\n      glyphObj.forEachPathCommand((type, x0, y0, x1, y1, x2, y2) => {\n        switch (type) {\n          case 'M':\n            prevX = firstX = x0;\n            prevY = firstY = y0;\n            break\n          case 'L':\n            if (x0 !== prevX || y0 !== prevY) { //yup, some fonts have zero-length line commands\n              lineSegmentsIndex.addLineSegment(prevX, prevY, (prevX = x0), (prevY = y0));\n            }\n            break\n          case 'Q': {\n            let prevPoint = {x: prevX, y: prevY};\n            for (let i = 1; i < CURVE_POINTS; i++) {\n              let nextPoint = pointOnQuadraticBezier(\n                prevX, prevY,\n                x0, y0,\n                x1, y1,\n                i / (CURVE_POINTS - 1)\n              );\n              lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\n              prevPoint = nextPoint;\n            }\n            prevX = x1;\n            prevY = y1;\n            break\n          }\n          case 'C': {\n            let prevPoint = {x: prevX, y: prevY};\n            for (let i = 1; i < CURVE_POINTS; i++) {\n              let nextPoint = pointOnCubicBezier(\n                prevX, prevY,\n                x0, y0,\n                x1, y1,\n                x2, y2,\n                i / (CURVE_POINTS - 1)\n              );\n              lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\n              prevPoint = nextPoint;\n            }\n            prevX = x2;\n            prevY = y2;\n            break\n          }\n          case 'Z':\n            if (prevX !== firstX || prevY !== firstY) {\n              lineSegmentsIndex.addLineSegment(prevX, prevY, firstX, firstY);\n            }\n            break\n        }\n      });\n\n      // For each target SDF texel, find the distance from its center to its nearest line segment,\n      // map that distance to an alpha value, and write that alpha to the texel\n      for (let sdfX = 0; sdfX < sdfSize; sdfX++) {\n        for (let sdfY = 0; sdfY < sdfSize; sdfY++) {\n          const signedDist = lineSegmentsIndex.findNearestSignedDistance(\n            textureXToFontX(sdfX + 0.5),\n            textureYToFontY(sdfY + 0.5),\n            fontUnitsMaxSearchDist\n          );\n\n          // Use an exponential scale to ensure the texels very near the glyph path have adequate\n          // precision, while allowing the distance field to cover the entire texture, given that\n          // there are only 8 bits available. Formula visualized: https://www.desmos.com/calculator/uiaq5aqiam\n          let alpha = Math.pow((1 - Math.abs(signedDist) / fontUnitsTextureMaxDim), sdfExponent) / 2;\n          if (signedDist < 0) {\n            alpha = 1 - alpha;\n          }\n\n          alpha = Math.max(0, Math.min(255, Math.round(alpha * 255))); //clamp\n          textureData[sdfY * sdfSize + sdfX] = alpha;\n        }\n      }\n    }\n\n    //console.timeEnd('glyphSDF')\n\n    return {\n      textureData: textureData,\n\n      renderingBounds: [\n        textureMinFontX,\n        textureMinFontY,\n        textureMaxFontX,\n        textureMaxFontY\n      ]\n    }\n  }\n\n\n  return generateSDF\n}\n\n/**\n * Creates a self-contained environment for processing text rendering requests.\n *\n * It is important that this function has no closure dependencies, so that it can be easily injected\n * into the source for a Worker without requiring a build step or complex dependency loading. All its\n * dependencies must be passed in at initialization.\n *\n * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns\n * a standardized structure giving access to the font and its glyphs:\n *   {\n *     unitsPerEm: number,\n *     ascender: number,\n *     descender: number,\n *     forEachGlyph(string, fontSize, letterSpacing, callback) {\n *       //invokes callback for each glyph to render, passing it an object:\n *       callback({\n *         index: number,\n *         advanceWidth: number,\n *         xMin: number,\n *         yMin: number,\n *         xMax: number,\n *         yMax: number,\n *         pathCommandCount: number,\n *         forEachPathCommand(callback) {\n *           //invokes callback for each path command, with args:\n *           callback(\n *             type: 'M|L|C|Q|Z',\n *             ...args //0 to 6 args depending on the type\n *           )\n *         }\n *       })\n *     }\n *   }\n * @param {function} sdfGenerator - a function that accepts a glyph object and generates an SDF texture\n * from it.\n * @param {Object} config\n * @return {Object}\n */\nfunction createFontProcessor(fontParser, sdfGenerator, config) {\n\n  const {\n    defaultFontURL\n  } = config;\n\n\n  /**\n   * @private\n   * Holds data about font glyphs and how they relate to SDF atlases\n   *\n   * {\n   *   'fontUrl@sdfSize': {\n   *     fontObj: {}, //result of the fontParser\n   *     glyphs: {\n   *       [glyphIndex]: {\n   *         atlasIndex: 0,\n   *         glyphObj: {}, //glyph object from the fontParser\n   *         renderingBounds: [x0, y0, x1, y1]\n   *       },\n   *       ...\n   *     },\n   *     glyphCount: 123\n   *   }\n   * }\n   */\n  const fontAtlases = Object.create(null);\n\n  /**\n   * Holds parsed font objects by url\n   */\n  const fonts = Object.create(null);\n\n  const INF = Infinity;\n\n\n  /**\n   * Load a given font url\n   */\n  function doLoadFont(url, callback) {\n    function tryLoad() {\n      const onError = err => {\n        console.error(`Failure loading font ${url}${url === defaultFontURL ? '' : '; trying fallback'}`, err);\n        if (url !== defaultFontURL) {\n          url = defaultFontURL;\n          tryLoad();\n        }\n      };\n      try {\n        const request = new XMLHttpRequest();\n        request.open('get', url, true);\n        request.responseType = 'arraybuffer';\n        request.onload = function () {\n          if (request.status >= 400) {\n            onError(new Error(request.statusText));\n          }\n          else if (request.status > 0) {\n            try {\n              const fontObj = fontParser(request.response);\n              callback(fontObj);\n            } catch (e) {\n              onError(e);\n            }\n          }\n        };\n        request.onerror = onError;\n        request.send();\n      } catch(err) {\n        onError(err);\n      }\n    }\n    tryLoad();\n  }\n\n\n  /**\n   * Load a given font url if needed, invoking a callback when it's loaded. If already\n   * loaded, the callback will be called synchronously.\n   */\n  function loadFont(fontUrl, callback) {\n    if (!fontUrl) fontUrl = defaultFontURL;\n    let font = fonts[fontUrl];\n    if (font) {\n      // if currently loading font, add to callbacks, otherwise execute immediately\n      if (font.pending) {\n        font.pending.push(callback);\n      } else {\n        callback(font);\n      }\n    } else {\n      fonts[fontUrl] = {pending: [callback]};\n      doLoadFont(fontUrl, fontObj => {\n        let callbacks = fonts[fontUrl].pending;\n        fonts[fontUrl] = fontObj;\n        callbacks.forEach(cb => cb(fontObj));\n      });\n    }\n  }\n\n\n  /**\n   * Get the atlas data for a given font url, loading it from the network and initializing\n   * its atlas data objects if necessary.\n   */\n  function getSdfAtlas(fontUrl, sdfGlyphSize, callback) {\n    if (!fontUrl) fontUrl = defaultFontURL;\n    let atlasKey = `${fontUrl}@${sdfGlyphSize}`;\n    let atlas = fontAtlases[atlasKey];\n    if (atlas) {\n      callback(atlas);\n    } else {\n      loadFont(fontUrl, fontObj => {\n        atlas = fontAtlases[atlasKey] || (fontAtlases[atlasKey] = {\n          fontObj: fontObj,\n          glyphs: {},\n          glyphCount: 0\n        });\n        callback(atlas);\n      });\n    }\n  }\n\n\n  /**\n   * Main entry point.\n   * Process a text string with given font and formatting parameters, and return all info\n   * necessary to render all its glyphs.\n   */\n  function process(\n    {\n      text='',\n      font=defaultFontURL,\n      sdfGlyphSize=64,\n      fontSize=1,\n      letterSpacing=0,\n      lineHeight='normal',\n      maxWidth=INF,\n      textAlign='left',\n      textIndent=0,\n      whiteSpace='normal',\n      overflowWrap='normal',\n      anchorX = 0,\n      anchorY = 0,\n      includeCaretPositions=false,\n      chunkedBoundsSize=8192,\n      colorRanges=null\n    },\n    callback,\n    metricsOnly=false\n  ) {\n    const mainStart = now();\n    const timings = {total: 0, fontLoad: 0, layout: 0, sdf: {}, sdfTotal: 0};\n\n    // Ensure newlines are normalized\n    if (text.indexOf('\\r') > -1) {\n      console.warn('FontProcessor.process: got text with \\\\r chars; normalizing to \\\\n');\n      text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n    }\n\n    // Ensure we've got numbers not strings\n    fontSize = +fontSize;\n    letterSpacing = +letterSpacing;\n    maxWidth = +maxWidth;\n    lineHeight = lineHeight || 'normal';\n    textIndent = +textIndent;\n\n    getSdfAtlas(font, sdfGlyphSize, atlas => {\n      const fontObj = atlas.fontObj;\n      const hasMaxWidth = isFinite(maxWidth);\n      let newGlyphs = null;\n      let glyphBounds = null;\n      let glyphAtlasIndices = null;\n      let glyphColors = null;\n      let caretPositions = null;\n      let visibleBounds = null;\n      let chunkedBounds = null;\n      let maxLineWidth = 0;\n      let renderableGlyphCount = 0;\n      let canWrap = whiteSpace !== 'nowrap';\n      const {ascender, descender, unitsPerEm} = fontObj;\n      timings.fontLoad = now() - mainStart;\n      const layoutStart = now();\n\n      // Find conversion between native font units and fontSize units; this will already be done\n      // for the gx/gy values below but everything else we'll need to convert\n      const fontSizeMult = fontSize / unitsPerEm;\n\n      // Determine appropriate value for 'normal' line height based on the font's actual metrics\n      // TODO this does not guarantee individual glyphs won't exceed the line height, e.g. Roboto; should we use yMin/Max instead?\n      if (lineHeight === 'normal') {\n        lineHeight = (ascender - descender) / unitsPerEm;\n      }\n\n      // Determine line height and leading adjustments\n      lineHeight = lineHeight * fontSize;\n      const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;\n      const topBaseline = -(ascender * fontSizeMult + halfLeading);\n      const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);\n      const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;\n\n      // Distribute glyphs into lines based on wrapping\n      let lineXOffset = textIndent;\n      let currentLine = new TextLine();\n      const lines = [currentLine];\n      fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {\n        const char = text.charAt(charIndex);\n        const glyphWidth = glyphObj.advanceWidth * fontSizeMult;\n        const curLineCount = currentLine.count;\n        let nextLine;\n\n        // Calc isWhitespace and isEmpty once per glyphObj\n        if (!('isEmpty' in glyphObj)) {\n          glyphObj.isWhitespace = !!char && /\\s/.test(char);\n          glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax;\n        }\n        if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n          renderableGlyphCount++;\n        }\n\n        // If a non-whitespace character overflows the max width, we need to soft-wrap\n        if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {\n          // If it's the first char after a whitespace, start a new line\n          if (currentLine.glyphAt(curLineCount - 1).glyphObj.isWhitespace) {\n            nextLine = new TextLine();\n            lineXOffset = -glyphX;\n          } else {\n            // Back up looking for a whitespace character to wrap at\n            for (let i = curLineCount; i--;) {\n              // If we got the start of the line there's no soft break point; make hard break if overflowWrap='break-word'\n              if (i === 0 && overflowWrap === 'break-word') {\n                nextLine = new TextLine();\n                lineXOffset = -glyphX;\n                break\n              }\n              // Found a soft break point; move all chars since it to a new line\n              else if (currentLine.glyphAt(i).glyphObj.isWhitespace) {\n                nextLine = currentLine.splitAt(i + 1);\n                const adjustX = nextLine.glyphAt(0).x;\n                lineXOffset -= adjustX;\n                for (let j = nextLine.count; j--;) {\n                  nextLine.glyphAt(j).x -= adjustX;\n                }\n                break\n              }\n            }\n          }\n          if (nextLine) {\n            currentLine.isSoftWrapped = true;\n            currentLine = nextLine;\n            lines.push(currentLine);\n            maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width\n          }\n        }\n\n        let fly = currentLine.glyphAt(currentLine.count);\n        fly.glyphObj = glyphObj;\n        fly.x = glyphX + lineXOffset;\n        fly.width = glyphWidth;\n        fly.charIndex = charIndex;\n\n        // Handle hard line breaks\n        if (char === '\\n') {\n          currentLine = new TextLine();\n          lines.push(currentLine);\n          lineXOffset = -(glyphX + glyphWidth + (letterSpacing * fontSize)) + textIndent;\n        }\n      });\n\n      // Calculate width of each line (excluding trailing whitespace) and maximum block width\n      lines.forEach(line => {\n        for (let i = line.count; i--;) {\n          let {glyphObj, x, width} = line.glyphAt(i);\n          if (!glyphObj.isWhitespace) {\n            line.width = x + width;\n            if (line.width > maxLineWidth) {\n              maxLineWidth = line.width;\n            }\n            return\n          }\n        }\n      });\n\n      // Find overall position adjustments for anchoring\n      let anchorXOffset = 0;\n      let anchorYOffset = 0;\n      if (anchorX) {\n        if (typeof anchorX === 'number') {\n          anchorXOffset = -anchorX;\n        }\n        else if (typeof anchorX === 'string') {\n          anchorXOffset = -maxLineWidth * (\n            anchorX === 'left' ? 0 :\n            anchorX === 'center' ? 0.5 :\n            anchorX === 'right' ? 1 :\n            parsePercent(anchorX)\n          );\n        }\n      }\n      if (anchorY) {\n        if (typeof anchorY === 'number') {\n          anchorYOffset = -anchorY;\n        }\n        else if (typeof anchorY === 'string') {\n          let height = lines.length * lineHeight;\n          anchorYOffset = anchorY === 'top' ? 0 :\n            anchorY === 'top-baseline' ? -topBaseline :\n            anchorY === 'middle' ? height / 2 :\n            anchorY === 'bottom' ? height :\n            anchorY === 'bottom-baseline' ? height - halfLeading + descender * fontSizeMult :\n            parsePercent(anchorY) * height;\n        }\n      }\n\n      if (!metricsOnly) {\n        // Process each line, applying alignment offsets, adding each glyph to the atlas, and\n        // collecting all renderable glyphs into a single collection.\n        glyphBounds = new Float32Array(renderableGlyphCount * 4);\n        glyphAtlasIndices = new Float32Array(renderableGlyphCount);\n        visibleBounds = [INF, INF, -INF, -INF];\n        chunkedBounds = [];\n        let lineYOffset = topBaseline;\n        if (includeCaretPositions) {\n          caretPositions = new Float32Array(text.length * 3);\n        }\n        if (colorRanges) {\n          glyphColors = new Uint8Array(renderableGlyphCount * 3);\n        }\n        let renderableGlyphIndex = 0;\n        let prevCharIndex = -1;\n        let colorCharIndex = -1;\n        let chunk;\n        let currentColor;\n        lines.forEach(line => {\n          const {count:lineGlyphCount, width:lineWidth} = line;\n\n          // Ignore empty lines\n          if (lineGlyphCount > 0) {\n            // Find x offset for horizontal alignment\n            let lineXOffset = 0;\n            let justifyAdjust = 0;\n            if (textAlign === 'center') {\n              lineXOffset = (maxLineWidth - lineWidth) / 2;\n            } else if (textAlign === 'right') {\n              lineXOffset = maxLineWidth - lineWidth;\n            } else if (textAlign === 'justify' && line.isSoftWrapped) {\n              // just count the non-trailing whitespace characters, and we'll adjust the offsets per\n              // character in the next loop\n              let whitespaceCount = 0;\n              for (let i = lineGlyphCount; i--;) {\n                if (!line.glyphAt(i).glyphObj.isWhitespace) {\n                  while (i--) {\n                    if (!line.glyphAt(i).glyphObj) {\n                      debugger\n                    }\n                    if (line.glyphAt(i).glyphObj.isWhitespace) {\n                      whitespaceCount++;\n                    }\n                  }\n                  break\n                }\n              }\n              justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;\n            }\n\n            for (let i = 0; i < lineGlyphCount; i++) {\n              const glyphInfo = line.glyphAt(i);\n              const glyphObj = glyphInfo.glyphObj;\n\n              // Apply position adjustments\n              if (lineXOffset) glyphInfo.x += lineXOffset;\n\n              // Expand whitespaces for justify alignment\n              if (justifyAdjust !== 0 && glyphObj.isWhitespace) {\n                lineXOffset += justifyAdjust;\n                glyphInfo.width += justifyAdjust;\n              }\n\n              // Add caret positions\n              if (includeCaretPositions) {\n                const {charIndex} = glyphInfo;\n                caretPositions[charIndex * 3] = glyphInfo.x + anchorXOffset; //left edge x\n                caretPositions[charIndex * 3 + 1] = glyphInfo.x + glyphInfo.width + anchorXOffset; //right edge x\n                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y\n\n                // If we skipped any chars from the previous glyph (due to ligature subs), copy the\n                // previous glyph's info to those missing char indices. In the future we may try to\n                // use the font's LigatureCaretList table to get interior caret positions.\n                while (charIndex - prevCharIndex > 1) {\n                  caretPositions[(prevCharIndex + 1) * 3] = caretPositions[prevCharIndex * 3 + 1];\n                  caretPositions[(prevCharIndex + 1) * 3 + 1] = caretPositions[prevCharIndex * 3 + 1];\n                  caretPositions[(prevCharIndex + 1) * 3 + 2] = caretPositions[prevCharIndex * 3 + 2];\n                  prevCharIndex++;\n                }\n                prevCharIndex = charIndex;\n              }\n\n              // Track current color range\n              if (colorRanges) {\n                const {charIndex} = glyphInfo;\n                while(charIndex > colorCharIndex) {\n                  colorCharIndex++;\n                  if (colorRanges.hasOwnProperty(colorCharIndex)) {\n                    currentColor = colorRanges[colorCharIndex];\n                  }\n                }\n              }\n\n              // Get atlas data for renderable glyphs\n              if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n                const idx = renderableGlyphIndex++;\n\n                // If we haven't seen this glyph yet, generate its SDF\n                let glyphAtlasInfo = atlas.glyphs[glyphObj.index];\n                if (!glyphAtlasInfo) {\n                  const sdfStart = now();\n                  const glyphSDFData = sdfGenerator(glyphObj, sdfGlyphSize);\n                  timings.sdf[text.charAt(glyphInfo.charIndex)] = now() - sdfStart;\n\n                  // Assign this glyph the next available atlas index\n                  glyphSDFData.atlasIndex = atlas.glyphCount++;\n\n                  // Queue it up in the response's newGlyphs list\n                  if (!newGlyphs) newGlyphs = [];\n                  newGlyphs.push(glyphSDFData);\n\n                  // Store its metadata (not the texture) in our atlas info\n                  glyphAtlasInfo = atlas.glyphs[glyphObj.index] = {\n                    atlasIndex: glyphSDFData.atlasIndex,\n                    glyphObj: glyphObj,\n                    renderingBounds: glyphSDFData.renderingBounds\n                  };\n                }\n\n                // Determine final glyph quad bounds and add them to the glyphBounds array\n                const bounds = glyphAtlasInfo.renderingBounds;\n                const startIdx = idx * 4;\n                const xStart = glyphInfo.x + anchorXOffset;\n                const yStart = lineYOffset + anchorYOffset;\n                glyphBounds[startIdx] = xStart + bounds[0] * fontSizeMult;\n                glyphBounds[startIdx + 1] = yStart + bounds[1] * fontSizeMult;\n                glyphBounds[startIdx + 2] = xStart + bounds[2] * fontSizeMult;\n                glyphBounds[startIdx + 3] = yStart + bounds[3] * fontSizeMult;\n\n                // Track total visible bounds\n                const visX0 = xStart + glyphObj.xMin * fontSizeMult;\n                const visY0 = yStart + glyphObj.yMin * fontSizeMult;\n                const visX1 = xStart + glyphObj.xMax * fontSizeMult;\n                const visY1 = yStart + glyphObj.yMax * fontSizeMult;\n                if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;\n                if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;\n                if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;\n                if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1;\n\n                // Track bounding rects for each chunk of N glyphs\n                if (idx % chunkedBoundsSize === 0) {\n                  chunk = {start: idx, end: idx, rect: [INF, INF, -INF, -INF]};\n                  chunkedBounds.push(chunk);\n                }\n                chunk.end++;\n                const chunkRect = chunk.rect;\n                if (visX0 < chunkRect[0]) chunkRect[0] = visX0;\n                if (visY0 < chunkRect[1]) chunkRect[1] = visY0;\n                if (visX1 > chunkRect[2]) chunkRect[2] = visX1;\n                if (visY1 > chunkRect[3]) chunkRect[3] = visY1;\n\n                // Add to atlas indices array\n                glyphAtlasIndices[idx] = glyphAtlasInfo.atlasIndex;\n\n                // Add colors\n                if (colorRanges) {\n                  const start = idx * 3;\n                  glyphColors[start] = currentColor >> 16 & 255;\n                  glyphColors[start + 1] = currentColor >> 8 & 255;\n                  glyphColors[start + 2] = currentColor & 255;\n                }\n              }\n            }\n          }\n\n          // Increment y offset for next line\n          lineYOffset -= lineHeight;\n        });\n      }\n\n      // Timing stats\n      for (let ch in timings.sdf) {\n        timings.sdfTotal += timings.sdf[ch];\n      }\n      timings.layout = now() - layoutStart - timings.sdfTotal;\n      timings.total = now() - mainStart;\n\n      callback({\n        glyphBounds, //rendering quad bounds for each glyph [x1, y1, x2, y2]\n        glyphAtlasIndices, //atlas indices for each glyph\n        caretPositions, //x,y of bottom of cursor position before each char, plus one after last char\n        caretHeight, //height of cursor from bottom to top\n        glyphColors, //color for each glyph, if color ranges supplied\n        chunkedBounds, //total rects per (n=chunkedBoundsSize) consecutive glyphs\n        ascender: ascender * fontSizeMult, //font ascender\n        descender: descender * fontSizeMult, //font descender\n        lineHeight, //computed line height\n        topBaseline, //y coordinate of the top line's baseline\n        blockBounds: [ //bounds for the whole block of text, including vertical padding for lineHeight\n          anchorXOffset,\n          anchorYOffset - lines.length * lineHeight,\n          anchorXOffset + maxLineWidth,\n          anchorYOffset\n        ],\n        visibleBounds, //total bounds of visible text paths, may be larger or smaller than totalBounds\n        newGlyphSDFs: newGlyphs, //if this request included any new SDFs for the atlas, they'll be included here\n        timings\n      });\n    });\n  }\n\n\n  /**\n   * For a given text string and font parameters, determine the resulting block dimensions\n   * after wrapping for the given maxWidth.\n   * @param args\n   * @param callback\n   */\n  function measure(args, callback) {\n    process(args, (result) => {\n      const [x0, y0, x1, y1] = result.blockBounds;\n      callback({\n        width: x1 - x0,\n        height: y1 - y0\n      });\n    }, {metricsOnly: true});\n  }\n\n  function parsePercent(str) {\n    let match = str.match(/^([\\d.]+)%$/);\n    let pct = match ? parseFloat(match[1]) : NaN;\n    return isNaN(pct) ? 0 : pct / 100\n  }\n\n  function now() {\n    return (self.performance || Date).now()\n  }\n\n  // Array-backed structure for a single line's glyphs data\n  function TextLine() {\n    this.data = [];\n  }\n  TextLine.prototype = {\n    width: 0,\n    isSoftWrapped: false,\n    get count() {\n      return Math.ceil(this.data.length / 4)\n    },\n    glyphAt(i) {\n      let fly = TextLine.flyweight;\n      fly.data = this.data;\n      fly.index = i;\n      return fly\n    },\n    splitAt(i) {\n      let newLine = new TextLine();\n      newLine.data = this.data.splice(i * 4);\n      return newLine\n    }\n  };\n  TextLine.flyweight = ['glyphObj', 'x', 'width', 'charIndex'].reduce((obj, prop, i, all) => {\n    Object.defineProperty(obj, prop, {\n      get() {\n        return this.data[this.index * 4 + i]\n      },\n      set(val) {\n        this.data[this.index * 4 + i] = val;\n      }\n    });\n    return obj\n  }, {data: null, index: 0});\n\n\n  return {\n    process,\n    measure,\n    loadFont\n  }\n}\n\n/**\n * Index for performing fast spatial searches of a glyph's line segments.\n * @return {{addLineSegment:function, findNearestSignedDistance:function}}\n */\nfunction createGlyphSegmentsIndex() {\n  let needsSort = false;\n  const segments = [];\n\n  function sortSegments() {\n    if (needsSort) {\n      // sort by maxX, this will let us short-circuit some loops below\n      segments.sort(function(a, b) {\n        return a.maxX - b.maxX\n      });\n      needsSort = false;\n    }\n  }\n\n  /**\n   * Add a line segment to the index.\n   * @param x0\n   * @param y0\n   * @param x1\n   * @param y1\n   */\n  function addLineSegment(x0, y0, x1, y1) {\n    const segment = {\n      x0, y0, x1, y1,\n      minX: Math.min(x0, x1),\n      minY: Math.min(y0, y1),\n      maxX: Math.max(x0, x1),\n      maxY: Math.max(y0, y1)\n    };\n    segments.push(segment);\n    needsSort = true;\n  }\n\n  /**\n   * For a given x/y, search the index for the closest line segment and return\n   * its signed distance. Negative = inside, positive = outside, zero = on edge\n   * @param x\n   * @param y\n   * @returns {number}\n   */\n  function findNearestSignedDistance(x, y) {\n    sortSegments();\n    let closestDistSq = Infinity;\n    let closestDist = Infinity;\n\n    for (let i = segments.length; i--;) {\n      const seg = segments[i];\n      if (seg.maxX + closestDist <= x) break //sorting by maxX means no more can be closer, so we can short-circuit\n      if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {\n        const distSq = absSquareDistanceToLineSegment(x, y, seg.x0, seg.y0, seg.x1, seg.y1);\n        if (distSq < closestDistSq) {\n          closestDistSq = distSq;\n          closestDist = Math.sqrt(closestDistSq);\n        }\n      }\n    }\n\n    // Flip to negative distance if inside the poly\n    if (isPointInPoly(x, y)) {\n      closestDist = -closestDist;\n    }\n    return closestDist\n  }\n\n  // Determine whether the given point lies inside or outside the glyph. Uses a simple\n  // ray casting algorithm using a ray pointing east from the point.\n  function isPointInPoly(x, y) {\n    sortSegments();\n    let inside = false;\n    for (let i = segments.length; i--;) {\n      const seg = segments[i];\n      if (seg.maxX <= x) break //sorting by maxX means no more can cross, so we can short-circuit\n      if (seg.minY < y && seg.maxY > y) {\n        const intersects = ((seg.y0 > y) !== (seg.y1 > y)) && (x < (seg.x1 - seg.x0) * (y - seg.y0) / (seg.y1 - seg.y0) + seg.x0);\n        if (intersects) {\n          inside = !inside;\n        }\n      }\n    }\n    return inside\n  }\n\n  // Find the absolute distance from a point to a line segment at closest approach\n  function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {\n    const ldx = lineX1 - lineX0;\n    const ldy = lineY1 - lineY0;\n    const lengthSq = ldx * ldx + ldy * ldy;\n    const t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;\n    const dx = x - (lineX0 + t * ldx);\n    const dy = y - (lineY0 + t * ldy);\n    return dx * dx + dy * dy\n  }\n\n  return {\n    addLineSegment,\n    findNearestSignedDistance\n  }\n}\n\n// Custom bundle of Typr.js (https://github.com/photopea/Typr.js) for use in troika-3d-text. \n// Original MIT license applies: https://github.com/photopea/Typr.js/blob/gh-pages/LICENSE\n\nfunction typrFactory() {\n\nconst window = self;\n\n// Begin Typr.js\n\n\nvar Typr = {};\n\nTypr.parse = function(buff)\n{\n\tvar bin = Typr._bin;\n\tvar data = new Uint8Array(buff);\n\t\n\tvar tag = bin.readASCII(data, 0, 4);  \n\tif(tag==\"ttcf\") {\n\t\tvar offset = 4;\n\t\tvar majV = bin.readUshort(data, offset);  offset+=2;\n\t\tvar minV = bin.readUshort(data, offset);  offset+=2;\n\t\tvar numF = bin.readUint  (data, offset);  offset+=4;\n\t\tvar fnts = [];\n\t\tfor(var i=0; i<numF; i++) {\n\t\t\tvar foff = bin.readUint  (data, offset);  offset+=4;\n\t\t\tfnts.push(Typr._readFont(data, foff));\n\t\t}\n\t\treturn fnts;\n\t}\n\telse return [Typr._readFont(data, 0)];\n};\n\nTypr._readFont = function(data, offset) {\n\tvar bin = Typr._bin;\n\tvar ooff = offset;\n\t\n\tvar sfnt_version = bin.readFixed(data, offset);\n\toffset += 4;\n\tvar numTables = bin.readUshort(data, offset);\n\toffset += 2;\n\tvar searchRange = bin.readUshort(data, offset);\n\toffset += 2;\n\tvar entrySelector = bin.readUshort(data, offset);\n\toffset += 2;\n\tvar rangeShift = bin.readUshort(data, offset);\n\toffset += 2;\n\t\n\tvar tags = [\n\t\t\"cmap\",\n\t\t\"head\",\n\t\t\"hhea\",\n\t\t\"maxp\",\n\t\t\"hmtx\",\n\t\t\"name\",\n\t\t\"OS/2\",\n\t\t\"post\",\n\t\t\n\t\t//\"cvt\",\n\t\t//\"fpgm\",\n\t\t\"loca\",\n\t\t\"glyf\",\n\t\t\"kern\",\n\t\t\n\t\t//\"prep\"\n\t\t//\"gasp\"\n\t\t\n\t\t\"CFF \",\n\t\t\n\t\t\n\t\t\"GPOS\",\n\t\t\"GSUB\",\n\t\t\n\t\t\"SVG \"\n\t\t//\"VORG\",\n\t\t];\n\t\n\tvar obj = {_data:data, _offset:ooff};\n\t//console.log(sfnt_version, numTables, searchRange, entrySelector, rangeShift);\n\t\n\tvar tabs = {};\n\t\n\tfor(var i=0; i<numTables; i++)\n\t{\n\t\tvar tag = bin.readASCII(data, offset, 4);   offset += 4;\n\t\tvar checkSum = bin.readUint(data, offset);  offset += 4;\n\t\tvar toffset = bin.readUint(data, offset);   offset += 4;\n\t\tvar length = bin.readUint(data, offset);    offset += 4;\n\t\ttabs[tag] = {offset:toffset, length:length};\n\t\t\n\t\t//if(tags.indexOf(tag)==-1) console.log(\"unknown tag\", tag, length);\n\t}\n\t\n\tfor(var i=0; i< tags.length; i++)\n\t{\n\t\tvar t = tags[i];\n\t\t//console.log(t);\n\t\t//if(tabs[t]) console.log(t, tabs[t].offset, tabs[t].length);\n\t\tif(tabs[t]) obj[t.trim()] = Typr[t.trim()].parse(data, tabs[t].offset, tabs[t].length, obj);\n\t}\n\t\n\treturn obj;\n};\n\nTypr._tabOffset = function(data, tab, foff)\n{\n\tvar bin = Typr._bin;\n\tvar numTables = bin.readUshort(data, foff+4);\n\tvar offset = foff+12;\n\tfor(var i=0; i<numTables; i++)\n\t{\n\t\tvar tag = bin.readASCII(data, offset, 4);   offset += 4;\n\t\tvar checkSum = bin.readUint(data, offset);  offset += 4;\n\t\tvar toffset = bin.readUint(data, offset);   offset += 4;\n\t\tvar length = bin.readUint(data, offset);    offset += 4;\n\t\tif(tag==tab) return toffset;\n\t}\n\treturn 0;\n};\n\n\n\n\n\nTypr._bin = {\n\treadFixed : function(data, o)\n\t{\n\t\treturn ((data[o]<<8) | data[o+1]) +  (((data[o+2]<<8)|data[o+3])/(256*256+4));\n\t},\n\treadF2dot14 : function(data, o)\n\t{\n\t\tvar num = Typr._bin.readShort(data, o);\n\t\treturn num / 16384;\n\t},\n\treadInt : function(buff, p)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar a = Typr._bin.t.uint8;\n\t\ta[0] = buff[p+3];\n\t\ta[1] = buff[p+2];\n\t\ta[2] = buff[p+1];\n\t\ta[3] = buff[p];\n\t\treturn Typr._bin.t.int32[0];\n\t},\n\t\n\treadInt8 : function(buff, p)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar a = Typr._bin.t.uint8;\n\t\ta[0] = buff[p];\n\t\treturn Typr._bin.t.int8[0];\n\t},\n\treadShort : function(buff, p)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar a = Typr._bin.t.uint8;\n\t\ta[1] = buff[p]; a[0] = buff[p+1];\n\t\treturn Typr._bin.t.int16[0];\n\t},\n\treadUshort : function(buff, p)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\treturn (buff[p]<<8) | buff[p+1];\n\t},\n\treadUshorts : function(buff, p, len)\n\t{\n\t\tvar arr = [];\n\t\tfor(var i=0; i<len; i++) arr.push(Typr._bin.readUshort(buff, p+i*2));\n\t\treturn arr;\n\t},\n\treadUint : function(buff, p)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar a = Typr._bin.t.uint8;\n\t\ta[3] = buff[p];  a[2] = buff[p+1];  a[1] = buff[p+2];  a[0] = buff[p+3];\n\t\treturn Typr._bin.t.uint32[0];\n\t},\n\treadUint64 : function(buff, p)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\treturn (Typr._bin.readUint(buff, p)*(0xffffffff+1)) + Typr._bin.readUint(buff, p+4);\n\t},\n\treadASCII : function(buff, p, l)\t// l : length in Characters (not Bytes)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar s = \"\";\n\t\tfor(var i = 0; i < l; i++) s += String.fromCharCode(buff[p+i]);\n\t\treturn s;\n\t},\n\treadUnicode : function(buff, p, l)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar s = \"\";\n\t\tfor(var i = 0; i < l; i++)\t\n\t\t{\n\t\t\tvar c = (buff[p++]<<8) | buff[p++];\n\t\t\ts += String.fromCharCode(c);\n\t\t}\n\t\treturn s;\n\t},\n\t_tdec : window[\"TextDecoder\"] ? new window[\"TextDecoder\"]() : null,\n\treadUTF8 : function(buff, p, l) {\n\t\tvar tdec = Typr._bin._tdec;\n\t\tif(tdec && p==0 && l==buff.length) return tdec[\"decode\"](buff);\n\t\treturn Typr._bin.readASCII(buff,p,l);\n\t},\n\treadBytes : function(buff, p, l)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar arr = [];\n\t\tfor(var i=0; i<l; i++) arr.push(buff[p+i]);\n\t\treturn arr;\n\t},\n\treadASCIIArray : function(buff, p, l)\t// l : length in Characters (not Bytes)\n\t{\n\t\t//if(p>=buff.length) throw \"error\";\n\t\tvar s = [];\n\t\tfor(var i = 0; i < l; i++)\t\n\t\t\ts.push(String.fromCharCode(buff[p+i]));\n\t\treturn s;\n\t}\n};\n\nTypr._bin.t = {\n\tbuff: new ArrayBuffer(8),\n};\nTypr._bin.t.int8   = new Int8Array  (Typr._bin.t.buff);\nTypr._bin.t.uint8  = new Uint8Array (Typr._bin.t.buff);\nTypr._bin.t.int16  = new Int16Array (Typr._bin.t.buff);\nTypr._bin.t.uint16 = new Uint16Array(Typr._bin.t.buff);\nTypr._bin.t.int32  = new Int32Array (Typr._bin.t.buff);\nTypr._bin.t.uint32 = new Uint32Array(Typr._bin.t.buff);\n\n\n\n\n\n// OpenType Layout Common Table Formats\n\nTypr._lctf = {};\n\nTypr._lctf.parse = function(data, offset, length, font, subt)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\tvar offset0 = offset;\n\tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\n\t\n\tvar offScriptList  = bin.readUshort(data, offset);  offset += 2;\n\tvar offFeatureList = bin.readUshort(data, offset);  offset += 2;\n\tvar offLookupList  = bin.readUshort(data, offset);  offset += 2;\n\t\n\t\n\tobj.scriptList  = Typr._lctf.readScriptList (data, offset0 + offScriptList);\n\tobj.featureList = Typr._lctf.readFeatureList(data, offset0 + offFeatureList);\n\tobj.lookupList  = Typr._lctf.readLookupList (data, offset0 + offLookupList, subt);\n\t\n\treturn obj;\n};\n\nTypr._lctf.readLookupList = function(data, offset, subt)\n{\n\tvar bin = Typr._bin;\n\tvar offset0 = offset;\n\tvar obj = [];\n\tvar count = bin.readUshort(data, offset);  offset+=2;\n\tfor(var i=0; i<count; i++) \n\t{\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n\t\tvar lut = Typr._lctf.readLookupTable(data, offset0 + noff, subt);\n\t\tobj.push(lut);\n\t}\n\treturn obj;\n};\n\nTypr._lctf.readLookupTable = function(data, offset, subt)\n{\n\t//console.log(\"Parsing lookup table\", offset);\n\tvar bin = Typr._bin;\n\tvar offset0 = offset;\n\tvar obj = {tabs:[]};\n\t\n\tobj.ltype = bin.readUshort(data, offset);  offset+=2;\n\tobj.flag  = bin.readUshort(data, offset);  offset+=2;\n\tvar cnt   = bin.readUshort(data, offset);  offset+=2;\n\t\n\tfor(var i=0; i<cnt; i++)\n\t{\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n\t\tvar tab = subt(data, obj.ltype, offset0 + noff);\n\t\t//console.log(obj.type, tab);\n\t\tobj.tabs.push(tab);\n\t}\n\treturn obj;\n};\n\nTypr._lctf.numOfOnes = function(n)\n{\n\tvar num = 0;\n\tfor(var i=0; i<32; i++) if(((n>>>i)&1) != 0) num++;\n\treturn num;\n};\n\nTypr._lctf.readClassDef = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar obj = [];\n\tvar format = bin.readUshort(data, offset);  offset+=2;\n\tif(format==1) \n\t{\n\t\tvar startGlyph  = bin.readUshort(data, offset);  offset+=2;\n\t\tvar glyphCount  = bin.readUshort(data, offset);  offset+=2;\n\t\tfor(var i=0; i<glyphCount; i++)\n\t\t{\n\t\t\tobj.push(startGlyph+i);\n\t\t\tobj.push(startGlyph+i);\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n\t\t}\n\t}\n\tif(format==2)\n\t{\n\t\tvar count = bin.readUshort(data, offset);  offset+=2;\n\t\tfor(var i=0; i<count; i++)\n\t\t{\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\n\t\t}\n\t}\n\treturn obj;\n};\nTypr._lctf.getInterval = function(tab, val)\n{\n\tfor(var i=0; i<tab.length; i+=3)\n\t{\n\t\tvar start = tab[i], end = tab[i+1], index = tab[i+2];\n\t\tif(start<=val && val<=end) return i;\n\t}\n\treturn -1;\n};\n\n\nTypr._lctf.readCoverage = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar cvg = {};\n\tcvg.fmt   = bin.readUshort(data, offset);  offset+=2;\n\tvar count = bin.readUshort(data, offset);  offset+=2;\n\t//console.log(\"parsing coverage\", offset-4, format, count);\n\tif(cvg.fmt==1) cvg.tab = bin.readUshorts(data, offset, count); \n\tif(cvg.fmt==2) cvg.tab = bin.readUshorts(data, offset, count*3);\n\treturn cvg;\n};\n\nTypr._lctf.coverageIndex = function(cvg, val)\n{\n\tvar tab = cvg.tab;\n\tif(cvg.fmt==1) return tab.indexOf(val);\n\tif(cvg.fmt==2) {\n\t\tvar ind = Typr._lctf.getInterval(tab, val);\n\t\tif(ind!=-1) return tab[ind+2] + (val - tab[ind]);\n\t}\n\treturn -1;\n};\n\nTypr._lctf.readFeatureList = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar offset0 = offset;\n\tvar obj = [];\n\t\n\tvar count = bin.readUshort(data, offset);  offset+=2;\n\t\n\tfor(var i=0; i<count; i++)\n\t{\n\t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n\t\tobj.push({tag: tag.trim(), tab:Typr._lctf.readFeatureTable(data, offset0 + noff)});\n\t}\n\treturn obj;\n};\n\nTypr._lctf.readFeatureTable = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\t\n\tvar featureParams = bin.readUshort(data, offset);  offset+=2;\t// = 0\n\tvar lookupCount = bin.readUshort(data, offset);  offset+=2;\n\t\n\tvar indices = [];\n\tfor(var i=0; i<lookupCount; i++) indices.push(bin.readUshort(data, offset+2*i));\n\treturn indices;\n};\n\n\nTypr._lctf.readScriptList = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar offset0 = offset;\n\tvar obj = {};\n\t\n\tvar count = bin.readUshort(data, offset);  offset+=2;\n\t\n\tfor(var i=0; i<count; i++)\n\t{\n\t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\n\t\tobj[tag.trim()] = Typr._lctf.readScriptTable(data, offset0 + noff);\n\t}\n\treturn obj;\n};\n\nTypr._lctf.readScriptTable = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar offset0 = offset;\n\tvar obj = {};\n\t\n\tvar defLangSysOff = bin.readUshort(data, offset);  offset+=2;\n\tobj.default = Typr._lctf.readLangSysTable(data, offset0 + defLangSysOff);\n\t\n\tvar langSysCount = bin.readUshort(data, offset);  offset+=2;\n\t\n\tfor(var i=0; i<langSysCount; i++)\n\t{\n\t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\n\t\tvar langSysOff = bin.readUshort(data, offset);  offset+=2;\n\t\tobj[tag.trim()] = Typr._lctf.readLangSysTable(data, offset0 + langSysOff);\n\t}\n\treturn obj;\n};\n\nTypr._lctf.readLangSysTable = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\t\n\tvar lookupOrder = bin.readUshort(data, offset);  offset+=2;\n\t//if(lookupOrder!=0)  throw \"lookupOrder not 0\";\n\tobj.reqFeature = bin.readUshort(data, offset);  offset+=2;\n\t//if(obj.reqFeature != 0xffff) throw \"reqFeatureIndex != 0xffff\";\n\t\n\t//console.log(lookupOrder, obj.reqFeature);\n\t\n\tvar featureCount = bin.readUshort(data, offset);  offset+=2;\n\tobj.features = bin.readUshorts(data, offset, featureCount);\n\treturn obj;\n};\n\n\tTypr.CFF = {};\n\tTypr.CFF.parse = function(data, offset, length)\n\t{\n\t\tvar bin = Typr._bin;\n\t\t\n\t\tdata = new Uint8Array(data.buffer, offset, length);\n\t\toffset = 0;\n\t\t\n\t\t// Header\n\t\tvar major = data[offset];  offset++;\n\t\tvar minor = data[offset];  offset++;\n\t\tvar hdrSize = data[offset];  offset++;\n\t\tvar offsize = data[offset];  offset++;\n\t\t//console.log(major, minor, hdrSize, offsize);\n\t\t\n\t\t// Name INDEX\n\t\tvar ninds = [];\n\t\toffset = Typr.CFF.readIndex(data, offset, ninds);\n\t\tvar names = [];\n\t\t\n\t\tfor(var i=0; i<ninds.length-1; i++) names.push(bin.readASCII(data, offset+ninds[i], ninds[i+1]-ninds[i]));\n\t\toffset += ninds[ninds.length-1];\n\t\t\n\t\t\n\t\t// Top DICT INDEX\n\t\tvar tdinds = [];\n\t\toffset = Typr.CFF.readIndex(data, offset, tdinds);  //console.log(tdinds);\n\t\t// Top DICT Data\n\t\tvar topDicts = [];\n\t\tfor(var i=0; i<tdinds.length-1; i++) topDicts.push( Typr.CFF.readDict(data, offset+tdinds[i], offset+tdinds[i+1]) );\n\t\toffset += tdinds[tdinds.length-1];\n\t\tvar topdict = topDicts[0];\n\t\t//console.log(topdict);\n\t\t\n\t\t// String INDEX\n\t\tvar sinds = [];\n\t\toffset = Typr.CFF.readIndex(data, offset, sinds);\n\t\t// String Data\n\t\tvar strings = [];\n\t\tfor(var i=0; i<sinds.length-1; i++) strings.push(bin.readASCII(data, offset+sinds[i], sinds[i+1]-sinds[i]));\n\t\toffset += sinds[sinds.length-1];\n\t\t\n\t\t// Global Subr INDEX  (subroutines)\t\t\n\t\tTypr.CFF.readSubrs(data, offset, topdict);\n\t\t\n\t\t// charstrings\n\t\tif(topdict.CharStrings)\n\t\t{\n\t\t\toffset = topdict.CharStrings;\n\t\t\tvar sinds = [];\n\t\t\toffset = Typr.CFF.readIndex(data, offset, sinds);\n\t\t\t\n\t\t\tvar cstr = [];\n\t\t\tfor(var i=0; i<sinds.length-1; i++) cstr.push(bin.readBytes(data, offset+sinds[i], sinds[i+1]-sinds[i]));\n\t\t\t//offset += sinds[sinds.length-1];\n\t\t\ttopdict.CharStrings = cstr;\n\t\t\t//console.log(topdict.CharStrings);\n\t\t}\n\t\t\n\t\t// CID font\n\t\tif(topdict.ROS) {\n\t\t\toffset = topdict.FDArray;\n\t\t\tvar fdind = [];\n\t\t\toffset = Typr.CFF.readIndex(data, offset, fdind);\n\t\t\t\n\t\t\ttopdict.FDArray = [];\n\t\t\tfor(var i=0; i<fdind.length-1; i++) {\n\t\t\t\tvar dict = Typr.CFF.readDict(data, offset+fdind[i], offset+fdind[i+1]);\n\t\t\t\tTypr.CFF._readFDict(data, dict, strings);\n\t\t\t\ttopdict.FDArray.push( dict );\n\t\t\t}\n\t\t\toffset += fdind[fdind.length-1];\n\t\t\t\n\t\t\toffset = topdict.FDSelect;\n\t\t\ttopdict.FDSelect = [];\n\t\t\tvar fmt = data[offset];  offset++;\n\t\t\tif(fmt==3) {\n\t\t\t\tvar rns = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\tfor(var i=0; i<rns+1; i++) {\n\t\t\t\t\ttopdict.FDSelect.push(bin.readUshort(data, offset), data[offset+2]);  offset+=3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse throw fmt;\n\t\t}\n\t\t\n\t\t// Encoding\n\t\tif(topdict.Encoding) topdict.Encoding = Typr.CFF.readEncoding(data, topdict.Encoding, topdict.CharStrings.length);\n\t\t\n\t\t// charset\n\t\tif(topdict.charset ) topdict.charset  = Typr.CFF.readCharset (data, topdict.charset , topdict.CharStrings.length);\n\t\t\n\t\tTypr.CFF._readFDict(data, topdict, strings);\n\t\treturn topdict;\n\t};\n\tTypr.CFF._readFDict = function(data, dict, ss) {\n\t\tvar offset;\n\t\tif(dict.Private) {\n\t\t\toffset = dict.Private[1];\n\t\t\tdict.Private = Typr.CFF.readDict(data, offset, offset+dict.Private[0]);\n\t\t\tif(dict.Private.Subrs)  Typr.CFF.readSubrs(data, offset+dict.Private.Subrs, dict.Private);\n\t\t}\n\t\tfor(var p in dict) if([\"FamilyName\",\"FontName\",\"FullName\",\"Notice\",\"version\",\"Copyright\"].indexOf(p)!=-1)  dict[p]=ss[dict[p] -426 + 35];\n\t};\n\t\n\tTypr.CFF.readSubrs = function(data, offset, obj)\n\t{\n\t\tvar bin = Typr._bin;\n\t\tvar gsubinds = [];\n\t\toffset = Typr.CFF.readIndex(data, offset, gsubinds);\n\t\t\n\t\tvar bias, nSubrs = gsubinds.length;\n\t\tif (nSubrs <  1240) bias = 107;\n\t\telse if (nSubrs < 33900) bias = 1131;\n\t\telse bias = 32768;\n\t\tobj.Bias = bias;\n\t\t\n\t\tobj.Subrs = [];\n\t\tfor(var i=0; i<gsubinds.length-1; i++) obj.Subrs.push(bin.readBytes(data, offset+gsubinds[i], gsubinds[i+1]-gsubinds[i]));\n\t\t//offset += gsubinds[gsubinds.length-1];\n\t};\n\t\n\tTypr.CFF.tableSE = [\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      1,   2,   3,   4,   5,   6,   7,   8,\n      9,  10,  11,  12,  13,  14,  15,  16,\n     17,  18,  19,  20,  21,  22,  23,  24,\n     25,  26,  27,  28,  29,  30,  31,  32,\n     33,  34,  35,  36,  37,  38,  39,  40,\n     41,  42,  43,  44,  45,  46,  47,  48,\n     49,  50,  51,  52,  53,  54,  55,  56,\n     57,  58,  59,  60,  61,  62,  63,  64,\n     65,  66,  67,  68,  69,  70,  71,  72,\n     73,  74,  75,  76,  77,  78,  79,  80,\n     81,  82,  83,  84,  85,  86,  87,  88,\n     89,  90,  91,  92,  93,  94,  95,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0,  96,  97,  98,  99, 100, 101, 102,\n    103, 104, 105, 106, 107, 108, 109, 110,\n      0, 111, 112, 113, 114,   0, 115, 116,\n    117, 118, 119, 120, 121, 122,   0, 123,\n      0, 124, 125, 126, 127, 128, 129, 130,\n    131,   0, 132, 133,   0, 134, 135, 136,\n    137,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,\n      0, 138,   0, 139,   0,   0,   0,   0,\n    140, 141, 142, 143,   0,   0,   0,   0,\n      0, 144,   0,   0,   0, 145,   0,   0,\n    146, 147, 148, 149,   0,   0,   0,   0\n  ];\n  \n\tTypr.CFF.glyphByUnicode = function(cff, code)\n\t{\n\t\tfor(var i=0; i<cff.charset.length; i++) if(cff.charset[i]==code) return i;\n\t\treturn -1;\n\t};\n\t\n\tTypr.CFF.glyphBySE = function(cff, charcode)\t// glyph by standard encoding\n\t{\n\t\tif ( charcode < 0 || charcode > 255 ) return -1;\n\t\treturn Typr.CFF.glyphByUnicode(cff, Typr.CFF.tableSE[charcode]);\t\t\n\t};\n\t\n\tTypr.CFF.readEncoding = function(data, offset, num)\n\t{\n\t\tvar bin = Typr._bin;\n\t\t\n\t\tvar array = ['.notdef'];\n\t\tvar format = data[offset];  offset++;\n\t\t//console.log(\"Encoding\");\n\t\t//console.log(format);\n\t\t\n\t\tif(format==0)\n\t\t{\n\t\t\tvar nCodes = data[offset];  offset++;\n\t\t\tfor(var i=0; i<nCodes; i++)  array.push(data[offset+i]);\n\t\t}\n\t\t/*\n\t\telse if(format==1 || format==2)\n\t\t{\n\t\t\twhile(charset.length<num)\n\t\t\t{\n\t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\tvar nLeft=0;\n\t\t\t\tif(format==1) {  nLeft = data[offset];  offset++;  }\n\t\t\t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\n\t\t\t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\n\t\t\t}\n\t\t}\n\t\t*/\n\t\telse throw \"error: unknown encoding format: \" + format;\n\t\t\n\t\treturn array;\n\t};\n\n\tTypr.CFF.readCharset = function(data, offset, num)\n\t{\n\t\tvar bin = Typr._bin;\n\t\t\n\t\tvar charset = ['.notdef'];\n\t\tvar format = data[offset];  offset++;\n\t\t\n\t\tif(format==0)\n\t\t{\n\t\t\tfor(var i=0; i<num; i++) \n\t\t\t{\n\t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\tcharset.push(first);\n\t\t\t}\n\t\t}\n\t\telse if(format==1 || format==2)\n\t\t{\n\t\t\twhile(charset.length<num)\n\t\t\t{\n\t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\tvar nLeft=0;\n\t\t\t\tif(format==1) {  nLeft = data[offset];  offset++;  }\n\t\t\t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\n\t\t\t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\n\t\t\t}\n\t\t}\n\t\telse throw \"error: format: \" + format;\n\t\t\n\t\treturn charset;\n\t};\n\n\tTypr.CFF.readIndex = function(data, offset, inds)\n\t{\n\t\tvar bin = Typr._bin;\n\t\t\n\t\tvar count = bin.readUshort(data, offset)+1;  offset+=2;\n\t\tvar offsize = data[offset];  offset++;\n\t\t\n\t\tif     (offsize==1) for(var i=0; i<count; i++) inds.push( data[offset+i] );\n\t\telse if(offsize==2) for(var i=0; i<count; i++) inds.push( bin.readUshort(data, offset+i*2) );\n\t\telse if(offsize==3) for(var i=0; i<count; i++) inds.push( bin.readUint  (data, offset+i*3 - 1) & 0x00ffffff );\n\t\telse if(count!=1) throw \"unsupported offset size: \" + offsize + \", count: \" + count;\n\t\t\n\t\toffset += count*offsize;\n\t\treturn offset-1;\n\t};\n\t\n\tTypr.CFF.getCharString = function(data, offset, o)\n\t{\n\t\tvar bin = Typr._bin;\n\t\t\n\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\n\t\tvar vs = 1;\n\t\tvar op=null, val=null;\n\t\t// operand\n\t\tif(b0<=20) { op = b0;  vs=1;  }\n\t\tif(b0==12) { op = b0*100+b1;  vs=2;  }\n\t\t//if(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\n\t\tif(21 <=b0 && b0<= 27) { op = b0;  vs=1; }\n\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\n\t\tif(29 <=b0 && b0<= 31) { op = b0;  vs=1; }\n\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\n\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\n\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\n\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;   }\n\t\t\n\t\to.val = val!=null ? val : \"o\"+op;\n\t\to.size = vs;\n\t};\n\t\n\tTypr.CFF.readCharString = function(data, offset, length)\n\t{\n\t\tvar end = offset + length;\n\t\tvar bin = Typr._bin;\n\t\tvar arr = [];\n\t\t\n\t\twhile(offset<end)\n\t\t{\n\t\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\n\t\t\tvar vs = 1;\n\t\t\tvar op=null, val=null;\n\t\t\t// operand\n\t\t\tif(b0<=20) { op = b0;  vs=1;  }\n\t\t\tif(b0==12) { op = b0*100+b1;  vs=2;  }\n\t\t\tif(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\n\t\t\tif(21 <=b0 && b0<= 27) { op = b0;  vs=1; }\n\t\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\n\t\t\tif(29 <=b0 && b0<= 31) { op = b0;  vs=1; }\n\t\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\n\t\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\n\t\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\n\t\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;   }\n\t\t\t\n\t\t\tarr.push(val!=null ? val : \"o\"+op);\n\t\t\toffset += vs;\t\n\n\t\t\t//var cv = arr[arr.length-1];\n\t\t\t//if(cv==undefined) throw \"error\";\n\t\t\t//console.log()\n\t\t}\t\n\t\treturn arr;\n\t};\n\n\tTypr.CFF.readDict = function(data, offset, end)\n\t{\n\t\tvar bin = Typr._bin;\n\t\t//var dict = [];\n\t\tvar dict = {};\n\t\tvar carr = [];\n\t\t\n\t\twhile(offset<end)\n\t\t{\n\t\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\n\t\t\tvar vs = 1;\n\t\t\tvar key=null, val=null;\n\t\t\t// operand\n\t\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\n\t\t\tif(b0==29) { val = bin.readInt  (data,offset+1);  vs=5; }\n\t\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\n\t\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\n\t\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\n\t\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;  throw \"unknown number\";  }\n\t\t\t\n\t\t\tif(b0==30) \n\t\t\t{  \n\t\t\t\tvar nibs = [];\n\t\t\t\tvs = 1;\n\t\t\t\twhile(true)\n\t\t\t\t{\n\t\t\t\t\tvar b = data[offset+vs];  vs++;\n\t\t\t\t\tvar nib0 = b>>4, nib1 = b&0xf;\n\t\t\t\t\tif(nib0 != 0xf) nibs.push(nib0);  if(nib1!=0xf) nibs.push(nib1);\n\t\t\t\t\tif(nib1==0xf) break;\n\t\t\t\t}\n\t\t\t\tvar s = \"\";\n\t\t\t\tvar chars = [0,1,2,3,4,5,6,7,8,9,\".\",\"e\",\"e-\",\"reserved\",\"-\",\"endOfNumber\"];\n\t\t\t\tfor(var i=0; i<nibs.length; i++) s += chars[nibs[i]];\n\t\t\t\t//console.log(nibs);\n\t\t\t\tval = parseFloat(s);\n\t\t\t}\n\t\t\t\n\t\t\tif(b0<=21)\t// operator\n\t\t\t{\n\t\t\t\tvar keys = [\"version\", \"Notice\", \"FullName\", \"FamilyName\", \"Weight\", \"FontBBox\", \"BlueValues\", \"OtherBlues\", \"FamilyBlues\",\"FamilyOtherBlues\",\n\t\t\t\t\t\"StdHW\", \"StdVW\", \"escape\", \"UniqueID\", \"XUID\", \"charset\", \"Encoding\", \"CharStrings\", \"Private\", \"Subrs\", \n\t\t\t\t\t\"defaultWidthX\", \"nominalWidthX\"];\n\t\t\t\t\t\n\t\t\t\tkey = keys[b0];  vs=1;\n\t\t\t\tif(b0==12) { \n\t\t\t\t\tvar keys = [ \"Copyright\", \"isFixedPitch\", \"ItalicAngle\", \"UnderlinePosition\", \"UnderlineThickness\", \"PaintType\", \"CharstringType\", \"FontMatrix\", \"StrokeWidth\", \"BlueScale\",\n\t\t\t\t\t\"BlueShift\", \"BlueFuzz\", \"StemSnapH\", \"StemSnapV\", \"ForceBold\", 0,0, \"LanguageGroup\", \"ExpansionFactor\", \"initialRandomSeed\",\n\t\t\t\t\t\"SyntheticBase\", \"PostScript\", \"BaseFontName\", \"BaseFontBlend\", 0,0,0,0,0,0, \n\t\t\t\t\t\"ROS\", \"CIDFontVersion\", \"CIDFontRevision\", \"CIDFontType\", \"CIDCount\", \"UIDBase\", \"FDArray\", \"FDSelect\", \"FontName\"];\n\t\t\t\t\tkey = keys[b1];  vs=2; \n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(key!=null) {  dict[key] = carr.length==1 ? carr[0] : carr;  carr=[]; }\n\t\t\telse  carr.push(val);  \n\t\t\t\n\t\t\toffset += vs;\t\t\n\t\t}\t\n\t\treturn dict;\n\t};\n\n\nTypr.cmap = {};\nTypr.cmap.parse = function(data, offset, length)\n{\n\tdata = new Uint8Array(data.buffer, offset, length);\n\toffset = 0;\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\tvar version   = bin.readUshort(data, offset);  offset += 2;\n\tvar numTables = bin.readUshort(data, offset);  offset += 2;\n\t\n\t//console.log(version, numTables);\n\t\n\tvar offs = [];\n\tobj.tables = [];\n\t\n\t\n\tfor(var i=0; i<numTables; i++)\n\t{\n\t\tvar platformID = bin.readUshort(data, offset);  offset += 2;\n\t\tvar encodingID = bin.readUshort(data, offset);  offset += 2;\n\t\tvar noffset = bin.readUint(data, offset);       offset += 4;\n\t\t\n\t\tvar id = \"p\"+platformID+\"e\"+encodingID;\n\t\t\n\t\t//console.log(\"cmap subtable\", platformID, encodingID, noffset);\n\t\t\n\t\t\n\t\tvar tind = offs.indexOf(noffset);\n\t\t\n\t\tif(tind==-1)\n\t\t{\n\t\t\ttind = obj.tables.length;\n\t\t\tvar subt;\n\t\t\toffs.push(noffset);\n\t\t\tvar format = bin.readUshort(data, noffset);\n\t\t\tif     (format== 0) subt = Typr.cmap.parse0(data, noffset);\n\t\t\telse if(format== 4) subt = Typr.cmap.parse4(data, noffset);\n\t\t\telse if(format== 6) subt = Typr.cmap.parse6(data, noffset);\n\t\t\telse if(format==12) subt = Typr.cmap.parse12(data,noffset);\n\t\t\telse console.log(\"unknown format: \"+format, platformID, encodingID, noffset);\n\t\t\tobj.tables.push(subt);\n\t\t}\n\t\t\n\t\tif(obj[id]!=null) throw \"multiple tables for one platform+encoding\";\n\t\tobj[id] = tind;\n\t}\n\treturn obj;\n};\n\nTypr.cmap.parse0 = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\tobj.format = bin.readUshort(data, offset);  offset += 2;\n\tvar len    = bin.readUshort(data, offset);  offset += 2;\n\tvar lang   = bin.readUshort(data, offset);  offset += 2;\n\tobj.map = [];\n\tfor(var i=0; i<len-6; i++) obj.map.push(data[offset+i]);\n\treturn obj;\n};\n\nTypr.cmap.parse4 = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar offset0 = offset;\n\tvar obj = {};\n\t\n\tobj.format = bin.readUshort(data, offset);  offset+=2;\n\tvar length = bin.readUshort(data, offset);  offset+=2;\n\tvar language = bin.readUshort(data, offset);  offset+=2;\n\tvar segCountX2 = bin.readUshort(data, offset);  offset+=2;\n\tvar segCount = segCountX2/2;\n\tobj.searchRange = bin.readUshort(data, offset);  offset+=2;\n\tobj.entrySelector = bin.readUshort(data, offset);  offset+=2;\n\tobj.rangeShift = bin.readUshort(data, offset);  offset+=2;\n\tobj.endCount   = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\n\toffset+=2;\n\tobj.startCount = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\n\tobj.idDelta = [];\n\tfor(var i=0; i<segCount; i++) {obj.idDelta.push(bin.readShort(data, offset));  offset+=2;}\n\tobj.idRangeOffset = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\n\tobj.glyphIdArray = [];\n\twhile(offset< offset0+length) {obj.glyphIdArray.push(bin.readUshort(data, offset));  offset+=2;}\n\treturn obj;\n};\n\nTypr.cmap.parse6 = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\t\n\tobj.format = bin.readUshort(data, offset);  offset+=2;\n\tvar length = bin.readUshort(data, offset);  offset+=2;\n\tvar language = bin.readUshort(data, offset);  offset+=2;\n\tobj.firstCode = bin.readUshort(data, offset);  offset+=2;\n\tvar entryCount = bin.readUshort(data, offset);  offset+=2;\n\tobj.glyphIdArray = [];\n\tfor(var i=0; i<entryCount; i++) {obj.glyphIdArray.push(bin.readUshort(data, offset));  offset+=2;}\n\t\n\treturn obj;\n};\n\nTypr.cmap.parse12 = function(data, offset)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\t\n\tobj.format = bin.readUshort(data, offset);  offset+=2;\n\toffset += 2;\n\tvar length = bin.readUint(data, offset);  offset+=4;\n\tvar lang   = bin.readUint(data, offset);  offset+=4;\n\tvar nGroups= bin.readUint(data, offset);  offset+=4;\n\tobj.groups = [];\n\t\n\tfor(var i=0; i<nGroups; i++)  \n\t{\n\t\tvar off = offset + i * 12;\n\t\tvar startCharCode = bin.readUint(data, off+0);\n\t\tvar endCharCode   = bin.readUint(data, off+4);\n\t\tvar startGlyphID  = bin.readUint(data, off+8);\n\t\tobj.groups.push([  startCharCode, endCharCode, startGlyphID  ]);\n\t}\n\treturn obj;\n};\n\nTypr.glyf = {};\nTypr.glyf.parse = function(data, offset, length, font)\n{\n\tvar obj = [];\n\tfor(var g=0; g<font.maxp.numGlyphs; g++) obj.push(null);\n\treturn obj;\n};\n\nTypr.glyf._parseGlyf = function(font, g)\n{\n\tvar bin = Typr._bin;\n\tvar data = font._data;\n\t\n\tvar offset = Typr._tabOffset(data, \"glyf\", font._offset) + font.loca[g];\n\t\t\n\tif(font.loca[g]==font.loca[g+1]) return null;\n\t\t\n\tvar gl = {};\n\t\t\n\tgl.noc  = bin.readShort(data, offset);  offset+=2;\t\t// number of contours\n\tgl.xMin = bin.readShort(data, offset);  offset+=2;\n\tgl.yMin = bin.readShort(data, offset);  offset+=2;\n\tgl.xMax = bin.readShort(data, offset);  offset+=2;\n\tgl.yMax = bin.readShort(data, offset);  offset+=2;\n\t\n\tif(gl.xMin>=gl.xMax || gl.yMin>=gl.yMax) return null;\n\t\t\n\tif(gl.noc>0)\n\t{\n\t\tgl.endPts = [];\n\t\tfor(var i=0; i<gl.noc; i++) { gl.endPts.push(bin.readUshort(data,offset)); offset+=2; }\n\t\t\n\t\tvar instructionLength = bin.readUshort(data,offset); offset+=2;\n\t\tif((data.length-offset)<instructionLength) return null;\n\t\tgl.instructions = bin.readBytes(data, offset, instructionLength);   offset+=instructionLength;\n\t\t\n\t\tvar crdnum = gl.endPts[gl.noc-1]+1;\n\t\tgl.flags = [];\n\t\tfor(var i=0; i<crdnum; i++ ) \n\t\t{ \n\t\t\tvar flag = data[offset];  offset++; \n\t\t\tgl.flags.push(flag); \n\t\t\tif((flag&8)!=0)\n\t\t\t{\n\t\t\t\tvar rep = data[offset];  offset++;\n\t\t\t\tfor(var j=0; j<rep; j++) { gl.flags.push(flag); i++; }\n\t\t\t}\n\t\t}\n\t\tgl.xs = [];\n\t\tfor(var i=0; i<crdnum; i++) {\n\t\t\tvar i8=((gl.flags[i]&2)!=0), same=((gl.flags[i]&16)!=0);  \n\t\t\tif(i8) { gl.xs.push(same ? data[offset] : -data[offset]);  offset++; }\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(same) gl.xs.push(0);\n\t\t\t\telse { gl.xs.push(bin.readShort(data, offset));  offset+=2; }\n\t\t\t}\n\t\t}\n\t\tgl.ys = [];\n\t\tfor(var i=0; i<crdnum; i++) {\n\t\t\tvar i8=((gl.flags[i]&4)!=0), same=((gl.flags[i]&32)!=0);  \n\t\t\tif(i8) { gl.ys.push(same ? data[offset] : -data[offset]);  offset++; }\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(same) gl.ys.push(0);\n\t\t\t\telse { gl.ys.push(bin.readShort(data, offset));  offset+=2; }\n\t\t\t}\n\t\t}\n\t\tvar x = 0, y = 0;\n\t\tfor(var i=0; i<crdnum; i++) { x += gl.xs[i]; y += gl.ys[i];  gl.xs[i]=x;  gl.ys[i]=y; }\n\t\t//console.log(endPtsOfContours, instructionLength, instructions, flags, xCoordinates, yCoordinates);\n\t}\n\telse\n\t{\n\t\tvar ARG_1_AND_2_ARE_WORDS\t= 1<<0;\n\t\tvar ARGS_ARE_XY_VALUES\t\t= 1<<1;\n\t\tvar WE_HAVE_A_SCALE\t\t\t= 1<<3;\n\t\tvar MORE_COMPONENTS\t\t\t= 1<<5;\n\t\tvar WE_HAVE_AN_X_AND_Y_SCALE= 1<<6;\n\t\tvar WE_HAVE_A_TWO_BY_TWO\t= 1<<7;\n\t\tvar WE_HAVE_INSTRUCTIONS\t= 1<<8;\n\t\t\n\t\tgl.parts = [];\n\t\tvar flags;\n\t\tdo {\n\t\t\tflags = bin.readUshort(data, offset);  offset += 2;\n\t\t\tvar part = { m:{a:1,b:0,c:0,d:1,tx:0,ty:0}, p1:-1, p2:-1 };  gl.parts.push(part);\n\t\t\tpart.glyphIndex = bin.readUshort(data, offset);  offset += 2;\n\t\t\tif ( flags & ARG_1_AND_2_ARE_WORDS) {\n\t\t\t\tvar arg1 = bin.readShort(data, offset);  offset += 2;\n\t\t\t\tvar arg2 = bin.readShort(data, offset);  offset += 2;\n\t\t\t} else {\n\t\t\t\tvar arg1 = bin.readInt8(data, offset);  offset ++;\n\t\t\t\tvar arg2 = bin.readInt8(data, offset);  offset ++;\n\t\t\t}\n\t\t\t\n\t\t\tif(flags & ARGS_ARE_XY_VALUES) { part.m.tx = arg1;  part.m.ty = arg2; }\n\t\t\telse  {  part.p1=arg1;  part.p2=arg2;  }\n\t\t\t//part.m.tx = arg1;  part.m.ty = arg2;\n\t\t\t//else { throw \"params are not XY values\"; }\n\t\t\t\n\t\t\tif ( flags & WE_HAVE_A_SCALE ) {\n\t\t\t\tpart.m.a = part.m.d = bin.readF2dot14(data, offset);  offset += 2;    \n\t\t\t} else if ( flags & WE_HAVE_AN_X_AND_Y_SCALE ) {\n\t\t\t\tpart.m.a = bin.readF2dot14(data, offset);  offset += 2; \n\t\t\t\tpart.m.d = bin.readF2dot14(data, offset);  offset += 2; \n\t\t\t} else if ( flags & WE_HAVE_A_TWO_BY_TWO ) {\n\t\t\t\tpart.m.a = bin.readF2dot14(data, offset);  offset += 2; \n\t\t\t\tpart.m.b = bin.readF2dot14(data, offset);  offset += 2; \n\t\t\t\tpart.m.c = bin.readF2dot14(data, offset);  offset += 2; \n\t\t\t\tpart.m.d = bin.readF2dot14(data, offset);  offset += 2; \n\t\t\t}\n\t\t} while ( flags & MORE_COMPONENTS ) \n\t\tif (flags & WE_HAVE_INSTRUCTIONS){\n\t\t\tvar numInstr = bin.readUshort(data, offset);  offset += 2;\n\t\t\tgl.instr = [];\n\t\t\tfor(var i=0; i<numInstr; i++) { gl.instr.push(data[offset]);  offset++; }\n\t\t}\n\t}\n\treturn gl;\n};\n\n\nTypr.GPOS = {};\nTypr.GPOS.parse = function(data, offset, length, font) {  return Typr._lctf.parse(data, offset, length, font, Typr.GPOS.subt);  };\n\n\nTypr.GPOS.subt = function(data, ltype, offset)\t// lookup type\n{\n\tvar bin = Typr._bin, offset0 = offset, tab = {};\n\t\n\ttab.fmt  = bin.readUshort(data, offset);  offset+=2;\n\t\n\t//console.log(ltype, tab.fmt);\n\t\n\tif(ltype==1 || ltype==2 || ltype==3 || ltype==7 || (ltype==8 && tab.fmt<=2)) {\n\t\tvar covOff  = bin.readUshort(data, offset);  offset+=2;\n\t\ttab.coverage = Typr._lctf.readCoverage(data, covOff+offset0);\n\t}\n\tif(ltype==1 && tab.fmt==1) {\n\t\tvar valFmt1 = bin.readUshort(data, offset);  offset+=2;\n\t\tvar ones1 = Typr._lctf.numOfOnes(valFmt1);\n\t\tif(valFmt1!=0)  tab.pos = Typr.GPOS.readValueRecord(data, offset, valFmt1);\n\t}\n\telse if(ltype==2) {\n\t\tvar valFmt1 = bin.readUshort(data, offset);  offset+=2;\n\t\tvar valFmt2 = bin.readUshort(data, offset);  offset+=2;\n\t\tvar ones1 = Typr._lctf.numOfOnes(valFmt1);\n\t\tvar ones2 = Typr._lctf.numOfOnes(valFmt2);\n\t\tif(tab.fmt==1)\n\t\t{\n\t\t\ttab.pairsets = [];\n\t\t\tvar psc = bin.readUshort(data, offset);  offset+=2;  // PairSetCount\n\t\t\t\n\t\t\tfor(var i=0; i<psc; i++)\n\t\t\t{\n\t\t\t\tvar psoff = offset0 + bin.readUshort(data, offset);  offset+=2;\n\t\t\t\t\n\t\t\t\tvar pvc = bin.readUshort(data, psoff);  psoff+=2;\n\t\t\t\tvar arr = [];\n\t\t\t\tfor(var j=0; j<pvc; j++)\n\t\t\t\t{\n\t\t\t\t\tvar gid2 = bin.readUshort(data, psoff);  psoff+=2;\n\t\t\t\t\tvar value1, value2;\n\t\t\t\t\tif(valFmt1!=0) {  value1 = Typr.GPOS.readValueRecord(data, psoff, valFmt1);  psoff+=ones1*2;  }\n\t\t\t\t\tif(valFmt2!=0) {  value2 = Typr.GPOS.readValueRecord(data, psoff, valFmt2);  psoff+=ones2*2;  }\n\t\t\t\t\t//if(value1!=null) throw \"e\";\n\t\t\t\t\tarr.push({gid2:gid2, val1:value1, val2:value2});\n\t\t\t\t}\n\t\t\t\ttab.pairsets.push(arr);\n\t\t\t}\n\t\t}\n\t\tif(tab.fmt==2)\n\t\t{\n\t\t\tvar classDef1 = bin.readUshort(data, offset);  offset+=2;\n\t\t\tvar classDef2 = bin.readUshort(data, offset);  offset+=2;\n\t\t\tvar class1Count = bin.readUshort(data, offset);  offset+=2;\n\t\t\tvar class2Count = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\n\t\t\ttab.classDef1 = Typr._lctf.readClassDef(data, offset0 + classDef1);\n\t\t\ttab.classDef2 = Typr._lctf.readClassDef(data, offset0 + classDef2);\n\t\t\t\n\t\t\ttab.matrix = [];\n\t\t\tfor(var i=0; i<class1Count; i++)\n\t\t\t{\n\t\t\t\tvar row = [];\n\t\t\t\tfor(var j=0; j<class2Count; j++)\n\t\t\t\t{\n\t\t\t\t\tvar value1 = null, value2 = null;\n\t\t\t\t\tif(tab.valFmt1!=0) { value1 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt1);  offset+=ones1*2; }\n\t\t\t\t\tif(tab.valFmt2!=0) { value2 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt2);  offset+=ones2*2; }\n\t\t\t\t\trow.push({val1:value1, val2:value2});\n\t\t\t\t}\n\t\t\t\ttab.matrix.push(row);\n\t\t\t}\n\t\t}\n\t}\n\treturn tab;\n};\n\n\nTypr.GPOS.readValueRecord = function(data, offset, valFmt)\n{\n\tvar bin = Typr._bin;\n\tvar arr = [];\n\tarr.push( (valFmt&1) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&1) ? 2 : 0;  // X_PLACEMENT\n\tarr.push( (valFmt&2) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&2) ? 2 : 0;  // Y_PLACEMENT\n\tarr.push( (valFmt&4) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&4) ? 2 : 0;  // X_ADVANCE\n\tarr.push( (valFmt&8) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&8) ? 2 : 0;  // Y_ADVANCE\n\treturn arr;\n};\n\nTypr.GSUB = {};\nTypr.GSUB.parse = function(data, offset, length, font) {  return Typr._lctf.parse(data, offset, length, font, Typr.GSUB.subt);  };\n\n\nTypr.GSUB.subt = function(data, ltype, offset)\t// lookup type\n{\n\tvar bin = Typr._bin, offset0 = offset, tab = {};\n\t\n\ttab.fmt  = bin.readUshort(data, offset);  offset+=2;\n\t\n\tif(ltype!=1 && ltype!=4 && ltype!=5 && ltype!=6) return null;\n\t\n\tif(ltype==1 || ltype==4 || (ltype==5 && tab.fmt<=2) || (ltype==6 && tab.fmt<=2)) {\n\t\tvar covOff  = bin.readUshort(data, offset);  offset+=2;\n\t\ttab.coverage = Typr._lctf.readCoverage(data, offset0+covOff);\t// not always is coverage here\n\t}\n\t\n\tif(ltype==1) {\t\n\t\tif(tab.fmt==1) {\n\t\t\ttab.delta = bin.readShort(data, offset);  offset+=2;\n\t\t}\n\t\telse if(tab.fmt==2) {\n\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n\t\t\ttab.newg = bin.readUshorts(data, offset, cnt);  offset+=tab.newg.length*2;\n\t\t}\n\t}\n\t//  Ligature Substitution Subtable\n\telse if(ltype==4) {\n\t\ttab.vals = [];\n\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n\t\tfor(var i=0; i<cnt; i++) {\n\t\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n\t\t\ttab.vals.push(Typr.GSUB.readLigatureSet(data, offset0+loff));\n\t\t}\n\t\t//console.log(tab.coverage);\n\t\t//console.log(tab.vals);\n\t} \n\t//  Contextual Substitution Subtable\n\telse if(ltype==5) {\n\t\tif(tab.fmt==2) {\n\t\t\tvar cDefOffset = bin.readUshort(data, offset);  offset+=2;\n\t\t\ttab.cDef = Typr._lctf.readClassDef(data, offset0 + cDefOffset);\n\t\t\ttab.scset = [];\n\t\t\tvar subClassSetCount = bin.readUshort(data, offset);  offset+=2;\n\t\t\tfor(var i=0; i<subClassSetCount; i++)\n\t\t\t{\n\t\t\t\tvar scsOff = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\ttab.scset.push(  scsOff==0 ? null : Typr.GSUB.readSubClassSet(data, offset0 + scsOff)  );\n\t\t\t}\n\t\t}\n\t\t//else console.log(\"unknown table format\", tab.fmt);\n\t}\n\t//*\n\telse if(ltype==6) {\n\t\t/*\n\t\tif(tab.fmt==2) {\n\t\t\tvar btDef = bin.readUshort(data, offset);  offset+=2;\n\t\t\tvar inDef = bin.readUshort(data, offset);  offset+=2;\n\t\t\tvar laDef = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\n\t\t\ttab.btDef = Typr._lctf.readClassDef(data, offset0 + btDef);\n\t\t\ttab.inDef = Typr._lctf.readClassDef(data, offset0 + inDef);\n\t\t\ttab.laDef = Typr._lctf.readClassDef(data, offset0 + laDef);\n\t\t\t\n\t\t\ttab.scset = [];\n\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n\t\t\tfor(var i=0; i<cnt; i++) {\n\t\t\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\ttab.scset.push(Typr.GSUB.readChainSubClassSet(data, offset0+loff));\n\t\t\t}\n\t\t}\n\t\t*/\n\t\tif(tab.fmt==3) {\n\t\t\tfor(var i=0; i<3; i++) {\n\t\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n\t\t\t\tvar cvgs = [];\n\t\t\t\tfor(var j=0; j<cnt; j++) cvgs.push(  Typr._lctf.readCoverage(data, offset0 + bin.readUshort(data, offset+j*2))   );\n\t\t\t\toffset+=cnt*2;\n\t\t\t\tif(i==0) tab.backCvg = cvgs;\n\t\t\t\tif(i==1) tab.inptCvg = cvgs;\n\t\t\t\tif(i==2) tab.ahedCvg = cvgs;\n\t\t\t}\n\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n\t\t\ttab.lookupRec = Typr.GSUB.readSubstLookupRecords(data, offset, cnt);\n\t\t}\n\t\t//console.log(tab);\n\t} //*/\n\t//if(tab.coverage.indexOf(3)!=-1) console.log(ltype, fmt, tab);\n\t\n\treturn tab;\n};\n\nTypr.GSUB.readSubClassSet = function(data, offset)\n{\n\tvar rUs = Typr._bin.readUshort, offset0 = offset, lset = [];\n\tvar cnt = rUs(data, offset);  offset+=2;\n\tfor(var i=0; i<cnt; i++) {\n\t\tvar loff = rUs(data, offset);  offset+=2;\n\t\tlset.push(Typr.GSUB.readSubClassRule(data, offset0+loff));\n\t}\n\treturn lset;\n};\nTypr.GSUB.readSubClassRule= function(data, offset)\n{\n\tvar rUs = Typr._bin.readUshort, rule = {};\n\tvar gcount = rUs(data, offset);  offset+=2;\n\tvar scount = rUs(data, offset);  offset+=2;\n\trule.input = [];\n\tfor(var i=0; i<gcount-1; i++) {\n\t\trule.input.push(rUs(data, offset));  offset+=2;\n\t}\n\trule.substLookupRecords = Typr.GSUB.readSubstLookupRecords(data, offset, scount);\n\treturn rule;\n};\nTypr.GSUB.readSubstLookupRecords = function(data, offset, cnt)\n{\n\tvar rUs = Typr._bin.readUshort;\n\tvar out = [];\n\tfor(var i=0; i<cnt; i++) {  out.push(rUs(data, offset), rUs(data, offset+2));  offset+=4;  }\n\treturn out;\n};\n\nTypr.GSUB.readChainSubClassSet = function(data, offset)\n{\n\tvar bin = Typr._bin, offset0 = offset, lset = [];\n\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n\tfor(var i=0; i<cnt; i++) {\n\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n\t\tlset.push(Typr.GSUB.readChainSubClassRule(data, offset0+loff));\n\t}\n\treturn lset;\n};\nTypr.GSUB.readChainSubClassRule= function(data, offset)\n{\n\tvar bin = Typr._bin, rule = {};\n\tvar pps = [\"backtrack\", \"input\", \"lookahead\"];\n\tfor(var pi=0; pi<pps.length; pi++) {\n\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;  if(pi==1) cnt--;\n\t\trule[pps[pi]]=bin.readUshorts(data, offset, cnt);  offset+= rule[pps[pi]].length*2;\n\t}\n\tvar cnt = bin.readUshort(data, offset);  offset+=2;\n\trule.subst = bin.readUshorts(data, offset, cnt*2);  offset += rule.subst.length*2;\n\treturn rule;\n};\n\nTypr.GSUB.readLigatureSet = function(data, offset)\n{\n\tvar bin = Typr._bin, offset0 = offset, lset = [];\n\tvar lcnt = bin.readUshort(data, offset);  offset+=2;\n\tfor(var j=0; j<lcnt; j++) {\n\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\n\t\tlset.push(Typr.GSUB.readLigature(data, offset0+loff));\n\t}\n\treturn lset;\n};\nTypr.GSUB.readLigature = function(data, offset)\n{\n\tvar bin = Typr._bin, lig = {chain:[]};\n\tlig.nglyph = bin.readUshort(data, offset);  offset+=2;\n\tvar ccnt = bin.readUshort(data, offset);  offset+=2;\n\tfor(var k=0; k<ccnt-1; k++) {  lig.chain.push(bin.readUshort(data, offset));  offset+=2;  }\n\treturn lig;\n};\n\n\n\nTypr.head = {};\nTypr.head.parse = function(data, offset, length)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\n\tobj.fontRevision = bin.readFixed(data, offset);  offset += 4;\n\tvar checkSumAdjustment = bin.readUint(data, offset);  offset += 4;\n\tvar magicNumber = bin.readUint(data, offset);  offset += 4;\n\tobj.flags = bin.readUshort(data, offset);  offset += 2;\n\tobj.unitsPerEm = bin.readUshort(data, offset);  offset += 2;\n\tobj.created  = bin.readUint64(data, offset);  offset += 8;\n\tobj.modified = bin.readUint64(data, offset);  offset += 8;\n\tobj.xMin = bin.readShort(data, offset);  offset += 2;\n\tobj.yMin = bin.readShort(data, offset);  offset += 2;\n\tobj.xMax = bin.readShort(data, offset);  offset += 2;\n\tobj.yMax = bin.readShort(data, offset);  offset += 2;\n\tobj.macStyle = bin.readUshort(data, offset);  offset += 2;\n\tobj.lowestRecPPEM = bin.readUshort(data, offset);  offset += 2;\n\tobj.fontDirectionHint = bin.readShort(data, offset);  offset += 2;\n\tobj.indexToLocFormat  = bin.readShort(data, offset);  offset += 2;\n\tobj.glyphDataFormat   = bin.readShort(data, offset);  offset += 2;\n\treturn obj;\n};\n\n\nTypr.hhea = {};\nTypr.hhea.parse = function(data, offset, length)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\n\tobj.ascender  = bin.readShort(data, offset);  offset += 2;\n\tobj.descender = bin.readShort(data, offset);  offset += 2;\n\tobj.lineGap = bin.readShort(data, offset);  offset += 2;\n\t\n\tobj.advanceWidthMax = bin.readUshort(data, offset);  offset += 2;\n\tobj.minLeftSideBearing  = bin.readShort(data, offset);  offset += 2;\n\tobj.minRightSideBearing = bin.readShort(data, offset);  offset += 2;\n\tobj.xMaxExtent = bin.readShort(data, offset);  offset += 2;\n\t\n\tobj.caretSlopeRise = bin.readShort(data, offset);  offset += 2;\n\tobj.caretSlopeRun  = bin.readShort(data, offset);  offset += 2;\n\tobj.caretOffset    = bin.readShort(data, offset);  offset += 2;\n\t\n\toffset += 4*2;\n\t\n\tobj.metricDataFormat = bin.readShort (data, offset);  offset += 2;\n\tobj.numberOfHMetrics = bin.readUshort(data, offset);  offset += 2;\n\treturn obj;\n};\n\n\nTypr.hmtx = {};\nTypr.hmtx.parse = function(data, offset, length, font)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\t\n\tobj.aWidth = [];\n\tobj.lsBearing = [];\n\t\n\t\n\tvar aw = 0, lsb = 0;\n\t\n\tfor(var i=0; i<font.maxp.numGlyphs; i++)\n\t{\n\t\tif(i<font.hhea.numberOfHMetrics) {  aw=bin.readUshort(data, offset);  offset += 2;  lsb=bin.readShort(data, offset);  offset+=2;  }\n\t\tobj.aWidth.push(aw);\n\t\tobj.lsBearing.push(lsb);\n\t}\n\t\n\treturn obj;\n};\n\n\nTypr.kern = {};\nTypr.kern.parse = function(data, offset, length, font)\n{\n\tvar bin = Typr._bin;\n\t\n\tvar version = bin.readUshort(data, offset);  offset+=2;\n\tif(version==1) return Typr.kern.parseV1(data, offset-2, length, font);\n\tvar nTables = bin.readUshort(data, offset);  offset+=2;\n\t\n\tvar map = {glyph1: [], rval:[]};\n\tfor(var i=0; i<nTables; i++)\n\t{\n\t\toffset+=2;\t// skip version\n\t\tvar length  = bin.readUshort(data, offset);  offset+=2;\n\t\tvar coverage = bin.readUshort(data, offset);  offset+=2;\n\t\tvar format = coverage>>>8;\n\t\t/* I have seen format 128 once, that's why I do */ format &= 0xf;\n\t\tif(format==0) offset = Typr.kern.readFormat0(data, offset, map);\n\t\telse throw \"unknown kern table format: \"+format;\n\t}\n\treturn map;\n};\n\nTypr.kern.parseV1 = function(data, offset, length, font)\n{\n\tvar bin = Typr._bin;\n\t\n\tvar version = bin.readFixed(data, offset);  offset+=4;\n\tvar nTables = bin.readUint(data, offset);  offset+=4;\n\t\n\tvar map = {glyph1: [], rval:[]};\n\tfor(var i=0; i<nTables; i++)\n\t{\n\t\tvar length = bin.readUint(data, offset);   offset+=4;\n\t\tvar coverage = bin.readUshort(data, offset);  offset+=2;\n\t\tvar tupleIndex = bin.readUshort(data, offset);  offset+=2;\n\t\tvar format = coverage>>>8;\n\t\t/* I have seen format 128 once, that's why I do */ format &= 0xf;\n\t\tif(format==0) offset = Typr.kern.readFormat0(data, offset, map);\n\t\telse throw \"unknown kern table format: \"+format;\n\t}\n\treturn map;\n};\n\nTypr.kern.readFormat0 = function(data, offset, map)\n{\n\tvar bin = Typr._bin;\n\tvar pleft = -1;\n\tvar nPairs        = bin.readUshort(data, offset);  offset+=2;\n\tvar searchRange   = bin.readUshort(data, offset);  offset+=2;\n\tvar entrySelector = bin.readUshort(data, offset);  offset+=2;\n\tvar rangeShift    = bin.readUshort(data, offset);  offset+=2;\n\tfor(var j=0; j<nPairs; j++)\n\t{\n\t\tvar left  = bin.readUshort(data, offset);  offset+=2;\n\t\tvar right = bin.readUshort(data, offset);  offset+=2;\n\t\tvar value = bin.readShort (data, offset);  offset+=2;\n\t\tif(left!=pleft) { map.glyph1.push(left);  map.rval.push({ glyph2:[], vals:[] }); }\n\t\tvar rval = map.rval[map.rval.length-1];\n\t\trval.glyph2.push(right);   rval.vals.push(value);\n\t\tpleft = left;\n\t}\n\treturn offset;\n};\n\n\n\nTypr.loca = {};\nTypr.loca.parse = function(data, offset, length, font)\n{\n\tvar bin = Typr._bin;\n\tvar obj = [];\n\t\n\tvar ver = font.head.indexToLocFormat;\n\t//console.log(\"loca\", ver, length, 4*font.maxp.numGlyphs);\n\tvar len = font.maxp.numGlyphs+1;\n\t\n\tif(ver==0) for(var i=0; i<len; i++) obj.push(bin.readUshort(data, offset+(i<<1))<<1);\n\tif(ver==1) for(var i=0; i<len; i++) obj.push(bin.readUint  (data, offset+(i<<2))   );\n\t\n\treturn obj;\n};\n\n\nTypr.maxp = {};\nTypr.maxp.parse = function(data, offset, length)\n{\n\t//console.log(data.length, offset, length);\n\t\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\t\n\t// both versions 0.5 and 1.0\n\tvar ver = bin.readUint(data, offset); offset += 4;\n\tobj.numGlyphs = bin.readUshort(data, offset);  offset += 2;\n\t\n\t// only 1.0\n\tif(ver == 0x00010000)\n\t{\n\t\tobj.maxPoints             = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxContours           = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxCompositePoints    = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxCompositeContours  = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxZones              = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxTwilightPoints     = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxStorage            = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxFunctionDefs       = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxInstructionDefs    = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxStackElements      = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxSizeOfInstructions = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxComponentElements  = bin.readUshort(data, offset);  offset += 2;\n\t\tobj.maxComponentDepth     = bin.readUshort(data, offset);  offset += 2;\n\t}\n\t\n\treturn obj;\n};\n\n\nTypr.name = {};\nTypr.name.parse = function(data, offset, length)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\tvar format = bin.readUshort(data, offset);  offset += 2;\n\tvar count  = bin.readUshort(data, offset);  offset += 2;\n\tvar stringOffset = bin.readUshort(data, offset);  offset += 2;\n\t\n\t//console.log(format,count);\n\t\n\tvar names = [\n\t\t\"copyright\",\n\t\t\"fontFamily\",\n\t\t\"fontSubfamily\",\n\t\t\"ID\",\n\t\t\"fullName\",\n\t\t\"version\",\n\t\t\"postScriptName\",\n\t\t\"trademark\",\n\t\t\"manufacturer\",\n\t\t\"designer\",\n\t\t\"description\",\n\t\t\"urlVendor\",\n\t\t\"urlDesigner\",\n\t\t\"licence\",\n\t\t\"licenceURL\",\n\t\t\"---\",\n\t\t\"typoFamilyName\",\n\t\t\"typoSubfamilyName\",\n\t\t\"compatibleFull\",\n\t\t\"sampleText\",\n\t\t\"postScriptCID\",\n\t\t\"wwsFamilyName\",\n\t\t\"wwsSubfamilyName\",\n\t\t\"lightPalette\",\n\t\t\"darkPalette\"\n\t];\n\t\n\tvar offset0 = offset;\n\t\n\tfor(var i=0; i<count; i++)\n\t{\n\t\tvar platformID = bin.readUshort(data, offset);  offset += 2;\n\t\tvar encodingID = bin.readUshort(data, offset);  offset += 2;\n\t\tvar languageID = bin.readUshort(data, offset);  offset += 2;\n\t\tvar nameID     = bin.readUshort(data, offset);  offset += 2;\n\t\tvar slen       = bin.readUshort(data, offset);  offset += 2;\n\t\tvar noffset    = bin.readUshort(data, offset);  offset += 2;\n\t\t//console.log(platformID, encodingID, languageID.toString(16), nameID, length, noffset);\n\t\t\n\t\tvar cname = names[nameID];\n\t\tvar soff = offset0 + count*12 + noffset;\n\t\tvar str;\n\t\tif(platformID == 0) str = bin.readUnicode(data, soff, slen/2);\n\t\telse if(platformID == 3 && encodingID == 0) str = bin.readUnicode(data, soff, slen/2);\n\t\telse if(encodingID == 0) str = bin.readASCII  (data, soff, slen);\n\t\telse if(encodingID == 1) str = bin.readUnicode(data, soff, slen/2);\n\t\telse if(encodingID == 3) str = bin.readUnicode(data, soff, slen/2);\n\t\t\n\t\telse if(platformID == 1) { str = bin.readASCII(data, soff, slen);  console.log(\"reading unknown MAC encoding \"+encodingID+\" as ASCII\"); }\n\t\telse throw \"unknown encoding \"+encodingID + \", platformID: \"+platformID;\n\t\t\n\t\tvar tid = \"p\"+platformID+\",\"+(languageID).toString(16);//Typr._platforms[platformID];\n\t\tif(obj[tid]==null) obj[tid] = {};\n\t\tobj[tid][cname] = str;\n\t\tobj[tid]._lang = languageID;\n\t\t//console.log(tid, obj[tid]);\n\t}\n\t/*\n\tif(format == 1)\n\t{\n\t\tvar langTagCount = bin.readUshort(data, offset);  offset += 2;\n\t\tfor(var i=0; i<langTagCount; i++)\n\t\t{\n\t\t\tvar length  = bin.readUshort(data, offset);  offset += 2;\n\t\t\tvar noffset = bin.readUshort(data, offset);  offset += 2;\n\t\t}\n\t}\n\t*/\n\t\n\t//console.log(obj);\n\t\n\tfor(var p in obj) if(obj[p].postScriptName!=null && obj[p]._lang==0x0409) return obj[p];\t\t// United States\n\tfor(var p in obj) if(obj[p].postScriptName!=null && obj[p]._lang==0x0000) return obj[p];\t\t// Universal\n\tfor(var p in obj) if(obj[p].postScriptName!=null && obj[p]._lang==0x0c0c) return obj[p];\t\t// Canada\n\tfor(var p in obj) if(obj[p].postScriptName!=null) return obj[p];\n\t\n\tvar tname;\n\tfor(var p in obj) { tname=p; break; }\n\tconsole.log(\"returning name table with languageID \"+ obj[tname]._lang);\n\treturn obj[tname];\n};\n\n\nTypr[\"OS/2\"] = {};\nTypr[\"OS/2\"].parse = function(data, offset, length)\n{\n\tvar bin = Typr._bin;\n\tvar ver = bin.readUshort(data, offset); offset += 2;\n\t\n\tvar obj = {};\n\tif     (ver==0) Typr[\"OS/2\"].version0(data, offset, obj);\n\telse if(ver==1) Typr[\"OS/2\"].version1(data, offset, obj);\n\telse if(ver==2 || ver==3 || ver==4) Typr[\"OS/2\"].version2(data, offset, obj);\n\telse if(ver==5) Typr[\"OS/2\"].version5(data, offset, obj);\n\telse throw \"unknown OS/2 table version: \"+ver;\n\t\n\treturn obj;\n};\n\nTypr[\"OS/2\"].version0 = function(data, offset, obj)\n{\n\tvar bin = Typr._bin;\n\tobj.xAvgCharWidth = bin.readShort(data, offset); offset += 2;\n\tobj.usWeightClass = bin.readUshort(data, offset); offset += 2;\n\tobj.usWidthClass  = bin.readUshort(data, offset); offset += 2;\n\tobj.fsType = bin.readUshort(data, offset); offset += 2;\n\tobj.ySubscriptXSize = bin.readShort(data, offset); offset += 2;\n\tobj.ySubscriptYSize = bin.readShort(data, offset); offset += 2;\n\tobj.ySubscriptXOffset = bin.readShort(data, offset); offset += 2;\n\tobj.ySubscriptYOffset = bin.readShort(data, offset); offset += 2; \n\tobj.ySuperscriptXSize = bin.readShort(data, offset); offset += 2; \n\tobj.ySuperscriptYSize = bin.readShort(data, offset); offset += 2; \n\tobj.ySuperscriptXOffset = bin.readShort(data, offset); offset += 2;\n\tobj.ySuperscriptYOffset = bin.readShort(data, offset); offset += 2;\n\tobj.yStrikeoutSize = bin.readShort(data, offset); offset += 2;\n\tobj.yStrikeoutPosition = bin.readShort(data, offset); offset += 2;\n\tobj.sFamilyClass = bin.readShort(data, offset); offset += 2;\n\tobj.panose = bin.readBytes(data, offset, 10);  offset += 10;\n\tobj.ulUnicodeRange1\t= bin.readUint(data, offset);  offset += 4;\n\tobj.ulUnicodeRange2\t= bin.readUint(data, offset);  offset += 4;\n\tobj.ulUnicodeRange3\t= bin.readUint(data, offset);  offset += 4;\n\tobj.ulUnicodeRange4\t= bin.readUint(data, offset);  offset += 4;\n\tobj.achVendID = [bin.readInt8(data, offset), bin.readInt8(data, offset+1),bin.readInt8(data, offset+2),bin.readInt8(data, offset+3)];  offset += 4;\n\tobj.fsSelection\t = bin.readUshort(data, offset); offset += 2;\n\tobj.usFirstCharIndex = bin.readUshort(data, offset); offset += 2;\n\tobj.usLastCharIndex = bin.readUshort(data, offset); offset += 2;\n\tobj.sTypoAscender = bin.readShort(data, offset); offset += 2;\n\tobj.sTypoDescender = bin.readShort(data, offset); offset += 2;\n\tobj.sTypoLineGap = bin.readShort(data, offset); offset += 2;\n\tobj.usWinAscent = bin.readUshort(data, offset); offset += 2;\n\tobj.usWinDescent = bin.readUshort(data, offset); offset += 2;\n\treturn offset;\n};\n\nTypr[\"OS/2\"].version1 = function(data, offset, obj)\n{\n\tvar bin = Typr._bin;\n\toffset = Typr[\"OS/2\"].version0(data, offset, obj);\n\t\n\tobj.ulCodePageRange1 = bin.readUint(data, offset); offset += 4;\n\tobj.ulCodePageRange2 = bin.readUint(data, offset); offset += 4;\n\treturn offset;\n};\n\nTypr[\"OS/2\"].version2 = function(data, offset, obj)\n{\n\tvar bin = Typr._bin;\n\toffset = Typr[\"OS/2\"].version1(data, offset, obj);\n\t\n\tobj.sxHeight = bin.readShort(data, offset); offset += 2;\n\tobj.sCapHeight = bin.readShort(data, offset); offset += 2;\n\tobj.usDefault = bin.readUshort(data, offset); offset += 2;\n\tobj.usBreak = bin.readUshort(data, offset); offset += 2;\n\tobj.usMaxContext = bin.readUshort(data, offset); offset += 2;\n\treturn offset;\n};\n\nTypr[\"OS/2\"].version5 = function(data, offset, obj)\n{\n\tvar bin = Typr._bin;\n\toffset = Typr[\"OS/2\"].version2(data, offset, obj);\n\n\tobj.usLowerOpticalPointSize = bin.readUshort(data, offset); offset += 2;\n\tobj.usUpperOpticalPointSize = bin.readUshort(data, offset); offset += 2;\n\treturn offset;\n};\n\nTypr.post = {};\nTypr.post.parse = function(data, offset, length)\n{\n\tvar bin = Typr._bin;\n\tvar obj = {};\n\t\n\tobj.version           = bin.readFixed(data, offset);  offset+=4;\n\tobj.italicAngle       = bin.readFixed(data, offset);  offset+=4;\n\tobj.underlinePosition = bin.readShort(data, offset);  offset+=2;\n\tobj.underlineThickness = bin.readShort(data, offset);  offset+=2;\n\n\treturn obj;\n};\nTypr.SVG = {};\nTypr.SVG.parse = function(data, offset, length)\n{\n\tvar bin = Typr._bin;\n\tvar obj = { entries: []};\n\n\tvar offset0 = offset;\n\n\tvar tableVersion = bin.readUshort(data, offset);\toffset += 2;\n\tvar svgDocIndexOffset = bin.readUint(data, offset);\toffset += 4;\n\tvar reserved = bin.readUint(data, offset); offset += 4;\n\n\toffset = svgDocIndexOffset + offset0;\n\n\tvar numEntries = bin.readUshort(data, offset);\toffset += 2;\n\n\tfor(var i=0; i<numEntries; i++)\n\t{\n\t\tvar startGlyphID = bin.readUshort(data, offset);  offset += 2;\n\t\tvar endGlyphID   = bin.readUshort(data, offset);  offset += 2;\n\t\tvar svgDocOffset = bin.readUint  (data, offset);  offset += 4;\n\t\tvar svgDocLength = bin.readUint  (data, offset);  offset += 4;\n\n\t\tvar sbuf = new Uint8Array(data.buffer, offset0 + svgDocOffset + svgDocIndexOffset, svgDocLength);\n\t\tvar svg = bin.readUTF8(sbuf, 0, sbuf.length);\n\t\t\n\t\tfor(var f=startGlyphID; f<=endGlyphID; f++) {\n\t\t\tobj.entries[f] = svg;\n\t\t}\n\t}\n\treturn obj;\n};\n\nTypr.SVG.toPath = function(str)\n{\n\tvar pth = {cmds:[], crds:[]};\n\tif(str==null) return pth;\n\t\n\tvar prsr = new DOMParser();\n\tvar doc = prsr[\"parseFromString\"](str,\"image/svg+xml\");\n\t\n\tvar svg = doc.firstChild;  while(svg.tagName!=\"svg\") svg = svg.nextSibling;\n\tvar vb = svg.getAttribute(\"viewBox\");\n\tif(vb) vb = vb.trim().split(\" \").map(parseFloat);  else   vb = [0,0,1000,1000];\n\tTypr.SVG._toPath(svg.children, pth);\n\tfor(var i=0; i<pth.crds.length; i+=2) {\n\t\tvar x = pth.crds[i], y = pth.crds[i+1];\n\t\tx -= vb[0];\n\t\ty -= vb[1];\n\t\ty = -y;\n\t\tpth.crds[i] = x;\n\t\tpth.crds[i+1] = y;\n\t}\n\treturn pth;\n};\n\nTypr.SVG._toPath = function(nds, pth, fill) {\n\tfor(var ni=0; ni<nds.length; ni++) {\n\t\tvar nd = nds[ni], tn = nd.tagName;\n\t\tvar cfl = nd.getAttribute(\"fill\");  if(cfl==null) cfl = fill;\n\t\tif(tn==\"g\") Typr.SVG._toPath(nd.children, pth, cfl);\n\t\telse if(tn==\"path\") {\n\t\t\tpth.cmds.push(cfl?cfl:\"#000000\");\n\t\t\tvar d = nd.getAttribute(\"d\");  //console.log(d);\n\t\t\tvar toks = Typr.SVG._tokens(d);  //console.log(toks);\n\t\t\tTypr.SVG._toksToPath(toks, pth);  pth.cmds.push(\"X\");\n\t\t}\n\t\telse if(tn==\"defs\") ;\n\t\telse console.log(tn, nd);\n\t}\n};\n\nTypr.SVG._tokens = function(d) {\n\tvar ts = [], off = 0, rn=false, cn=\"\";  // reading number, current number\n\twhile(off<d.length){\n\t\tvar cc=d.charCodeAt(off), ch = d.charAt(off);  off++;\n\t\tvar isNum = (48<=cc && cc<=57) || ch==\".\" || ch==\"-\";\n\t\t\n\t\tif(rn) {\n\t\t\tif(ch==\"-\") {  ts.push(parseFloat(cn));  cn=ch;  }\n\t\t\telse if(isNum) cn+=ch;\n\t\t\telse {  ts.push(parseFloat(cn));  if(ch!=\",\" && ch!=\" \") ts.push(ch);  rn=false;  }\n\t\t}\n\t\telse {\n\t\t\tif(isNum) {  cn=ch;  rn=true;  }\n\t\t\telse if(ch!=\",\" && ch!=\" \") ts.push(ch);\n\t\t}\n\t}\n\tif(rn) ts.push(parseFloat(cn));\n\treturn ts;\n};\n\nTypr.SVG._toksToPath = function(ts, pth) {\t\n\tvar i = 0, x = 0, y = 0, ox = 0, oy = 0;\n\tvar pc = {\"M\":2,\"L\":2,\"H\":1,\"V\":1,   \"S\":4,   \"C\":6};\n\tvar cmds = pth.cmds, crds = pth.crds;\n\t\n\twhile(i<ts.length) {\n\t\tvar cmd = ts[i];  i++;\n\t\t\n\t\tif(cmd==\"z\") {  cmds.push(\"Z\");  x=ox;  y=oy;  }\n\t\telse {\n\t\t\tvar cmu = cmd.toUpperCase();\n\t\t\tvar ps = pc[cmu], reps = Typr.SVG._reps(ts, i, ps);\n\t\t\n\t\t\tfor(var j=0; j<reps; j++) {\n\t\t\t\tvar xi = 0, yi = 0;   if(cmd!=cmu) {  xi=x;  yi=y;  }\n\t\t\t\t\n\t\t\t\tif(cmu==\"M\") {  x = xi+ts[i++];  y = yi+ts[i++];  cmds.push(\"M\");  crds.push(x,y);  ox=x;  oy=y; }\n\t\t\t\telse if(cmu==\"L\") {  x = xi+ts[i++];  y = yi+ts[i++];  cmds.push(\"L\");  crds.push(x,y);  }\n\t\t\t\telse if(cmu==\"H\") {  x = xi+ts[i++];                   cmds.push(\"L\");  crds.push(x,y);  }\n\t\t\t\telse if(cmu==\"V\") {  y = yi+ts[i++];                   cmds.push(\"L\");  crds.push(x,y);  }\n\t\t\t\telse if(cmu==\"C\") {\n\t\t\t\t\tvar x1=xi+ts[i++], y1=yi+ts[i++], x2=xi+ts[i++], y2=yi+ts[i++], x3=xi+ts[i++], y3=yi+ts[i++];\n\t\t\t\t\tcmds.push(\"C\");  crds.push(x1,y1,x2,y2,x3,y3);  x=x3;  y=y3;\n\t\t\t\t}\n\t\t\t\telse if(cmu==\"S\") {\n\t\t\t\t\tvar co = Math.max(crds.length-4, 0);\n\t\t\t\t\tvar x1 = x+x-crds[co], y1 = y+y-crds[co+1];\n\t\t\t\t\tvar x2=xi+ts[i++], y2=yi+ts[i++], x3=xi+ts[i++], y3=yi+ts[i++];  \n\t\t\t\t\tcmds.push(\"C\");  crds.push(x1,y1,x2,y2,x3,y3);  x=x3;  y=y3;\n\t\t\t\t}\n\t\t\t\telse console.log(\"Unknown SVG command \"+cmd);\n\t\t\t}\n\t\t}\n\t}\n};\nTypr.SVG._reps = function(ts, off, ps) {\n\tvar i = off;\n\twhile(i<ts.length) {  if((typeof ts[i]) == \"string\") break;  i+=ps;  }\n\treturn (i-off)/ps;\n};\n// End Typr.js\n\n// Begin Typr.U.js\n\nif(Typr  ==null) Typr   = {};\nif(Typr.U==null) Typr.U = {};\n\n\nTypr.U.codeToGlyph = function(font, code)\n{\n\tvar cmap = font.cmap;\n\t\n\tvar tind = -1;\n\tif(cmap.p0e4!=null) tind = cmap.p0e4;\n\telse if(cmap.p3e1!=null) tind = cmap.p3e1;\n\telse if(cmap.p1e0!=null) tind = cmap.p1e0;\n\telse if(cmap.p0e3!=null) tind = cmap.p0e3;\n\t\n\tif(tind==-1) throw \"no familiar platform and encoding!\";\n\t\n\tvar tab = cmap.tables[tind];\n\t\n\tif(tab.format==0)\n\t{\n\t\tif(code>=tab.map.length) return 0;\n\t\treturn tab.map[code];\n\t}\n\telse if(tab.format==4)\n\t{\n\t\tvar sind = -1;\n\t\tfor(var i=0; i<tab.endCount.length; i++)   if(code<=tab.endCount[i]){  sind=i;  break;  } \n\t\tif(sind==-1) return 0;\n\t\tif(tab.startCount[sind]>code) return 0;\n\t\t\n\t\tvar gli = 0;\n\t\tif(tab.idRangeOffset[sind]!=0) gli = tab.glyphIdArray[(code-tab.startCount[sind]) + (tab.idRangeOffset[sind]>>1) - (tab.idRangeOffset.length-sind)];\n\t\telse                           gli = code + tab.idDelta[sind];\n\t\treturn gli & 0xFFFF;\n\t}\n\telse if(tab.format==12)\n\t{\n\t\tif(code>tab.groups[tab.groups.length-1][1]) return 0;\n\t\tfor(var i=0; i<tab.groups.length; i++)\n\t\t{\n\t\t\tvar grp = tab.groups[i];\n\t\t\tif(grp[0]<=code && code<=grp[1]) return grp[2] + (code-grp[0]);\n\t\t}\n\t\treturn 0;\n\t}\n\telse throw \"unknown cmap table format \"+tab.format;\n};\n\n\nTypr.U.glyphToPath = function(font, gid)\n{\n\tvar path = { cmds:[], crds:[] };\n\tif(font.SVG && font.SVG.entries[gid]) {\n\t\tvar p = font.SVG.entries[gid];  if(p==null) return path;\n\t\tif(typeof p == \"string\") {  p = Typr.SVG.toPath(p);  font.SVG.entries[gid]=p;  }\n\t\treturn p;\n\t}\n\telse if(font.CFF) {\n\t\tvar state = {x:0,y:0,stack:[],nStems:0,haveWidth:false,width: font.CFF.Private ? font.CFF.Private.defaultWidthX : 0,open:false};\n\t\tvar cff=font.CFF, pdct = font.CFF.Private;\n\t\tif(cff.ROS) {\n\t\t\tvar gi = 0;\n\t\t\twhile(cff.FDSelect[gi+2]<=gid) gi+=2;\n\t\t\tpdct = cff.FDArray[cff.FDSelect[gi+1]].Private;\n\t\t}\n\t\tTypr.U._drawCFF(font.CFF.CharStrings[gid], state, cff, pdct, path);\n\t}\n\telse if(font.glyf) {  Typr.U._drawGlyf(gid, font, path);  }\n\treturn path;\n};\n\nTypr.U._drawGlyf = function(gid, font, path)\n{\n\tvar gl = font.glyf[gid];\n\tif(gl==null) gl = font.glyf[gid] = Typr.glyf._parseGlyf(font, gid);\n\tif(gl!=null){\n\t\tif(gl.noc>-1) Typr.U._simpleGlyph(gl, path);\n\t\telse          Typr.U._compoGlyph (gl, font, path);\n\t}\n};\nTypr.U._simpleGlyph = function(gl, p)\n{\n\tfor(var c=0; c<gl.noc; c++)\n\t{\n\t\tvar i0 = (c==0) ? 0 : (gl.endPts[c-1] + 1);\n\t\tvar il = gl.endPts[c];\n\t\t\n\t\tfor(var i=i0; i<=il; i++)\n\t\t{\n\t\t\tvar pr = (i==i0)?il:(i-1);\n\t\t\tvar nx = (i==il)?i0:(i+1);\n\t\t\tvar onCurve = gl.flags[i]&1;\n\t\t\tvar prOnCurve = gl.flags[pr]&1;\n\t\t\tvar nxOnCurve = gl.flags[nx]&1;\n\t\t\t\n\t\t\tvar x = gl.xs[i], y = gl.ys[i];\n\t\t\t\n\t\t\tif(i==i0) { \n\t\t\t\tif(onCurve)  \n\t\t\t\t{\n\t\t\t\t\tif(prOnCurve) Typr.U.P.moveTo(p, gl.xs[pr], gl.ys[pr]); \n\t\t\t\t\telse          {  Typr.U.P.moveTo(p,x,y);  continue;  /*  will do curveTo at il  */  }\n\t\t\t\t}\n\t\t\t\telse        \n\t\t\t\t{\n\t\t\t\t\tif(prOnCurve) Typr.U.P.moveTo(p,  gl.xs[pr],       gl.ys[pr]        );\n\t\t\t\t\telse          Typr.U.P.moveTo(p, (gl.xs[pr]+x)/2, (gl.ys[pr]+y)/2   ); \n\t\t\t\t}\n\t\t\t}\n\t\t\tif(onCurve)\n\t\t\t{\n\t\t\t\tif(prOnCurve) Typr.U.P.lineTo(p,x,y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(nxOnCurve) Typr.U.P.qcurveTo(p, x, y, gl.xs[nx], gl.ys[nx]); \n\t\t\t\telse          Typr.U.P.qcurveTo(p, x, y, (x+gl.xs[nx])/2, (y+gl.ys[nx])/2); \n\t\t\t}\n\t\t}\n\t\tTypr.U.P.closePath(p);\n\t}\n};\nTypr.U._compoGlyph = function(gl, font, p)\n{\n\tfor(var j=0; j<gl.parts.length; j++)\n\t{\n\t\tvar path = { cmds:[], crds:[] };\n\t\tvar prt = gl.parts[j];\n\t\tTypr.U._drawGlyf(prt.glyphIndex, font, path);\n\t\t\n\t\tvar m = prt.m;\n\t\tfor(var i=0; i<path.crds.length; i+=2)\n\t\t{\n\t\t\tvar x = path.crds[i  ], y = path.crds[i+1];\n\t\t\tp.crds.push(x*m.a + y*m.b + m.tx);\n\t\t\tp.crds.push(x*m.c + y*m.d + m.ty);\n\t\t}\n\t\tfor(var i=0; i<path.cmds.length; i++) p.cmds.push(path.cmds[i]);\n\t}\n};\n\n\nTypr.U._getGlyphClass = function(g, cd)\n{\n\tvar intr = Typr._lctf.getInterval(cd, g);\n\treturn intr==-1 ? 0 : cd[intr+2];\n\t//for(var i=0; i<cd.start.length; i++) \n\t//\tif(cd.start[i]<=g && cd.end[i]>=g) return cd.class[i];\n\t//return 0;\n};\n\nTypr.U.getPairAdjustment = function(font, g1, g2)\n{\n\t//return 0;\n\tif(font.GPOS) {\n\t\tvar gpos = font[\"GPOS\"];\n\t\tvar llist = gpos.lookupList, flist = gpos.featureList;\n\t\tvar tused = [];\n\t\tfor(var i=0; i<flist.length; i++) \n\t\t{\n\t\t\tvar fl = flist[i];  //console.log(fl);\n\t\t\tif(fl.tag!=\"kern\") continue;\n\t\t\tfor(var ti=0; ti<fl.tab.length; ti++) {\n\t\t\t\tif(tused[fl.tab[ti]]) continue;  tused[fl.tab[ti]] = true;\n\t\t\t\tvar tab = llist[fl.tab[ti]];\n\t\t\t\t//console.log(tab);\n\t\t\t\t\n\t\t\t\tfor(var j=0; j<tab.tabs.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif(tab.tabs[i]==null) continue;\n\t\t\t\t\tvar ltab = tab.tabs[j], ind;\n\t\t\t\t\tif(ltab.coverage) {  ind = Typr._lctf.coverageIndex(ltab.coverage, g1);  if(ind==-1) continue;  }\n\t\t\t\t\t\n\t\t\t\t\tif(tab.ltype==1) ;\n\t\t\t\t\telse if(tab.ltype==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar adj;\n\t\t\t\t\t\tif(ltab.fmt==1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar right = ltab.pairsets[ind];\n\t\t\t\t\t\t\tfor(var i=0; i<right.length; i++) if(right[i].gid2==g2) adj = right[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(ltab.fmt==2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar c1 = Typr.U._getGlyphClass(g1, ltab.classDef1);\n\t\t\t\t\t\t\tvar c2 = Typr.U._getGlyphClass(g2, ltab.classDef2);\n\t\t\t\t\t\t\tadj = ltab.matrix[c1][c2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if(adj) console.log(ltab, adj);\n\t\t\t\t\t\tif(adj && adj.val2) return adj.val2[2];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(font.kern)\n\t{\n\t\tvar ind1 = font.kern.glyph1.indexOf(g1);\n\t\tif(ind1!=-1)\n\t\t{\n\t\t\tvar ind2 = font.kern.rval[ind1].glyph2.indexOf(g2);\n\t\t\tif(ind2!=-1) return font.kern.rval[ind1].vals[ind2];\n\t\t}\n\t}\n\t\n\treturn 0;\n};\n\nTypr.U.stringToGlyphs = function(font, str)\n{\n\tvar gls = [];\n\tfor(var i=0; i<str.length; i++) {\n\t\tvar cc = str.codePointAt(i);  if(cc>0xffff) i++;\n\t\tgls.push(Typr.U.codeToGlyph(font, cc));\n\t}\n\tfor(var i=0; i<str.length; i++) {\n\t\tvar cc = str.codePointAt(i);  //\n\t\tif(cc==2367) {  var t=gls[i-1];  gls[i-1]=gls[i];  gls[i]=t;  }\n\t\t//if(cc==2381) {  var t=gls[i+1];  gls[i+1]=gls[i];  gls[i]=t;  }\n\t\tif(cc>0xffff) i++;\n\t}\n\t//console.log(gls.slice(0));\n\t\n\t//console.log(gls);  return gls;\n\t\n\tvar gsub = font[\"GSUB\"];  if(gsub==null) return gls;\n\tvar llist = gsub.lookupList, flist = gsub.featureList;\n\t\n\tvar cligs = [\"rlig\", \"liga\", \"mset\",  \"isol\",\"init\",\"fina\",\"medi\",   \"half\", \"pres\", \n\t\t\t\t\"blws\" /* Tibetan fonts like Himalaya.ttf */ ];\n\t\n\t//console.log(gls.slice(0));\n\tvar tused = [];\n\tfor(var fi=0; fi<flist.length; fi++)\n\t{\n\t\tvar fl = flist[fi];  if(cligs.indexOf(fl.tag)==-1) continue;\n\t\t//if(fl.tag==\"blwf\") continue;\n\t\t//console.log(fl);\n\t\t//console.log(fl.tag);\n\t\tfor(var ti=0; ti<fl.tab.length; ti++) {\n\t\t\tif(tused[fl.tab[ti]]) continue;  tused[fl.tab[ti]] = true;\n\t\t\tvar tab = llist[fl.tab[ti]];\n\t\t\t//console.log(fl.tab[ti], tab.ltype);\n\t\t\t//console.log(fl.tag, tab);\n\t\t\tfor(var ci=0; ci<gls.length; ci++) {\n\t\t\t\tvar feat = Typr.U._getWPfeature(str, ci);\n\t\t\t\tif(\"isol,init,fina,medi\".indexOf(fl.tag)!=-1 && fl.tag!=feat) continue;\n\t\t\t\t\n\t\t\t\tTypr.U._applySubs(gls, ci, tab, llist);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn gls;\n};\nTypr.U._getWPfeature = function(str, ci) {  // get Word Position feature\n\tvar wsep = \"\\n\\t\\\" ,.:;!?()  ،\";\n\tvar R = \"آأؤإاةدذرزوٱٲٳٵٶٷڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙۀۃۄۅۆۇۈۉۊۋۍۏےۓەۮۯܐܕܖܗܘܙܞܨܪܬܯݍݙݚݛݫݬݱݳݴݸݹࡀࡆࡇࡉࡔࡧࡩࡪࢪࢫࢬࢮࢱࢲࢹૅેૉ૊૎૏ૐ૑૒૝ૡ૤૯஁ஃ஄அஉ஌எஏ஑னப஫஬\";\n\tvar L = \"ꡲ્૗\";\n\t\n\tvar slft = ci==0            || wsep.indexOf(str[ci-1])!=-1;\n\tvar srgt = ci==str.length-1 || wsep.indexOf(str[ci+1])!=-1;\n\t\t\n\tif(!slft && R.indexOf(str[ci-1])!=-1) slft=true;\n\tif(!srgt && R.indexOf(str[ci  ])!=-1) srgt=true;\n\t\t\n\tif(!srgt && L.indexOf(str[ci+1])!=-1) srgt=true;\n\tif(!slft && L.indexOf(str[ci  ])!=-1) slft=true;\n\t\t\n\tvar feat = null;\n\tif(slft) feat = srgt ? \"isol\" : \"init\";\n\telse     feat = srgt ? \"fina\" : \"medi\";\n\t\n\treturn feat;\n};\nTypr.U._applySubs = function(gls, ci, tab, llist) {\n\tvar rlim = gls.length-ci-1;\n\t//if(ci==0) console.log(\"++++ \", tab.ltype);\n\tfor(var j=0; j<tab.tabs.length; j++)\n\t{\n\t\tif(tab.tabs[j]==null) continue;\n\t\tvar ltab = tab.tabs[j], ind;\n\t\tif(ltab.coverage) {  ind = Typr._lctf.coverageIndex(ltab.coverage, gls[ci]);  if(ind==-1) continue;  }\n\t\t//if(ci==0) console.log(ind, ltab);\n\t\t//*\n\t\tif(tab.ltype==1) {\n\t\t\tvar gl = gls[ci];\n\t\t\tif(ltab.fmt==1) gls[ci] = gls[ci]+ltab.delta;\n\t\t\telse            gls[ci] = ltab.newg[ind];\n\t\t\t//console.log(\"applying ... 1\", ci, gl, gls[ci]);\n\t\t}//*\n\t\telse if(tab.ltype==4) {\n\t\t\tvar vals = ltab.vals[ind];\n\t\t\t\n\t\t\tfor(var k=0; k<vals.length; k++) {\n\t\t\t\tvar lig = vals[k], rl = lig.chain.length;  if(rl>rlim) continue;\n\t\t\t\tvar good = true, em1 = 0;\n\t\t\t\tfor(var l=0; l<rl; l++) {  while(gls[ci+em1+(1+l)]==-1)em1++;  if(lig.chain[l]!=gls[ci+em1+(1+l)]) good=false;  }\n\t\t\t\tif(!good) continue;\n\t\t\t\tgls[ci]=lig.nglyph;\n\t\t\t\tfor(var l=0; l<rl+em1; l++) gls[ci+l+1]=-1;   break;  // first character changed, other ligatures do not apply anymore\n\t\t\t\t//console.log(\"lig\", ci, lig.chain, lig.nglyph);\n\t\t\t\t//console.log(\"applying ...\");\n\t\t\t}\n\t\t}\n\t\telse  if(tab.ltype==5 && ltab.fmt==2) {\n\t\t\tvar cind = Typr._lctf.getInterval(ltab.cDef, gls[ci]);\n\t\t\tvar cls = ltab.cDef[cind+2], scs = ltab.scset[cls]; \n\t\t\tfor(var i=0; i<scs.length; i++) {\n\t\t\t\tvar sc = scs[i], inp = sc.input;\n\t\t\t\tif(inp.length>rlim) continue;\n\t\t\t\tvar good = true;\n\t\t\t\tfor(var l=0; l<inp.length; l++) {\n\t\t\t\t\tvar cind2 = Typr._lctf.getInterval(ltab.cDef, gls[ci+1+l]);\n\t\t\t\t\tif(cind==-1 && ltab.cDef[cind2+2]!=inp[l]) {  good=false;  break;  }\n\t\t\t\t}\n\t\t\t\tif(!good) continue;\n\t\t\t\t//console.log(ci, gl);\n\t\t\t\tvar lrs = sc.substLookupRecords;\n\t\t\t\tfor(var k=0; k<lrs.length; k+=2)\n\t\t\t\t{\n\t\t\t\t\tvar gi = lrs[k], tabi = lrs[k+1];\n\t\t\t\t\t//Typr.U._applyType1(gls, ci+gi, llist[tabi]);\n\t\t\t\t\t//console.log(tabi, gls[ci+gi], llist[tabi]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(tab.ltype==6 && ltab.fmt==3) {\n\t\t\t//if(ltab.backCvg.length==0) return;\n\t\t\tif(!Typr.U._glsCovered(gls, ltab.backCvg, ci-ltab.backCvg.length)) continue;\n\t\t\tif(!Typr.U._glsCovered(gls, ltab.inptCvg, ci)) continue;\n\t\t\tif(!Typr.U._glsCovered(gls, ltab.ahedCvg, ci+ltab.inptCvg.length)) continue;\n\t\t\t//console.log(ci, ltab);\n\t\t\tvar lr = ltab.lookupRec;  //console.log(ci, gl, lr);\n\t\t\tfor(var i=0; i<lr.length; i+=2) {\n\t\t\t\tvar cind = lr[i], tab2 = llist[lr[i+1]];\n\t\t\t\t//console.log(\"-\", lr[i+1], tab2);\n\t\t\t\tTypr.U._applySubs(gls, ci+cind, tab2, llist);\n\t\t\t}\n\t\t}\n\t\t//else console.log(\"Unknown table\", tab.ltype, ltab.fmt);\n\t\t//*/\n\t}\n};\n\nTypr.U._glsCovered = function(gls, cvgs, ci) {\n\tfor(var i=0; i<cvgs.length; i++) {\n\t\tvar ind = Typr._lctf.coverageIndex(cvgs[i], gls[ci+i]);  if(ind==-1) return false;\n\t}\n\treturn true;\n};\n\nTypr.U.glyphsToPath = function(font, gls, clr)\n{\t\n\t//gls = gls.reverse();//gls.slice(0,12).concat(gls.slice(12).reverse());\n\t\n\tvar tpath = {cmds:[], crds:[]};\n\tvar x = 0;\n\t\n\tfor(var i=0; i<gls.length; i++)\n\t{\n\t\tvar gid = gls[i];  if(gid==-1) continue;\n\t\tvar gid2 = (i<gls.length-1 && gls[i+1]!=-1)  ? gls[i+1] : 0;\n\t\tvar path = Typr.U.glyphToPath(font, gid);\n\t\tfor(var j=0; j<path.crds.length; j+=2)\n\t\t{\n\t\t\ttpath.crds.push(path.crds[j] + x);\n\t\t\ttpath.crds.push(path.crds[j+1]);\n\t\t}\n\t\tif(clr) tpath.cmds.push(clr);\n\t\tfor(var j=0; j<path.cmds.length; j++) tpath.cmds.push(path.cmds[j]);\n\t\tif(clr) tpath.cmds.push(\"X\");\n\t\tx += font.hmtx.aWidth[gid];// - font.hmtx.lsBearing[gid];\n\t\tif(i<gls.length-1) x += Typr.U.getPairAdjustment(font, gid, gid2);\n\t}\n\treturn tpath;\n};\n\nTypr.U.pathToSVG = function(path, prec)\n{\n\tif(prec==null) prec = 5;\n\tvar out = [], co = 0, lmap = {\"M\":2,\"L\":2,\"Q\":4,\"C\":6};\n\tfor(var i=0; i<path.cmds.length; i++)\n\t{\n\t\tvar cmd = path.cmds[i], cn = co+(lmap[cmd]?lmap[cmd]:0);  \n\t\tout.push(cmd);\n\t\twhile(co<cn) {  var c = path.crds[co++];  out.push(parseFloat(c.toFixed(prec))+(co==cn?\"\":\" \"));  }\n\t}\n\treturn out.join(\"\");\n};\n\nTypr.U.pathToContext = function(path, ctx)\n{\n\tvar c = 0, crds = path.crds;\n\t\n\tfor(var j=0; j<path.cmds.length; j++)\n\t{\n\t\tvar cmd = path.cmds[j];\n\t\tif     (cmd==\"M\") {\n\t\t\tctx.moveTo(crds[c], crds[c+1]);\n\t\t\tc+=2;\n\t\t}\n\t\telse if(cmd==\"L\") {\n\t\t\tctx.lineTo(crds[c], crds[c+1]);\n\t\t\tc+=2;\n\t\t}\n\t\telse if(cmd==\"C\") {\n\t\t\tctx.bezierCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3], crds[c+4], crds[c+5]);\n\t\t\tc+=6;\n\t\t}\n\t\telse if(cmd==\"Q\") {\n\t\t\tctx.quadraticCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3]);\n\t\t\tc+=4;\n\t\t}\n\t\telse if(cmd.charAt(0)==\"#\") {\n\t\t\tctx.beginPath();\n\t\t\tctx.fillStyle = cmd;\n\t\t}\n\t\telse if(cmd==\"Z\") {\n\t\t\tctx.closePath();\n\t\t}\n\t\telse if(cmd==\"X\") {\n\t\t\tctx.fill();\n\t\t}\n\t}\n};\n\n\nTypr.U.P = {};\nTypr.U.P.moveTo = function(p, x, y)\n{\n\tp.cmds.push(\"M\");  p.crds.push(x,y);\n};\nTypr.U.P.lineTo = function(p, x, y)\n{\n\tp.cmds.push(\"L\");  p.crds.push(x,y);\n};\nTypr.U.P.curveTo = function(p, a,b,c,d,e,f)\n{\n\tp.cmds.push(\"C\");  p.crds.push(a,b,c,d,e,f);\n};\nTypr.U.P.qcurveTo = function(p, a,b,c,d)\n{\n\tp.cmds.push(\"Q\");  p.crds.push(a,b,c,d);\n};\nTypr.U.P.closePath = function(p) {  p.cmds.push(\"Z\");  };\n\n\n\n\nTypr.U._drawCFF = function(cmds, state, font, pdct, p)\n{\n\tvar stack = state.stack;\n\tvar nStems = state.nStems, haveWidth=state.haveWidth, width=state.width, open=state.open;\n\tvar i=0;\n\tvar x=state.x, y=state.y, c1x=0, c1y=0, c2x=0, c2y=0, c3x=0, c3y=0, c4x=0, c4y=0, jpx=0, jpy=0;\n\t\n\tvar o = {val:0,size:0};\n\t//console.log(cmds);\n\twhile(i<cmds.length)\n\t{\n\t\tTypr.CFF.getCharString(cmds, i, o);\n\t\tvar v = o.val;\n\t\ti += o.size;\n\t\t\t\n\t\tif(v==\"o1\" || v==\"o18\")  //  hstem || hstemhm\n\t\t{\n\t\t\tvar hasWidthArg;\n\n\t\t\t// The number of stem operators on the stack is always even.\n\t\t\t// If the value is uneven, that means a width is specified.\n\t\t\thasWidthArg = stack.length % 2 !== 0;\n\t\t\tif (hasWidthArg && !haveWidth) {\n\t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\n\t\t\t}\n\n\t\t\tnStems += stack.length >> 1;\n\t\t\tstack.length = 0;\n\t\t\thaveWidth = true;\n\t\t}\n\t\telse if(v==\"o3\" || v==\"o23\")  // vstem || vstemhm\n\t\t{\n\t\t\tvar hasWidthArg;\n\n\t\t\t// The number of stem operators on the stack is always even.\n\t\t\t// If the value is uneven, that means a width is specified.\n\t\t\thasWidthArg = stack.length % 2 !== 0;\n\t\t\tif (hasWidthArg && !haveWidth) {\n\t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\n\t\t\t}\n\n\t\t\tnStems += stack.length >> 1;\n\t\t\tstack.length = 0;\n\t\t\thaveWidth = true;\n\t\t}\n\t\telse if(v==\"o4\")\n\t\t{\n\t\t\tif (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + pdct.nominalWidthX;\n                        haveWidth = true;\n                    }\n\t\t\tif(open) Typr.U.P.closePath(p);\n\n                    y += stack.pop();\n\t\t\t\t\tTypr.U.P.moveTo(p,x,y);   open=true;\n\t\t}\n\t\telse if(v==\"o5\")\n\t\t{\n\t\t\twhile (stack.length > 0) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        Typr.U.P.lineTo(p, x, y);\n                    }\n\t\t}\n\t\telse if(v==\"o6\" || v==\"o7\")  // hlineto || vlineto\n\t\t{\n\t\t\tvar count = stack.length;\n\t\t\tvar isX = (v == \"o6\");\n\t\t\t\n\t\t\tfor(var j=0; j<count; j++) {\n\t\t\t\tvar sval = stack.shift();\n\t\t\t\t\n\t\t\t\tif(isX) x += sval;  else  y += sval;\n\t\t\t\tisX = !isX;\n\t\t\t\tTypr.U.P.lineTo(p, x, y);\n\t\t\t}\n\t\t}\n\t\telse if(v==\"o8\" || v==\"o24\")\t// rrcurveto || rcurveline\n\t\t{\n\t\t\tvar count = stack.length;\n\t\t\tvar index = 0;\n\t\t\twhile(index+6 <= count) {\n\t\t\t\tc1x = x + stack.shift();\n\t\t\t\tc1y = y + stack.shift();\n\t\t\t\tc2x = c1x + stack.shift();\n\t\t\t\tc2y = c1y + stack.shift();\n\t\t\t\tx = c2x + stack.shift();\n\t\t\t\ty = c2y + stack.shift();\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n\t\t\t\tindex+=6;\n\t\t\t}\n\t\t\tif(v==\"o24\")\n\t\t\t{\n\t\t\t\tx += stack.shift();\n\t\t\t\ty += stack.shift();\n\t\t\t\tTypr.U.P.lineTo(p, x, y);\n\t\t\t}\n\t\t}\n\t\telse if(v==\"o11\")  break;\n\t\telse if(v==\"o1234\" || v==\"o1235\" || v==\"o1236\" || v==\"o1237\")//if((v+\"\").slice(0,3)==\"o12\")\n\t\t{\n\t\t\tif(v==\"o1234\")\n\t\t\t{\n\t\t\t\tc1x = x   + stack.shift();    // dx1\n                c1y = y;                      // dy1\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\n\t\t\t\tjpy = c2y;                    // dy3\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\n\t\t\t\tc3y = c2y;                    // dy4\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\n\t\t\t\tc4y = y;                      // dy5\n\t\t\t\tx = c4x + stack.shift();      // dx6\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n\t\t\t\t\n\t\t\t}\n\t\t\tif(v==\"o1235\")\n\t\t\t{\n\t\t\t\tc1x = x   + stack.shift();    // dx1\n\t\t\t\tc1y = y   + stack.shift();    // dy1\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\n\t\t\t\tjpy = c2y + stack.shift();    // dy3\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\n\t\t\t\tc3y = jpy + stack.shift();    // dy4\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\n\t\t\t\tc4y = c3y + stack.shift();    // dy5\n\t\t\t\tx = c4x + stack.shift();      // dx6\n\t\t\t\ty = c4y + stack.shift();      // dy6\n\t\t\t\tstack.shift();                // flex depth\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n\t\t\t}\n\t\t\tif(v==\"o1236\")\n\t\t\t{\n\t\t\t\tc1x = x   + stack.shift();    // dx1\n\t\t\t\tc1y = y   + stack.shift();    // dy1\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\n\t\t\t\tjpy = c2y;                    // dy3\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\n\t\t\t\tc3y = c2y;                    // dy4\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\n\t\t\t\tc4y = c3y + stack.shift();    // dy5\n\t\t\t\tx = c4x + stack.shift();      // dx6\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n\t\t\t}\n\t\t\tif(v==\"o1237\")\n\t\t\t{\n\t\t\t\tc1x = x   + stack.shift();    // dx1\n\t\t\t\tc1y = y   + stack.shift();    // dy1\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\n\t\t\t\tjpy = c2y + stack.shift();    // dy3\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\n\t\t\t\tc3y = jpy + stack.shift();    // dy4\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\n\t\t\t\tc4y = c3y + stack.shift();    // dy5\n\t\t\t\tif (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n\t\t\t\t    x = c4x + stack.shift();\n\t\t\t\t} else {\n\t\t\t\t    y = c4y + stack.shift();\n\t\t\t\t}\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n\t\t\t}\n\t\t}\n\t\telse if(v==\"o14\")\n\t\t{\n\t\t\tif (stack.length > 0 && !haveWidth) {\n                        width = stack.shift() + font.nominalWidthX;\n                        haveWidth = true;\n                    }\n\t\t\tif(stack.length==4) // seac = standard encoding accented character\n\t\t\t{\n\t\t\t\tvar adx = stack.shift();\n\t\t\t\tvar ady = stack.shift();\n\t\t\t\tvar bchar = stack.shift();\n\t\t\t\tvar achar = stack.shift();\n\t\t\t\n\t\t\t\t\n\t\t\t\tvar bind = Typr.CFF.glyphBySE(font, bchar);\n\t\t\t\tvar aind = Typr.CFF.glyphBySE(font, achar);\n\t\t\t\t\n\t\t\t\t//console.log(bchar, bind);\n\t\t\t\t//console.log(achar, aind);\n\t\t\t\t//state.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n\t\t\t\t\n\t\t\t\tTypr.U._drawCFF(font.CharStrings[bind], state,font,pdct,p);\n\t\t\t\tstate.x = adx; state.y = ady;\n\t\t\t\tTypr.U._drawCFF(font.CharStrings[aind], state,font,pdct,p);\n\t\t\t\t\n\t\t\t\t//x=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n\t\t\t}\n\t\t\tif(open) {  Typr.U.P.closePath(p);  open=false;  }\n\t\t}\t\t\n\t\telse if(v==\"o19\" || v==\"o20\") \n\t\t{ \n\t\t\tvar hasWidthArg;\n\n\t\t\t// The number of stem operators on the stack is always even.\n\t\t\t// If the value is uneven, that means a width is specified.\n\t\t\thasWidthArg = stack.length % 2 !== 0;\n\t\t\tif (hasWidthArg && !haveWidth) {\n\t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\n\t\t\t}\n\n\t\t\tnStems += stack.length >> 1;\n\t\t\tstack.length = 0;\n\t\t\thaveWidth = true;\n\t\t\t\n\t\t\ti += (nStems + 7) >> 3;\n\t\t}\n\t\t\n\t\telse if(v==\"o21\") {\n\t\t\tif (stack.length > 2 && !haveWidth) {\n                        width = stack.shift() + pdct.nominalWidthX;\n                        haveWidth = true;\n                    }\n\n                    y += stack.pop();\n                    x += stack.pop();\n\t\t\t\t\t\n\t\t\t\t\tif(open) Typr.U.P.closePath(p);\n                    Typr.U.P.moveTo(p,x,y);   open=true;\n\t\t}\n\t\telse if(v==\"o22\")\n\t\t{\n\t\t\t if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + pdct.nominalWidthX;\n                        haveWidth = true;\n                    }\n\t\t\t\t\t\n                    x += stack.pop();\n\t\t\t\t\t\n\t\t\t\t\tif(open) Typr.U.P.closePath(p);\n\t\t\t\t\tTypr.U.P.moveTo(p,x,y);   open=true;                    \n\t\t}\n\t\telse if(v==\"o25\")\n\t\t{\n\t\t\twhile (stack.length > 6) {\n                        x += stack.shift();\n                        y += stack.shift();\n                        Typr.U.P.lineTo(p, x, y);\n                    }\n\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n\t\t}\n\t\telse if(v==\"o26\") \n\t\t{\n\t\t\tif (stack.length % 2) {\n                        x += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x;\n                        y = c2y + stack.shift();\n                        Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n                    }\n\n\t\t}\n\t\telse if(v==\"o27\")\n\t\t{\n\t\t\tif (stack.length % 2) {\n                        y += stack.shift();\n                    }\n\n                    while (stack.length > 0) {\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y;\n                        Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n                    }\n\t\t}\n\t\telse if(v==\"o10\" || v==\"o29\")\t// callsubr || callgsubr\n\t\t{\n\t\t\tvar obj = (v==\"o10\" ? pdct : font);\n\t\t\tif(stack.length==0) { console.log(\"error: empty stack\");  }\n\t\t\telse {\n\t\t\t\tvar ind = stack.pop();\n\t\t\t\tvar subr = obj.Subrs[ ind + obj.Bias ];\n\t\t\t\tstate.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n\t\t\t\tTypr.U._drawCFF(subr, state,font,pdct,p);\n\t\t\t\tx=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n\t\t\t}\n\t\t}\n\t\telse if(v==\"o30\" || v==\"o31\")   // vhcurveto || hvcurveto\n\t\t{\n\t\t\tvar count, count1 = stack.length;\n\t\t\tvar index = 0;\n\t\t\tvar alternate = v == \"o31\";\n\t\t\t\n\t\t\tcount  = count1 & ~2;\n\t\t\tindex += count1 - count;\n\t\t\t\n\t\t\twhile ( index < count ) \n\t\t\t{\n\t\t\t\tif(alternate)\n\t\t\t\t{\n\t\t\t\t\tc1x = x + stack.shift();\n\t\t\t\t\tc1y = y;\n\t\t\t\t\tc2x = c1x + stack.shift();\n\t\t\t\t\tc2y = c1y + stack.shift();\n\t\t\t\t\ty = c2y + stack.shift();\n\t\t\t\t\tif(count-index == 5) {  x = c2x + stack.shift();  index++;  }\n\t\t\t\t\telse x = c2x;\n\t\t\t\t\talternate = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc1x = x;\n\t\t\t\t\tc1y = y + stack.shift();\n\t\t\t\t\tc2x = c1x + stack.shift();\n\t\t\t\t\tc2y = c1y + stack.shift();\n\t\t\t\t\tx = c2x + stack.shift();\n\t\t\t\t\tif(count-index == 5) {  y = c2y + stack.shift();  index++;  }\n\t\t\t\t\telse y = c2y;\n\t\t\t\t\talternate = true;\n\t\t\t\t}\n                Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n\t\t\t\tindex += 4;\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if((v+\"\").charAt(0)==\"o\") {   console.log(\"Unknown operation: \"+v, cmds); throw v;  }\n\t\telse stack.push(v);\n\t}\n\t//console.log(cmds);\n\tstate.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width; state.open=open;\n};\n\n// End Typr.U.js\n\nreturn Typr\n\n}\n\n// Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with tiny-inflate \n// (https://github.com/foliojs/tiny-inflate) for use in troika-3d-text. \n// Original licenses apply: \n// - tiny-inflate: https://github.com/foliojs/tiny-inflate/blob/master/LICENSE (MIT)\n// - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)\n\nfunction woff2otfFactory() {\n\n// Begin tinyInflate\nconst tinyInflate = (function() {\n  const module = {};\n  var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n\n  return module.exports\n})();\n// End tinyInflate\n\n// Begin woff2otf.js\n/*\n Copyright 2012, Steffen Hanikel (https://github.com/hanikesn)\n Modified by Artemy Tregubenko, 2014 (https://github.com/arty-name/woff2otf)\n Modified by Jason Johnston, 2019 (pako --> tiny-inflate)\n \n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n A tool to convert a WOFF back to a TTF/OTF font file, in pure Javascript\n*/\n\nfunction convert_streams(bufferIn, tinyInflate) {\n    var dataViewIn = new DataView(bufferIn);\n    var offsetIn = 0;\n\n    function read2() {\n        var uint16 = dataViewIn.getUint16(offsetIn);\n        offsetIn += 2;\n        return uint16;\n    }\n\n    function read4() {\n        var uint32 = dataViewIn.getUint32(offsetIn);\n        offsetIn += 4;\n        return uint32;\n    }\n\n    function write2(uint16) {\n        dataViewOut.setUint16(offsetOut, uint16);\n        offsetOut += 2;\n    }\n\n    function write4(uint32) {\n        dataViewOut.setUint32(offsetOut, uint32);\n        offsetOut += 4;\n    }\n\n    var WOFFHeader = {\n        signature: read4(),\n        flavor: read4(),\n        length: read4(),\n        numTables: read2(),\n        reserved: read2(),\n        totalSfntSize: read4(),\n        majorVersion: read2(),\n        minorVersion: read2(),\n        metaOffset: read4(),\n        metaLength: read4(),\n        metaOrigLength: read4(),\n        privOffset: read4(),\n        privLength: read4()\n    };\n\n    var entrySelector = 0;\n    while (Math.pow(2, entrySelector) <= WOFFHeader.numTables) {\n        entrySelector++;\n    }\n    entrySelector--;\n\n    var searchRange = Math.pow(2, entrySelector) * 16;\n    var rangeShift = WOFFHeader.numTables * 16 - searchRange;\n\n    var offset = 4 + 2 + 2 + 2 + 2;\n    var TableDirectoryEntries = [];\n    for (var i = 0; i < WOFFHeader.numTables; i++) {\n        TableDirectoryEntries.push({\n            tag: read4(),\n            offset: read4(),\n            compLength: read4(),\n            origLength: read4(),\n            origChecksum: read4()\n        });\n        offset += 4 * 4;\n    }\n\n    var arrayOut = new Uint8Array(\n        4 + 2 + 2 + 2 + 2 +\n        TableDirectoryEntries.length * (4 + 4 + 4 + 4) +\n        TableDirectoryEntries.reduce(function(acc, entry) { return acc + entry.origLength + 4; }, 0)\n    );\n    var bufferOut = arrayOut.buffer;\n    var dataViewOut = new DataView(bufferOut);\n    var offsetOut = 0;\n\n    write4(WOFFHeader.flavor);\n    write2(WOFFHeader.numTables);\n    write2(searchRange);\n    write2(entrySelector);\n    write2(rangeShift);\n\n    TableDirectoryEntries.forEach(function(TableDirectoryEntry) {\n        write4(TableDirectoryEntry.tag);\n        write4(TableDirectoryEntry.origChecksum);\n        write4(offset);\n        write4(TableDirectoryEntry.origLength);\n\n        TableDirectoryEntry.outOffset = offset;\n        offset += TableDirectoryEntry.origLength;\n        if ((offset % 4) != 0) {\n            offset += 4 - (offset % 4);\n        }\n    });\n\n    var size;\n\n    TableDirectoryEntries.forEach(function(TableDirectoryEntry) {\n        var compressedData = bufferIn.slice(\n            TableDirectoryEntry.offset,\n            TableDirectoryEntry.offset + TableDirectoryEntry.compLength\n        );\n\n        if (TableDirectoryEntry.compLength != TableDirectoryEntry.origLength) {\n            var uncompressedData = new Uint8Array(TableDirectoryEntry.origLength);\n            tinyInflate(\n              new Uint8Array(compressedData, 2), //skip deflate header\n              uncompressedData\n            );\n        } else {\n            uncompressedData = new Uint8Array(compressedData);\n        }\n\n        arrayOut.set(uncompressedData, TableDirectoryEntry.outOffset);\n        offset = TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength;\n\n        var padding = 0;\n        if ((offset % 4) != 0) {\n            padding = 4 - (offset % 4);\n        }\n        arrayOut.set(\n            new Uint8Array(padding).buffer,\n            TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength\n        );\n\n        size = offset + padding;\n    });\n\n    return bufferOut.slice(0, size);\n}\n\n// End woff2otf.js\n\nreturn function(buffer) {\n  return convert_streams(buffer, tinyInflate)\n}\n\n}\n\n/**\n * An adapter that allows Typr.js to be used as if it were (a subset of) the OpenType.js API.\n * Also adds support for WOFF files (not WOFF2).\n */\n\nfunction parserFactory(Typr, woff2otf) {\n  const cmdArgLengths = {\n    M: 2,\n    L: 2,\n    Q: 4,\n    C: 6,\n    Z: 0\n  };\n\n  function wrapFontObj(typrFont) {\n    const glyphMap = Object.create(null);\n\n    const fontObj = {\n      unitsPerEm: typrFont.head.unitsPerEm,\n      ascender: typrFont.hhea.ascender,\n      descender: typrFont.hhea.descender,\n      forEachGlyph(text, fontSize, letterSpacing, callback) {\n        let glyphX = 0;\n        const fontScale = 1 / fontObj.unitsPerEm * fontSize;\n\n        const glyphIndices = Typr.U.stringToGlyphs(typrFont, text);\n        let charIndex = 0;\n        glyphIndices.forEach(glyphIndex => {\n          // Typr returns a glyph index per string codepoint, with -1s in place of those that\n          // were omitted due to ligature substitution. So we can track original index in the\n          // string via simple increment, and skip everything else when seeing a -1.\n          if (glyphIndex !== -1) {\n            let glyphObj = glyphMap[glyphIndex];\n            if (!glyphObj) {\n              const {cmds, crds} = Typr.U.glyphToPath(typrFont, glyphIndex);\n\n              // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn't\n              // normalize the two, so it's simplest just to iterate ourselves.\n              let xMin, yMin, xMax, yMax;\n              if (crds.length) {\n                xMin = yMin = Infinity;\n                xMax = yMax = -Infinity;\n                for (let i = 0, len = crds.length; i < len; i += 2) {\n                  let x = crds[i];\n                  let y = crds[i + 1];\n                  if (x < xMin) xMin = x;\n                  if (y < yMin) yMin = y;\n                  if (x > xMax) xMax = x;\n                  if (y > yMax) yMax = y;\n                }\n              } else {\n                xMin = xMax = yMin = yMax = 0;\n              }\n\n              glyphObj = glyphMap[glyphIndex] = {\n                index: glyphIndex,\n                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],\n                xMin,\n                yMin,\n                xMax,\n                yMax,\n                pathCommandCount: cmds.length,\n                forEachPathCommand(callback) {\n                  let argsIndex = 0;\n                  const argsArray = [];\n                  for (let i = 0, len = cmds.length; i < len; i++) {\n                    const numArgs = cmdArgLengths[cmds[i]];\n                    argsArray.length = 1 + numArgs;\n                    argsArray[0] = cmds[i];\n                    for (let j = 1; j <= numArgs; j++) {\n                      argsArray[j] = crds[argsIndex++];\n                    }\n                    callback.apply(null, argsArray);\n                  }\n                }\n              };\n            }\n\n            callback.call(null, glyphObj, glyphX, charIndex);\n\n            if (glyphObj.advanceWidth) {\n              glyphX += glyphObj.advanceWidth * fontScale;\n            }\n            if (letterSpacing) {\n              glyphX += letterSpacing * fontSize;\n            }\n          }\n          charIndex += (text.codePointAt(charIndex) > 0xffff ? 2 : 1);\n        });\n        return glyphX\n      }\n    };\n\n    return fontObj\n  }\n\n  return function parse(buffer) {\n    // Look to see if we have a WOFF file and convert it if so:\n    const peek = new Uint8Array(buffer, 0, 4);\n    const tag = Typr._bin.readASCII(peek, 0, 4);\n    if (tag === 'wOFF') {\n      buffer = woff2otf(buffer);\n    } else if (tag === 'wOF2') {\n      throw new Error('woff2 fonts not supported')\n    }\n    return wrapFontObj(Typr.parse(buffer)[0])\n  }\n}\n\n\nconst workerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'Typr Font Parser',\n  dependencies: [typrFactory, woff2otfFactory, parserFactory],\n  init(typrFactory, woff2otfFactory, parserFactory) {\n    const Typr = typrFactory();\n    const woff2otf = woff2otfFactory();\n    return parserFactory(Typr, woff2otf)\n  }\n});\n\n//import fontParser from './FontParser_OpenType.js'\n\n\nconst CONFIG = {\n  defaultFontURL: 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff', //Roboto Regular\n  sdfGlyphSize: 64,\n  sdfMargin: 1 / 16,\n  sdfExponent: 9,\n  textureWidth: 2048\n};\nconst tempColor = /*#__PURE__*/new Color();\nlet hasRequested = false;\n\n/**\n * Customizes the text builder configuration. This must be called prior to the first font processing\n * request, and applies to all fonts.\n *\n * @param {String} config.defaultFontURL - The URL of the default font to use for text processing\n *                 requests, in case none is specified or the specifiede font fails to load or parse.\n *                 Defaults to \"Roboto Regular\" from Google Fonts.\n * @param {Number} config.sdfGlyphSize - The default size of each glyph's SDF (signed distance field)\n *                 texture used for rendering. Must be a power-of-two number, and applies to all fonts,\n *                 but note that this can also be overridden per call to `getTextRenderInfo()`.\n *                 Larger sizes can improve the quality of glyph rendering by increasing the sharpness\n *                 of corners and preventing loss of very thin lines, at the expense of memory. Defaults\n *                 to 64 which is generally a good balance of size and quality.\n * @param {Number} config.sdfExponent - The exponent used when encoding the SDF values. A higher exponent\n *                 shifts the encoded 8-bit values to achieve higher precision/accuracy at texels nearer\n *                 the glyph's path, with lower precision further away. Defaults to 9.\n * @param {Number} config.sdfMargin - How much space to reserve in the SDF as margin outside the glyph's\n *                 path, as a percentage of the SDF width. A larger margin increases the quality of\n *                 extruded glyph outlines, but decreases the precision available for the glyph itself.\n *                 Defaults to 1/16th of the glyph size.\n * @param {Number} config.textureWidth - The width of the SDF texture; must be a power of 2. Defaults to\n *                 2048 which is a safe maximum texture dimension according to the stats at\n *                 https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE and should allow for a\n *                 reasonably large number of glyphs (default glyph size of 64 and safe texture size of\n *                 2048^2 allows for 1024 glyphs.) This can be increased if you need to increase the\n *                 glyph size and/or have an extraordinary number of glyphs.\n */\nfunction configureTextBuilder(config) {\n  if (hasRequested) {\n    console.warn('configureTextBuilder called after first font request; will be ignored.');\n  } else {\n    assign(CONFIG, config);\n  }\n}\n\n/**\n * Repository for all font SDF atlas textures\n *\n *   {\n *     [font]: {\n *       sdfTexture: DataTexture\n *     }\n *   }\n */\nconst atlases = Object.create(null);\n\n/**\n * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.\n * @property {object} parameters - The normalized input arguments to the render call.\n * @property {DataTexture} sdfTexture - The SDF atlas texture.\n * @property {number} sdfGlyphSize - The size of each glyph's SDF; see `configureTextBuilder`.\n * @property {number} sdfExponent - The exponent used in encoding the SDF's values; see `configureTextBuilder`.\n * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.\n * @property {Float32Array} glyphAtlasIndices - List holding each glyph's index in the SDF atlas.\n * @property {Uint8Array} [glyphColors] - List holding each glyph's [r, g, b] color, if `colorRanges` was supplied.\n * @property {Float32Array} [caretPositions] - A list of caret positions for all glyphs; this is\n *           the bottom [x,y] of the cursor position before each char, plus one after the last char.\n * @property {number} [caretHeight] - An appropriate height for all selection carets.\n * @property {number} ascender - The font's ascender metric.\n * @property {number} descender - The font's descender metric.\n * @property {number} lineHeight - The final computed lineHeight measurement.\n * @property {number} topBaseline - The y position of the top line's baseline.\n * @property {Array<number>} blockBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\n *           this can include extra vertical space beyond the visible glyphs due to lineHeight, and is\n *           equivalent to the dimensions of a block-level text element in CSS.\n * @property {Array<number>} visibleBounds -\n * @property {Array<number>} totalBounds - DEPRECATED; use blockBounds instead.\n * @property {Array<number>} totalBlockSize - DEPRECATED; use blockBounds instead\n * @property {Array<number>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,\n *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.\n * @property {object} timings - Timing info for various parts of the rendering logic including SDF\n *           generation, layout, etc.\n * @frozen\n */\n\n/**\n * @callback getTextRenderInfo~callback\n * @param {TroikaTextRenderInfo} textRenderInfo\n */\n\n/**\n * Main entry point for requesting the data needed to render a text string with given font parameters.\n * This is an asynchronous call, performing most of the logic in a web worker thread.\n * @param {object} args\n * @param {getTextRenderInfo~callback} callback\n */\nfunction getTextRenderInfo(args, callback) {\n  hasRequested = true;\n  args = assign({}, args);\n\n  // Apply default font here to avoid a 'null' atlas, and convert relative\n  // URLs to absolute so they can be resolved in the worker\n  args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);\n\n  // Normalize text to a string\n  args.text = '' + args.text;\n\n  args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;\n\n  // Normalize colors\n  if (args.colorRanges != null) {\n    let colors = {};\n    for (let key in args.colorRanges) {\n      if (args.colorRanges.hasOwnProperty(key)) {\n        let val = args.colorRanges[key];\n        if (typeof val !== 'number') {\n          val = tempColor.set(val).getHex();\n        }\n        colors[key] = val;\n      }\n    }\n    args.colorRanges = colors;\n  }\n\n  Object.freeze(args);\n\n  // Init the atlas for this font if needed\n  const {textureWidth, sdfExponent} = CONFIG;\n  const {sdfGlyphSize} = args;\n  let atlasKey = `${args.font}@${sdfGlyphSize}`;\n  let atlas = atlases[atlasKey];\n  if (!atlas) {\n    atlas = atlases[atlasKey] = {\n      sdfTexture: new DataTexture(\n        new Uint8Array(sdfGlyphSize * textureWidth),\n        textureWidth,\n        sdfGlyphSize,\n        LuminanceFormat,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        LinearFilter,\n        LinearFilter\n      )\n    };\n    atlas.sdfTexture.font = args.font;\n  }\n\n  // Issue request to the FontProcessor in the worker\n  processInWorker(args).then(result => {\n    // If the response has newGlyphs, copy them into the atlas texture at the specified indices\n    if (result.newGlyphSDFs) {\n      result.newGlyphSDFs.forEach(({textureData, atlasIndex}) => {\n        const texImg = atlas.sdfTexture.image;\n\n        // Grow the texture by power of 2 if needed\n        while (texImg.data.length < (atlasIndex + 1) * sdfGlyphSize * sdfGlyphSize) {\n          const biggerArray = new Uint8Array(texImg.data.length * 2);\n          biggerArray.set(texImg.data);\n          texImg.data = biggerArray;\n          texImg.height *= 2;\n        }\n\n        // Insert the new glyph's data into the full texture image at the correct offsets\n        const cols = texImg.width / sdfGlyphSize;\n        const baseStartIndex = texImg.width * sdfGlyphSize * Math.floor(atlasIndex / cols) //full rows\n          + (atlasIndex % cols) * sdfGlyphSize; //partial row\n        for (let y = 0; y < sdfGlyphSize; y++) {\n          const srcStartIndex = y * sdfGlyphSize;\n          const rowStartIndex = baseStartIndex + (y * texImg.width);\n          for (let x = 0; x < sdfGlyphSize; x++) {\n            texImg.data[rowStartIndex + x] = textureData[srcStartIndex + x];\n          }\n        }\n      });\n      atlas.sdfTexture.needsUpdate = true;\n    }\n\n    // Invoke callback with the text layout arrays and updated texture\n    callback(Object.freeze({\n      parameters: args,\n      sdfTexture: atlas.sdfTexture,\n      sdfGlyphSize,\n      sdfExponent,\n      glyphBounds: result.glyphBounds,\n      glyphAtlasIndices: result.glyphAtlasIndices,\n      glyphColors: result.glyphColors,\n      caretPositions: result.caretPositions,\n      caretHeight: result.caretHeight,\n      chunkedBounds: result.chunkedBounds,\n      ascender: result.ascender,\n      descender: result.descender,\n      lineHeight: result.lineHeight,\n      topBaseline: result.topBaseline,\n      blockBounds: result.blockBounds,\n      visibleBounds: result.visibleBounds,\n      timings: result.timings,\n      get totalBounds() {\n        console.log('totalBounds deprecated, use blockBounds instead');\n        return result.blockBounds\n      },\n      get totalBlockSize() {\n        console.log('totalBlockSize deprecated, use blockBounds instead');\n        const [x0, y0, x1, y1] = result.blockBounds;\n        return [x1 - x0, y1 - y0]\n      }\n    }));\n  });\n}\n\n\n/**\n * Preload a given font and optionally pre-generate glyph SDFs for one or more character sequences.\n * This can be useful to avoid long pauses when first showing text in a scene, by preloading the\n * needed fonts and glyphs up front along with other assets.\n *\n * @param {object} options\n * @param {string} options.font - URL of the font file to preload. If not given, the default font will\n *        be loaded.\n * @param {string|string[]} options.characters - One or more character sequences for which to pre-\n *        generate glyph SDFs. Note that this will honor ligature substitution, so you may need\n *        to specify ligature sequences in addition to their individual characters to get all\n *        possible glyphs, e.g. `[\"t\", \"h\", \"th\"]` to get the \"t\" and \"h\" glyphs plus the \"th\" ligature.\n * @param {number} options.sdfGlyphSize - The size at which to prerender the SDF textures for the\n *        specified `characters`.\n * @param {function} callback - A function that will be called when the preloading is complete.\n */\nfunction preloadFont({font, characters, sdfGlyphSize}, callback) {\n  let text = Array.isArray(characters) ? characters.join('\\n') : '' + characters;\n  getTextRenderInfo({ font, sdfGlyphSize, text }, callback);\n}\n\n\n// Local assign impl so we don't have to import troika-core\nfunction assign(toObj, fromObj) {\n  for (let key in fromObj) {\n    if (fromObj.hasOwnProperty(key)) {\n      toObj[key] = fromObj[key];\n    }\n  }\n  return toObj\n}\n\n// Utility for making URLs absolute\nlet linkEl;\nfunction toAbsoluteURL(path) {\n  if (!linkEl) {\n    linkEl = typeof document === 'undefined' ? {} : document.createElement('a');\n  }\n  linkEl.href = path;\n  return linkEl.href\n}\n\n\nconst fontProcessorWorkerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'FontProcessor',\n  dependencies: [\n    CONFIG,\n    workerModule,\n    createGlyphSegmentsIndex,\n    createSDFGenerator,\n    createFontProcessor\n  ],\n  init(config, fontParser, createGlyphSegmentsIndex, createSDFGenerator, createFontProcessor) {\n    const {sdfExponent, sdfMargin, defaultFontURL} = config;\n    const sdfGenerator = createSDFGenerator(createGlyphSegmentsIndex, { sdfExponent, sdfMargin });\n    return createFontProcessor(fontParser, sdfGenerator, { defaultFontURL })\n  }\n});\n\nconst processInWorker = /*#__PURE__*/defineWorkerModule({\n  name: 'TextBuilder',\n  dependencies: [fontProcessorWorkerModule, ThenableWorkerModule],\n  init(fontProcessor, Thenable) {\n    return function(args) {\n      const thenable = new Thenable();\n      fontProcessor.process(args, thenable.resolve);\n      return thenable\n    }\n  },\n  getTransferables(result) {\n    // Mark array buffers as transferable to avoid cloning during postMessage\n    const transferables = [\n      result.glyphBounds.buffer,\n      result.glyphAtlasIndices.buffer\n    ];\n    if (result.caretPositions) {\n      transferables.push(result.caretPositions.buffer);\n    }\n    if (result.newGlyphSDFs) {\n      result.newGlyphSDFs.forEach(d => {\n        transferables.push(d.textureData.buffer);\n      });\n    }\n    return transferables\n  }\n});\n\nconst GlyphsGeometry = /*#__PURE__*/(() => {\n\n  const templateGeometries = {};\n  function getTemplateGeometry(detail) {\n    let geom = templateGeometries[detail];\n    if (!geom) {\n      geom = templateGeometries[detail] = new PlaneBufferGeometry(1, 1, detail, detail).translate(0.5, 0.5, 0);\n    }\n    return geom\n  }\n  const tempVec3 = new Vector3();\n\n  const glyphBoundsAttrName = 'aTroikaGlyphBounds';\n  const glyphIndexAttrName = 'aTroikaGlyphIndex';\n  const glyphColorAttrName = 'aTroikaGlyphColor';\n\n  /**\n  @class GlyphsGeometry\n\n  A specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to\n  render the glyphs using GPU instancing of a single quad, rather than constructing a whole\n  geometry with vertices, for much smaller attribute arraybuffers according to this math:\n\n    Where N = number of glyphs...\n\n    Instanced:\n    - position: 4 * 3\n    - index: 2 * 3\n    - normal: 4 * 3\n    - uv: 4 * 2\n    - glyph x/y bounds: N * 4\n    - glyph indices: N * 1\n    = 5N + 38\n\n    Non-instanced:\n    - position: N * 4 * 3\n    - index: N * 2 * 3\n    - normal: N * 4 * 3\n    - uv: N * 4 * 2\n    - glyph indices: N * 1\n    = 39N\n\n  A downside of this is the rare-but-possible lack of the instanced arrays extension,\n  which we could potentially work around with a fallback non-instanced implementation.\n\n  */\n  class GlyphsGeometry extends InstancedBufferGeometry {\n    constructor() {\n      super();\n\n      this.detail = 1;\n\n      // Define groups for rendering text outline as a separate pass; these will only\n      // be used when the `material` getter returns an array, i.e. outlineWidth > 0.\n      this.groups = [\n        {start: 0, count: Infinity, materialIndex: 0},\n        {start: 0, count: Infinity, materialIndex: 1}\n      ];\n\n      // Preallocate zero-radius bounding sphere\n      this.boundingSphere = new Sphere();\n      this.boundingBox = new Box3();\n    }\n\n    computeBoundingSphere () {\n      // No-op; we'll sync the boundingSphere proactively in `updateGlyphs`.\n    }\n\n    computeBoundingBox() {\n      // No-op; we'll sync the boundingBox proactively in `updateGlyphs`.\n    }\n\n    set detail(detail) {\n      if (detail !== this._detail) {\n        this._detail = detail;\n        if (typeof detail !== 'number' || detail < 1) {\n          detail = 1;\n        }\n        let tpl = getTemplateGeometry(detail)\n        ;['position', 'normal', 'uv'].forEach(attr => {\n          this.attributes[attr] = tpl.attributes[attr].clone();\n        });\n        this.setIndex(tpl.getIndex().clone());\n      }\n    }\n    get detail() {\n      return this._detail\n    }\n\n    /**\n     * Update the geometry for a new set of glyphs.\n     * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs\n     *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1\n     * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within\n     *        the SDF atlas texture.\n     * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs\n     * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N\n     *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be\n     *        used with `applyClipRect` to choose an optimized `instanceCount`.\n     * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.\n     */\n    updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {\n      // Update the instance attributes\n      updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);\n      updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);\n      updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);\n      this._chunkedBounds = chunkedBounds;\n      setInstanceCount(this, glyphAtlasIndices.length);\n\n      // Update the boundingSphere based on the total bounds\n      const sphere = this.boundingSphere;\n      sphere.center.set(\n        (blockBounds[0] + blockBounds[2]) / 2,\n        (blockBounds[1] + blockBounds[3]) / 2,\n        0\n      );\n      sphere.radius = sphere.center.distanceTo(tempVec3.set(blockBounds[0], blockBounds[1], 0));\n\n      // Update the boundingBox based on the total bounds\n      const box = this.boundingBox;\n      box.min.set(blockBounds[0], blockBounds[1], 0);\n      box.max.set(blockBounds[2], blockBounds[3], 0);\n    }\n\n    /**\n     * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest\n     * `instanceCount` that will show all glyphs within the clipped view. This is an optimization\n     * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would\n     * be clipped anyway.\n     *\n     * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting\n     * offset, this optimization becomes less effective as the clipRect moves closer to the end of the\n     * text block. We could fix that by switching from instancing to a full geometry with a drawRange,\n     * but at the expense of much larger attribute buffers (see classdoc above.)\n     *\n     * @param {Vector4} clipRect\n     */\n    applyClipRect(clipRect) {\n      let count = this.getAttribute(glyphIndexAttrName).count;\n      let chunks = this._chunkedBounds;\n      if (chunks) {\n        for (let i = chunks.length; i--;) {\n          count = chunks[i].end;\n          let rect = chunks[i].rect;\n          // note: both rects are l-b-r-t\n          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {\n            break\n          }\n        }\n      }\n      setInstanceCount(this, count);\n    }\n  }\n\n  // Compat for pre r109:\n  if (!GlyphsGeometry.prototype.setAttribute) {\n    GlyphsGeometry.prototype.setAttribute = function(name, attribute) {\n      this.attributes[ name ] = attribute;\n      return this\n    };\n  }\n\n\n  function updateBufferAttr(geom, attrName, newArray, itemSize) {\n    const attr = geom.getAttribute(attrName);\n    if (newArray) {\n      // If length isn't changing, just update the attribute's array data\n      if (attr && attr.array.length === newArray.length) {\n        attr.array.set(newArray);\n        attr.needsUpdate = true;\n      } else {\n        geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize));\n        // If the new attribute has a different size, we also have to (as of r117) manually clear the\n        // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706\n        // It's unclear if this is a threejs bug or a truly unsupported scenario; discussion in\n        // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a\n        // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly\n        // implies it should be supported. It's possible we need to\n        delete geom._maxInstanceCount; //for r117+, could be fragile\n        geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I'd like\n      }\n    } else if (attr) {\n      geom.deleteAttribute(attrName);\n    }\n  }\n\n  // Handle maxInstancedCount -> instanceCount rename that happened in three r117\n  function setInstanceCount(geom, count) {\n    geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount'] = count;\n  }\n\n  return GlyphsGeometry\n})();\n\n// language=GLSL\nconst VERTEX_DEFS = `\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform vec4 uTroikaTotalBounds;\nuniform vec4 uTroikaClipRect;\nuniform mat3 uTroikaOrient;\nuniform bool uTroikaUseGlyphColors;\nuniform float uTroikaDistanceOffset;\nattribute vec4 aTroikaGlyphBounds;\nattribute float aTroikaGlyphIndex;\nattribute vec3 aTroikaGlyphColor;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying vec3 vTroikaGlyphColor;\nvarying vec2 vTroikaGlyphDimensions;\n`;\n\n// language=GLSL prefix=\"void main() {\" suffix=\"}\"\nconst VERTEX_TRANSFORM = `\nvec4 bounds = aTroikaGlyphBounds;\nvec4 outlineBounds = vec4(bounds.xy - uTroikaDistanceOffset, bounds.zw + uTroikaDistanceOffset);\nvec4 clippedBounds = vec4(\n  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\n  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\n);\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\n\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\n\nuv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);\n\nposition = uTroikaOrient * position;\nnormal = uTroikaOrient * normal;\n\nvTroikaGlyphUV = clippedXY.xy;\nvTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);\n\n${''/* NOTE: it seems important to calculate the glyph's bounding texture UVs here in the\n  vertex shader, rather than in the fragment shader, as the latter gives strange artifacts\n  on some glyphs (those in the leftmost texture column) on some systems. The exact reason\n  isn't understood but doing this here, then mix()-ing in the fragment shader, seems to work. */}\nfloat txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\nvec2 txUvPerGlyph = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\nvec2 txStartUV = txUvPerGlyph * vec2(\n  mod(aTroikaGlyphIndex, txCols),\n  floor(aTroikaGlyphIndex / txCols)\n);\nvTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerGlyph);\n`;\n\n// language=GLSL\nconst FRAGMENT_DEFS = `\nuniform sampler2D uTroikaSDFTexture;\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform float uTroikaSDFExponent;\nuniform float uTroikaDistanceOffset;\nuniform bool uTroikaSDFDebug;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying vec2 vTroikaGlyphDimensions;\n\nfloat troikaSdfValueToSignedDistance(float alpha) {\n  // Inverse of encoding in SDFGenerator.js\n  ${''/* TODO - there's some slight inaccuracy here when dealing with interpolated alpha values; those\n    are linearly interpolated where the encoding is exponential. Look into improving this by rounding\n    to nearest 2 whole texels, decoding those exponential values, and linearly interpolating the result.\n  */}\n  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);\n  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;\n  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);\n  return signedDist;\n}\n\nfloat troikaGlyphUvToSdfValue(vec2 glyphUV) {\n  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);\n  return texture2D(uTroikaSDFTexture, textureUV).r;\n}\n\nfloat troikaGlyphUvToDistance(vec2 uv) {\n  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));\n}\n\nfloat troikaGetTextAlpha(float distanceOffset) {\n  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);\n  float distance = troikaGlyphUvToDistance(clampedGlyphUV);\n    \n  // Extrapolate distance when outside bounds:\n  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : \n    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n\n  ${''/* \n  // TODO more refined extrapolated distance by adjusting for angle of gradient at edge...\n  // This has potential but currently gives very jagged extensions, maybe due to precision issues?\n  float uvStep = 1.0 / uTroikaSDFGlyphSize;\n  vec2 neighbor1UV = clampedGlyphUV + (\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * sign(0.5 - vTroikaGlyphUV.y)) :\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * sign(0.5 - vTroikaGlyphUV.x), 0.0) :\n    vec2(0.0)\n  );\n  vec2 neighbor2UV = clampedGlyphUV + (\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * -sign(0.5 - vTroikaGlyphUV.y)) :\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * -sign(0.5 - vTroikaGlyphUV.x), 0.0) :\n    vec2(0.0)\n  );\n  float neighbor1Distance = troikaGlyphUvToDistance(neighbor1UV);\n  float neighbor2Distance = troikaGlyphUvToDistance(neighbor2UV);\n  float distToUnclamped = length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n  float distToNeighbor = length((clampedGlyphUV - neighbor1UV) * vTroikaGlyphDimensions);\n  float gradientAngle1 = min(asin(abs(neighbor1Distance - distance) / distToNeighbor), PI / 2.0);\n  float gradientAngle2 = min(asin(abs(neighbor2Distance - distance) / distToNeighbor), PI / 2.0);\n  distance += (cos(gradientAngle1) + cos(gradientAngle2)) / 2.0 * distToUnclamped;\n  */}\n  \n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\n  float alpha = step(-distanceOffset, -distance);\n  #else\n  ${''/*\n    When the standard derivatives extension is available, we choose an antialiasing alpha threshold based\n    on the potential change in the SDF's alpha from this fragment to its neighbor. This strategy maximizes \n    readability and edge crispness at all sizes and screen resolutions.\n  */}\n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\n  float aaDist = length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;\n  #else\n  float aaDist = vTroikaGlyphDimensions.x / 64.0;\n  #endif\n  \n  float alpha = smoothstep(\n    distanceOffset + aaDist,\n    distanceOffset - aaDist,\n    distance\n  );\n  #endif\n  \n  return alpha;\n}\n`;\n\n// language=GLSL prefix=\"void main() {\" suffix=\"}\"\nconst FRAGMENT_TRANSFORM = `\nfloat alpha = uTroikaSDFDebug ?\n  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :\n  troikaGetTextAlpha(uTroikaDistanceOffset);\n\n#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)\ngl_FragColor.a *= alpha;\n#endif\n  \nif (alpha == 0.0) {\n  discard;\n}\n`;\n\n\n/**\n * Create a material for rendering text, derived from a baseMaterial\n */\nfunction createTextDerivedMaterial(baseMaterial) {\n  const textMaterial = createDerivedMaterial(baseMaterial, {\n    chained: true,\n    extensions: {\n      derivatives: true\n    },\n    uniforms: {\n      uTroikaSDFTexture: {value: null},\n      uTroikaSDFTextureSize: {value: new Vector2()},\n      uTroikaSDFGlyphSize: {value: 0},\n      uTroikaSDFExponent: {value: 0},\n      uTroikaTotalBounds: {value: new Vector4(0,0,0,0)},\n      uTroikaClipRect: {value: new Vector4(0,0,0,0)},\n      uTroikaDistanceOffset: {value: 0},\n      uTroikaOrient: {value: new Matrix3()},\n      uTroikaUseGlyphColors: {value: true},\n      uTroikaSDFDebug: {value: false}\n    },\n    vertexDefs: VERTEX_DEFS,\n    vertexTransform: VERTEX_TRANSFORM,\n    fragmentDefs: FRAGMENT_DEFS,\n    fragmentColorTransform: FRAGMENT_TRANSFORM,\n    customRewriter({vertexShader, fragmentShader}) {\n      let uDiffuseRE = /\\buniform\\s+vec3\\s+diffuse\\b/;\n      if (uDiffuseRE.test(fragmentShader)) {\n        // Replace all instances of `diffuse` with our varying\n        fragmentShader = fragmentShader\n          .replace(uDiffuseRE, 'varying vec3 vTroikaGlyphColor')\n          .replace(/\\bdiffuse\\b/g, 'vTroikaGlyphColor');\n        // Make sure the vertex shader declares the uniform so we can grab it as a fallback\n        if (!uDiffuseRE.test(vertexShader)) {\n          vertexShader = vertexShader.replace(\n            voidMainRegExp,\n            'uniform vec3 diffuse;\\n$&\\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\\n'\n          );\n        }\n      }\n      return { vertexShader, fragmentShader }\n    }\n  });\n\n  // Force transparency - TODO is this reasonable?\n  textMaterial.transparent = true;\n\n  Object.defineProperties(textMaterial, {\n    isTroikaTextMaterial: {value: true},\n\n    // WebGLShadowMap reverses the side of the shadow material by default, which fails\n    // for planes, so here we force the `shadowSide` to always match the main side.\n    shadowSide: {\n      get() {\n        return this.side\n      },\n      set() {\n        //no-op\n      }\n    }\n  });\n\n  return textMaterial\n}\n\nconst Text = /*#__PURE__*/(() => {\n\n  const defaultMaterial = new MeshBasicMaterial({\n    color: 0xffffff,\n    side: DoubleSide,\n    transparent: true\n  });\n\n  const tempMat4 = new Matrix4();\n  const tempVec3a = new Vector3();\n  const tempVec3b = new Vector3();\n  const tempArray = [];\n  const origin = new Vector3();\n  const defaultOrient = '+x+y';\n\n  function first(o) {\n    return Array.isArray(o) ? o[0] : o\n  }\n\n  const raycastMesh = new Mesh(\n    new PlaneBufferGeometry(1, 1).translate(0.5, 0.5, 0),\n    defaultMaterial\n  );\n\n  const syncStartEvent = {type: 'syncstart'};\n  const syncCompleteEvent = {type: 'synccomplete'};\n\n  const SYNCABLE_PROPS = [\n    'font',\n    'fontSize',\n    'letterSpacing',\n    'lineHeight',\n    'maxWidth',\n    'overflowWrap',\n    'text',\n    'textAlign',\n    'textIndent',\n    'whiteSpace',\n    'anchorX',\n    'anchorY',\n    'colorRanges',\n    'sdfGlyphSize'\n  ];\n\n  const COPYABLE_PROPS = SYNCABLE_PROPS.concat(\n    'material',\n    'color',\n    'depthOffset',\n    'clipRect',\n    'orientation',\n    'glyphGeometryDetail'\n  );\n\n\n\n  /**\n   * @class Text\n   *\n   * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\n   * fields (SDF).\n   */\n  class Text extends Mesh {\n    constructor() {\n      const geometry = new GlyphsGeometry();\n      super(geometry, null);\n\n      // === Text layout properties: === //\n\n      /**\n       * @member {string} text\n       * The string of text to be rendered.\n       */\n      this.text = '';\n\n      /**\n       * @deprecated Use `anchorX` and `anchorY` instead\n       * @member {Array<number>} anchor\n       * Defines where in the text block should correspond to the mesh's local position, as a set\n       * of horizontal and vertical percentages from 0 to 1. A value of `[0, 0]` (the default)\n       * anchors at the top-left, `[1, 1]` at the bottom-right, and `[0.5, 0.5]` centers the\n       * block at the mesh's position.\n       */\n      //this.anchor = null\n\n      /**\n       * @member {number|string} anchorX\n       * Defines the horizontal position in the text block that should line up with the local origin.\n       * Can be specified as a numeric x position in local units, a string percentage of the total\n       * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',\n       * or 'right'.\n       */\n      this.anchorX = 0;\n\n      /**\n       * @member {number|string} anchorX\n       * Defines the vertical position in the text block that should line up with the local origin.\n       * Can be specified as a numeric y position in local units (note: down is negative y), a string\n       * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:\n       * 'top', 'top-baseline', 'middle', 'bottom-baseline', or 'bottom'.\n       */\n      this.anchorY = 0;\n\n      /**\n       * @member {string} font\n       * URL of a custom font to be used. Font files can be any of the formats supported by\n       * OpenType (see https://github.com/opentypejs/opentype.js).\n       * Defaults to the Roboto font loaded from Google Fonts.\n       */\n      this.font = null; //will use default from TextBuilder\n\n      /**\n       * @member {number} fontSize\n       * The size at which to render the font in local units; corresponds to the em-box height\n       * of the chosen `font`.\n       */\n      this.fontSize = 0.1;\n\n      /**\n       * @member {number} letterSpacing\n       * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\n       * numbers increase spacing and negative numbers decrease it.\n       */\n      this.letterSpacing = 0;\n\n      /**\n       * @member {number|string} lineHeight\n       * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'\n       * which chooses a reasonable height based on the chosen font's ascender/descender metrics.\n       */\n      this.lineHeight = 'normal';\n\n      /**\n       * @member {number} maxWidth\n       * The maximum width of the text block, above which text may start wrapping according to the\n       * `whiteSpace` and `overflowWrap` properties.\n       */\n      this.maxWidth = Infinity;\n\n      /**\n       * @member {string} overflowWrap\n       * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`\n       * to break at whitespace characters, or `'break-word'` to allow breaking within words.\n       * Defaults to `'normal'`.\n       */\n      this.overflowWrap = 'normal';\n\n      /**\n       * @member {string} textAlign\n       * The horizontal alignment of each line of text within the overall text bounding box.\n       */\n      this.textAlign = 'left';\n\n      /**\n       * @member {number} textIndent\n       * Indentation for the first character of a line; see CSS `text-indent`.\n       */\n      this.textIndent = 0;\n\n      /**\n       * @member {string} whiteSpace\n       * Defines whether text should wrap when a line reaches the `maxWidth`. Can\n       * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,\n       * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to\n       * manually break lines, making it behave more like `'pre-wrap'` does in CSS.\n       */\n      this.whiteSpace = 'normal';\n\n\n      // === Presentation properties: === //\n\n      /**\n       * @member {THREE.Material} material\n       * Defines a _base_ material to be used when rendering the text. This material will be\n       * automatically replaced with a material derived from it, that adds shader code to\n       * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.\n       * By default it will derive from a simple white MeshBasicMaterial, but you can use any\n       * of the other mesh materials to gain other features like lighting, texture maps, etc.\n       *\n       * Also see the `color` shortcut property.\n       */\n      this.material = null;\n\n      /**\n       * @member {string|number|THREE.Color} color\n       * This is a shortcut for setting the `color` of the text's material. You can use this\n       * if you don't want to specify a whole custom `material`. Also, if you do use a custom\n       * `material`, this color will only be used for this particuar Text instance, even if\n       * that same material instance is shared across multiple Text objects.\n       */\n      this.color = null;\n\n      /**\n       * @member {object|null} colorRanges\n       * WARNING: This API is experimental and may change.\n       * This allows more fine-grained control of colors for individual or ranges of characters,\n       * taking precedence over the material's `color`. Its format is an Object whose keys each\n       * define a starting character index for a range, and whose values are the color for each\n       * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\n       * any of the strings accepted by `THREE.Color`.\n       */\n      this.colorRanges = null;\n\n      /**\n       * @member {number|string} outlineWidth\n       * WARNING: This API is experimental and may change.\n       * The width of an outline drawn around each text glyph using the `outlineColor`. Can be\n       * specified as either an absolute number in local units, or as a percentage string e.g.\n       * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`.\n       */\n      this.outlineWidth = 0;\n\n      /**\n       * @member {string|number|THREE.Color} outlineColor\n       * WARNING: This API is experimental and may change.\n       * The color of the text outline, if `outlineWidth` is greater than zero. Defaults to black.\n       */\n      this.outlineColor = 0;\n\n      /**\n       * @member {number} depthOffset\n       * This is a shortcut for setting the material's `polygonOffset` and related properties,\n       * which can be useful in preventing z-fighting when this text is laid on top of another\n       * plane in the scene. Positive numbers are further from the camera, negatives closer.\n       */\n      this.depthOffset = 0;\n\n      /**\n       * @member {Array<number>} clipRect\n       * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\n       * pixels will be discarded. This can be used for example to clip overflowing text when\n       * `whiteSpace='nowrap'`.\n       */\n      this.clipRect = null;\n\n      /**\n       * @member {string} orientation\n       * Defines the axis plane on which the text should be laid out when the mesh has no extra\n       * rotation transform. It is specified as a string with two axes: the horizontal axis with\n       * positive pointing right, and the vertical axis with positive pointing up. By default this\n       * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y\n       * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's\n       * top toward negative z and facing positive y.\n       */\n      this.orientation = defaultOrient;\n\n      /**\n       * @member {number} glyphGeometryDetail\n       * Controls number of vertical/horizontal segments that make up each glyph's rectangular\n       * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom\n       * vertex shader effects, for example.\n       */\n      this.glyphGeometryDetail = 1;\n\n      /**\n       * @member {number|null} sdfGlyphSize\n       * The size of each glyph's SDF (signed distance field) used for rendering. This must be a\n       * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\n       * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\n       * the sharpness of corners and preventing loss of very thin lines, at the expense of\n       * increased memory footprint and longer SDF generation time.\n       */\n      this.sdfGlyphSize = null;\n\n      this.debugSDF = false;\n    }\n\n    /**\n     * Updates the text rendering according to the current text-related configuration properties.\n     * This is an async process, so you can pass in a callback function to be executed when it\n     * finishes.\n     * @param {function} [callback]\n     */\n    sync(callback) {\n      if (this._needsSync) {\n        this._needsSync = false;\n\n        // If there's another sync still in progress, queue\n        if (this._isSyncing) {\n          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);\n        } else {\n          this._isSyncing = true;\n          this.dispatchEvent(syncStartEvent);\n\n          getTextRenderInfo({\n            text: this.text,\n            font: this.font,\n            fontSize: this.fontSize || 0.1,\n            letterSpacing: this.letterSpacing || 0,\n            lineHeight: this.lineHeight || 'normal',\n            maxWidth: this.maxWidth,\n            textAlign: this.textAlign,\n            textIndent: this.textIndent,\n            whiteSpace: this.whiteSpace,\n            overflowWrap: this.overflowWrap,\n            anchorX: this.anchorX,\n            anchorY: this.anchorY,\n            colorRanges: this.colorRanges,\n            includeCaretPositions: true, //TODO parameterize\n            sdfGlyphSize: this.sdfGlyphSize\n          }, textRenderInfo => {\n            this._isSyncing = false;\n\n            // Save result for later use in onBeforeRender\n            this._textRenderInfo = textRenderInfo;\n\n            // Update the geometry attributes\n            this.geometry.updateGlyphs(\n              textRenderInfo.glyphBounds,\n              textRenderInfo.glyphAtlasIndices,\n              textRenderInfo.blockBounds,\n              textRenderInfo.chunkedBounds,\n              textRenderInfo.glyphColors\n            );\n\n            // If we had extra sync requests queued up, kick it off\n            const queued = this._queuedSyncs;\n            if (queued) {\n              this._queuedSyncs = null;\n              this._needsSync = true;\n              this.sync(() => {\n                queued.forEach(fn => fn && fn());\n              });\n            }\n\n            this.dispatchEvent(syncCompleteEvent);\n            if (callback) {\n              callback();\n            }\n          });\n        }\n      }\n    }\n\n    /**\n     * Initiate a sync if needed - note it won't complete until next frame at the\n     * earliest so if possible it's a good idea to call sync() manually as soon as\n     * all the properties have been set.\n     * @override\n     */\n    onBeforeRender(renderer, scene, camera, geometry, material, group) {\n      this.sync();\n\n      // This may not always be a text material, e.g. if there's a scene.overrideMaterial present\n      if (material.isTroikaTextMaterial) {\n        this._prepareForRender(material);\n      }\n    }\n\n    /**\n     * Shortcut to dispose the geometry specific to this instance.\n     * Note: we don't also dispose the derived material here because if anything else is\n     * sharing the same base material it will result in a pause next frame as the program\n     * is recompiled. Instead users can dispose the base material manually, like normal,\n     * and we'll also dispose the derived material at that time.\n     */\n    dispose() {\n      this.geometry.dispose();\n    }\n\n    /**\n     * @property {TroikaTextRenderInfo|null} textRenderInfo\n     * @readonly\n     * The current processed rendering data for this TextMesh, returned by the TextBuilder after\n     * a `sync()` call. This will be `null` initially, and may be stale for a short period until\n     * the asynchrous `sync()` process completes.\n     */\n    get textRenderInfo() {\n      return this._textRenderInfo || null\n    }\n\n    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n    get material() {\n      let derivedMaterial = this._derivedMaterial;\n      const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);\n        // dispose the derived material when its base material is disposed:\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n      // If text outline is present, render it as a preliminary draw using Three's multi-material\n      // feature (see GlyphsGeometry which sets up `groups` for this purpose) Doing it with multi\n      // materials ensures the layers are always rendered consecutively in a consistent order.\n      // Each layer will trigger onBeforeRender with the appropriate material.\n      if (this.outlineWidth) {\n        let outlineMaterial = derivedMaterial._outlineMtl;\n        if (!outlineMaterial) {\n          outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {\n            id: {value: derivedMaterial.id + 0.1}\n          });\n          outlineMaterial.isTextOutlineMaterial = true;\n          outlineMaterial.depthWrite = false;\n          outlineMaterial.map = null; //???\n        }\n        derivedMaterial = [\n          outlineMaterial,\n          derivedMaterial\n        ];\n      }\n      return derivedMaterial\n    }\n    set material(baseMaterial) {\n      if (baseMaterial && baseMaterial.isTroikaTextMaterial) { //prevent double-derivation\n        this._derivedMaterial = baseMaterial;\n        this._baseMaterial = baseMaterial.baseMaterial;\n      } else {\n        this._baseMaterial = baseMaterial;\n      }\n    }\n\n    get glyphGeometryDetail() {\n      return this.geometry.detail\n    }\n    set glyphGeometryDetail(detail) {\n      this.geometry.detail = detail;\n    }\n\n    // Create and update material for shadows upon request:\n    get customDepthMaterial() {\n      return first(this.material).getDepthMaterial()\n    }\n    get customDistanceMaterial() {\n      return first(this.material).getDistanceMaterial()\n    }\n\n    _prepareForRender(material) {\n      const isOutline = material.isTextOutlineMaterial;\n      const uniforms = material.uniforms;\n      const textInfo = this.textRenderInfo;\n      if (textInfo) {\n        const {sdfTexture, blockBounds} = textInfo;\n        uniforms.uTroikaSDFTexture.value = sdfTexture;\n        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);\n        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;\n        uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;\n        uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);\n        uniforms.uTroikaUseGlyphColors.value = !!textInfo.glyphColors;\n\n        let distanceOffset = 0;\n        if (isOutline) {\n          let {outlineWidth} = this;\n          if (typeof outlineWidth === 'string') {\n            let match = outlineWidth.match(/^([\\d.]+)%$/);\n            let pct = match ? parseFloat(match[1]) : NaN;\n            outlineWidth = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;\n          }\n          distanceOffset = outlineWidth;\n        }\n        uniforms.uTroikaDistanceOffset.value = distanceOffset;\n\n        let clipRect = this.clipRect;\n        if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {\n          uniforms.uTroikaClipRect.value.fromArray(clipRect);\n        } else {\n          // no clipping - choose a finite rect that shouldn't ever be reached by overflowing glyphs or outlines\n          const pad = (this.fontSize || 0.1) * 100;\n          uniforms.uTroikaClipRect.value.set(\n            blockBounds[0] - pad,\n            blockBounds[1] - pad,\n            blockBounds[2] + pad,\n            blockBounds[3] + pad\n          );\n        }\n        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);\n      }\n      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;\n      material.polygonOffset = !!this.depthOffset;\n      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;\n\n      // Shortcut for setting material color via `color` prop on the mesh; this is\n      // applied only to the derived material to avoid mutating a shared base material.\n      const color = isOutline ? (this.outlineColor || 0) : this.color;\n      if (color == null) {\n        delete material.color; //inherit from base\n      } else {\n        const colorObj = material.hasOwnProperty('color') ? material.color : (material.color = new Color());\n        if (color !== colorObj._input || typeof color === 'object') {\n          colorObj.set(colorObj._input = color);\n        }\n      }\n\n      // base orientation\n      let orient = this.orientation || defaultOrient;\n      if (orient !== material._orientation) {\n        let rotMat = uniforms.uTroikaOrient.value;\n        orient = orient.replace(/[^-+xyz]/g, '');\n        let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);\n        if (match) {\n          let [, hSign, hAxis, vSign, vAxis] = match;\n          tempVec3a.set(0, 0, 0)[hAxis] = hSign === '-' ? 1 : -1;\n          tempVec3b.set(0, 0, 0)[vAxis] = vSign === '-' ? -1 : 1;\n          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);\n          rotMat.setFromMatrix4(tempMat4);\n        } else {\n          rotMat.identity();\n        }\n        material._orientation = orient;\n      }\n    }\n\n    /**\n     * @override Custom raycasting to test against the whole text block's max rectangular bounds\n     * TODO is there any reason to make this more granular, like within individual line or glyph rects?\n     */\n    raycast(raycaster, intersects) {\n      const textInfo = this.textRenderInfo;\n      if (textInfo) {\n        const bounds = textInfo.blockBounds;\n        raycastMesh.matrixWorld.multiplyMatrices(\n          this.matrixWorld,\n          tempMat4.set(\n            bounds[2] - bounds[0], 0, 0, bounds[0],\n            0, bounds[3] - bounds[1], 0, bounds[1],\n            0, 0, 1, 0,\n            0, 0, 0, 1\n          )\n        );\n        tempArray.length = 0;\n        raycastMesh.raycast(raycaster, tempArray);\n        for (let i = 0; i < tempArray.length; i++) {\n          tempArray[i].object = this;\n          intersects.push(tempArray[i]);\n        }\n      }\n    }\n\n    copy(source) {\n      super.copy(source);\n      COPYABLE_PROPS.forEach(prop => {\n        this[prop] = source[prop];\n      });\n      return this\n    }\n\n    clone() {\n      return new this.constructor().copy(this)\n    }\n  }\n\n\n  // Create setters for properties that affect text layout:\n  SYNCABLE_PROPS.forEach(prop => {\n    const privateKey = '_private_' + prop;\n    Object.defineProperty(Text.prototype, prop, {\n      get() {\n        return this[privateKey]\n      },\n      set(value) {\n        if (value !== this[privateKey]) {\n          this[privateKey] = value;\n          this._needsSync = true;\n        }\n      }\n    });\n  });\n\n\n  // Deprecation handler for `anchor` array:\n  let deprMsgShown = false;\n  Object.defineProperty(Text.prototype, 'anchor', {\n    get() {\n      return this._deprecated_anchor\n    },\n    set(val) {\n      this._deprecated_anchor = val;\n      if (!deprMsgShown) {\n        console.warn('TextMesh: `anchor` has been deprecated; use `anchorX` and `anchorY` instead.');\n        deprMsgShown = true;\n      }\n      if (Array.isArray(val)) {\n        this.anchorX = `${(+val[0] || 0) * 100}%`;\n        this.anchorY = `${(+val[1] || 0) * 100}%`;\n      } else {\n        this.anchorX = this.anchorY = 0;\n      }\n    }\n  });\n\n  return Text\n})();\n\n//=== Utility functions for dealing with carets and selection ranges ===//\n\n/**\n * @typedef {object} TextCaret\n * @property {number} x - x position of the caret\n * @property {number} y - y position of the caret's bottom\n * @property {number} height - height of the caret\n * @property {number} charIndex - the index in the original input string of this caret's target\n *   character; the caret will be for the position _before_ that character.\n */\n\n/**\n * Given a local x/y coordinate in the text block plane, find the nearest caret position.\n * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo\n * @param {number} x\n * @param {number} y\n * @return {TextCaret | null}\n */\nfunction getCaretAtPoint(textRenderInfo, x, y) {\n  let closestCaret = null;\n  const {caretHeight} = textRenderInfo;\n  const caretsByRow = groupCaretsByRow(textRenderInfo);\n\n  // Find nearest row by y first\n  let closestRowY = Infinity;\n  caretsByRow.forEach((carets, rowY) => {\n    if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {\n      closestRowY = rowY;\n    }\n  });\n\n  // Then find closest caret by x within that row\n  caretsByRow.get(closestRowY).forEach(caret => {\n    if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {\n      closestCaret = caret;\n    }\n  });\n  return closestCaret\n}\n\n\nconst _rectsCache = new WeakMap();\n\n/**\n * Given start and end character indexes, return a list of rectangles covering all the\n * characters within that selection.\n * @param {TroikaTextRenderInfo} textRenderInfo\n * @param {number} start - index of the first char in the selection\n * @param {number} end - index of the first char after the selection\n * @return {Array<{left, top, right, bottom}> | null}\n */\nfunction getSelectionRects(textRenderInfo, start, end) {\n  let rects;\n  if (textRenderInfo) {\n    // Check cache - textRenderInfo is frozen so it's safe to cache based on it\n    let prevResult = _rectsCache.get(textRenderInfo);\n    if (prevResult && prevResult.start === start && prevResult.end === end) {\n      return prevResult.rects\n    }\n\n    const {caretPositions, caretHeight, blockBounds} = textRenderInfo;\n\n    // Normalize\n    if (end < start) {\n      const s = start;\n      start = end;\n      end = s;\n    }\n    start = Math.max(start, 0);\n    end = Math.min(end, caretPositions.length + 1);\n\n    // Collect into one rect per row\n    let rows = new Map();\n    for (let i = start; i < end; i++) {\n      const x1 = caretPositions[i * 3];\n      const x2 = caretPositions[i * 3 + 1];\n      const y = caretPositions[i * 3 + 2];\n      let row = rows.get(y);\n      if (!row) {\n        row = {left: x1, right: x2, bottom: y, top: y + caretHeight};\n        rows.set(y, row);\n      } else {\n        row.left = Math.max(Math.min(row.left, x1), blockBounds[0]);\n        row.right = Math.min(Math.max(row.right, x2), blockBounds[2]);\n      }\n    }\n    rects = [];\n    rows.forEach(rect => {\n      rects.push(rect);\n    });\n\n    _rectsCache.set(textRenderInfo, {start, end, rects});\n  }\n  return rects\n}\n\nconst _caretsByRowCache = new WeakMap();\n\nfunction groupCaretsByRow(textRenderInfo) {\n  // textRenderInfo is frozen so it's safe to cache based on it\n  let caretsByRow = _caretsByRowCache.get(textRenderInfo);\n  if (!caretsByRow) {\n    const {caretPositions, caretHeight} = textRenderInfo;\n    caretsByRow = new Map();\n    for (let i = 0; i < caretPositions.length; i += 3) {\n      const rowY = caretPositions[i + 2];\n      let rowCarets = caretsByRow.get(rowY);\n      if (!rowCarets) {\n        caretsByRow.set(rowY, rowCarets = []);\n      }\n      rowCarets.push({\n        x: caretPositions[i],\n        y: rowY,\n        height: caretHeight,\n        charIndex: i / 3\n      });\n      // Add one more caret after the final char\n      if (i + 3 >= caretPositions.length) {\n        rowCarets.push({\n          x: caretPositions[i + 1],\n          y: rowY,\n          height: caretHeight,\n          charIndex: i / 3 + 1\n        });\n      }\n    }\n  }\n  _caretsByRowCache.set(textRenderInfo, caretsByRow);\n  return caretsByRow\n}\n\nexport { GlyphsGeometry, Text, configureTextBuilder, createTextDerivedMaterial, fontProcessorWorkerModule, getCaretAtPoint, getSelectionRects, preloadFont };\n","import aframe from 'aframe'\r\nimport { Text } from 'troika-three-text'\r\n\r\n\r\nexport var COMPONENT_NAME = 'troika-text'\r\n\r\n\r\naframe.registerComponent(COMPONENT_NAME, {\r\n  schema: {\r\n    align: {type: 'string', default: 'left', oneOf: ['left', 'right', 'center', 'justify']},\r\n    anchor: {default: 'center', oneOf: ['left', 'right', 'center', 'align']},\r\n    baseline: {default: 'center', oneOf: ['top', 'center', 'bottom']},\r\n    clipRect: {\r\n      type: 'string',\r\n      default: '',\r\n      parse: function(value) {\r\n        if (value) {\r\n          value = value.split(/[\\s,]+/).reduce(function(out, val) {\r\n            val = +val\r\n            if (!isNaN(val)) {\r\n              out.push(val)\r\n            }\r\n            return out\r\n          }, [])\r\n        }\r\n        return value && value.length === 4 ? value : null\r\n      },\r\n      stringify: function(value) {\r\n        return value ? value.join(' ') : ''\r\n      }\r\n    },\r\n    color: {type: 'color', default: '#FFF'},\r\n    depthOffset: {type: 'number', default: 0},\r\n    font: {type: 'string'},\r\n    fontSize: {type: 'number', default: 0.2},\r\n    letterSpacing: {type: 'number', default: 0},\r\n    lineHeight: {type: 'number'},\r\n    maxWidth: {type: 'number', default: Infinity},\r\n    outlineColor: {type: 'color', default: '#000'},\r\n    outlineWidth: {\r\n      default: 0,\r\n      parse: function(value) {\r\n        if (typeof value === 'string' && value.indexOf('%') > 0) {\r\n          return value\r\n        }\r\n        value = +value\r\n        return isNaN(value) ? 0 : value\r\n      },\r\n      stringify: function(value) {\r\n        return '' + value\r\n      }\r\n    },\r\n    overflowWrap: {type: 'string', default: 'normal', oneOf: ['normal', 'break-word']},\r\n    textIndent: {type: 'number', default: 0},\r\n    value: {type: 'string'},\r\n    whiteSpace: {default: 'normal', oneOf: ['normal', 'nowrap']}\r\n\r\n    // attrs that can be configured via troika-text-material:\r\n    // opacity: {type: 'number', default: 1.0},\r\n    // transparent: {default: true},\r\n    // side: {default: 'front', oneOf: ['front', 'back', 'double']},\r\n  },\r\n\r\n  /**\r\n   * Called once when component is attached. Generally for initial setup.\r\n   */\r\n  init: function () {\r\n    // If we're being applied as a component attached to a generic a-entity, create an\r\n    // anonymous sub-entity that we can use to isolate the text mesh and the material\r\n    // component that should apply to it. If we're a primitive, no isolation is needed.\r\n    var textEntity\r\n    var isPrimitive = this.el.tagName.toLowerCase() === 'a-troika-text'\r\n    if (isPrimitive) {\r\n      textEntity = this.el\r\n    } else {\r\n      textEntity = document.createElement('a-entity')\r\n      this.el.appendChild(textEntity)\r\n    }\r\n    this.troikaTextEntity = textEntity\r\n\r\n    // Create Text mesh and add it to the entity as the 'mesh' object\r\n    var textMesh = this.troikaTextMesh = new Text()\r\n    textEntity.setObject3D('mesh', textMesh)\r\n  },\r\n\r\n  /**\r\n   * Called when component is attached and when component data changes.\r\n   * Generally modifies the entity based on the data.\r\n   */\r\n  update: function () {\r\n    var data = this.data\r\n    var mesh = this.troikaTextMesh\r\n    var entity = this.troikaTextEntity\r\n\r\n    // Update the text mesh\r\n    mesh.text = (data.value || '')\r\n      .replace(/\\\\n/g, '\\n')\r\n      .replace(/\\\\t/g, '\\t')\r\n    mesh.textAlign = data.align\r\n\r\n    mesh.anchorX = anchorMapping[data.anchor === 'align' ? data.align : data.anchor] || 'center'\r\n    mesh.anchorY = baselineMapping[data.baseline] || 'middle'\r\n    mesh.color = data.color\r\n    mesh.clipRect = data.clipRect\r\n    mesh.depthOffset = data.depthOffset || 0\r\n    mesh.font = data.font //TODO allow aframe stock font names\r\n    mesh.fontSize = data.fontSize\r\n    mesh.letterSpacing = data.letterSpacing || 0\r\n    mesh.lineHeight = data.lineHeight || 'normal'\r\n    mesh.outlineColor = data.outlineColor\r\n    mesh.outlineWidth = data.outlineWidth\r\n    mesh.overflowWrap = data.overflowWrap\r\n    mesh.textIndent = data.textIndent\r\n    mesh.whiteSpace = data.whiteSpace\r\n    mesh.maxWidth = data.maxWidth\r\n    mesh.sync()\r\n\r\n    // Pass material config down to child entity\r\n    if (entity !== this.el) {\r\n      var materialAttr = this.el.getAttribute('troika-text-material')\r\n      if (materialAttr) {\r\n        entity.setAttribute('material', materialAttr)\r\n      } else {\r\n        entity.removeAttribute('material')\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Called when a component is removed (e.g., via removeAttribute).\r\n   * Generally undoes all modifications to the entity.\r\n   */\r\n  remove: function () {\r\n    // Free memory\r\n    this.troikaTextMesh.dispose()\r\n\r\n    // If using sub-entity, remove it\r\n    if (this.troikaTextEntity !== this.el) {\r\n      this.el.removeChild(this.troikaTextEntity)\r\n    }\r\n  }\r\n\r\n})\r\n\r\n\r\nvar anchorMapping = {\r\n  'left': 'left',\r\n  'center': 'center',\r\n  'right': 'right'\r\n}\r\nvar baselineMapping = {\r\n  'top': 'top',\r\n  'center': 'middle',\r\n  'bottom': 'bottom'\r\n}\r\n\r\n","import * as THREE from 'three'\r\n\r\n// Polyfill Three's rename of Math->MathUtils after the super-three fork\r\n(function(ThreedleDum) {\r\n  if (!ThreedleDum.MathUtils) {\r\n    ThreedleDum.MathUtils = ThreedleDum.Math\r\n  }\r\n})(THREE)\r\n\r\nimport './aframe-troika-text-component.js'\r\nimport './aframe-troika-text-primitive.js'","import aframe from 'aframe'\r\nimport {COMPONENT_NAME} from './aframe-troika-text-component.js'\r\n\r\n\r\nvar mappings = {}\r\n\r\n// From aframe's primitives.js utilities...\r\nvar schema = aframe.components[COMPONENT_NAME].schema\r\nObject.keys(schema).map(function (prop) {\r\n  // Hyphenate where there is camelCase.\r\n  var attrName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n  mappings[attrName] = COMPONENT_NAME + '.' + prop;\r\n});\r\n\r\n\r\naframe.registerPrimitive('a-troika-text', {\r\n  defaultComponents: {\r\n    'troika-text': {}\r\n  },\r\n  mappings: mappings\r\n})\r\n\r\n"],"names":["BespokeThenable","value","state","queue","scheduled","completeCalled","resolve","oneTime","val","complete","reject","reason","st","ignoreThrow","thenableObj","recursiveError","valThen","getThenableThen","call","v","scheduleQueueFlush","e","setTimeout","flushQueue","q","forEach","callIt","fn","isFn","then","called","args","len","arguments","length","apply","this","TypeError","onResolve","onReject","nextThenable","push","cb","result","resultThen","err","NativePromiseThenable","promise","Promise","res","rej","bind","all","items","resultCount","results","out","DefaultThenable","item","i","itemThenable","workerBootstrap","modules","Object","create","rehydrate","name","str","self","troikaDefine","r","url","URL","createObjectURL","Blob","replace","type","importScripts","console","error","revokeObjectURL","addEventListener","ref","data","messageId","action","registerModule","callback","id","dependencies","init","getTransferables","map","dep","isWorkerModule","depResult","Error","noLog","postMessage","success","message","isCallable","ref$1","handleResult","tx","Array","isArray","undefined","callModule","transferables","stack","supportsWorkers","supported","window","document","Worker","terminate","process","env","NODE_ENV","log","_workerModuleId","_messageId","_allowInitAsString","workers","openRequests","obj","_count","defineWorkerModule","options","workerId","moduleFunc","_getInitResult","initResult","initThenable","deps","defineMainThreadModule","registrationThenable","callWorker","workerModuleData","stringifyFunction","toString","test","thenable","response","count","warn","worker","bootstrap","onmessage","msgId","getWorker","ThenableWorkerModule","Thenable","voidMainRegExp","expandShaderIncludes","source","match","include","chunk","ShaderChunk","assign","target","prop","hasOwnProperty","epoch","Date","now","CONSTRUCTOR_CACHE","WeakMap","SHADER_UPGRADE_CACHE","Map","materialInstanceId","createDerivedMaterial","baseMaterial","optionsKey","optionsHash","JSON","stringify","optionsJsonReplacer","optionsHashesToIds","get","set","_idCtr","getKeyForOptions","ctorsByDerivation","privateBeforeCompileProp","onBeforeCompile","shaderInfo","cacheKey","vertexShader","fragmentShader","upgradedShaders","upgraded","key","vertexDefs","vertexMainIntro","vertexMainOutro","vertexTransform","fragmentDefs","fragmentMainIntro","fragmentMainOutro","fragmentColorTransform","customRewriter","timeUniform","postChunks","join","code","match1","index","fullStr","substr","injectIntoShaderCode","upgradeShaders","uniforms","DerivedMaterial","derive","chained","clone","base","derived","descriptor","defineProperty","uuid","MathUtils","generateUUID","defines","extensions","_listeners","constructor","isDerivedMaterial","customProgramCacheKey","[object Object]","copy","writable","configurable","isShaderMaterial","UniformsUtils","newBase","getDepthMaterial","depthMaterial","_depthMaterial","MeshDepthMaterial","depthPacking","RGBADepthPacking","IS_DEPTH_MATERIAL","getDistanceMaterial","distanceMaterial","_distanceMaterial","MeshDistanceMaterial","IS_DISTANCE_MATERIAL","dispose","shaderCode","defs","intro","outro","workerModule","Typr","parse","buff","bin","_bin","Uint8Array","readASCII","offset","readUshort","numF","readUint","fnts","foff","_readFont","ooff","readFixed","numTables","tags","_data","_offset","tabs","tag","toffset","t","trim","_tabOffset","tab","o","readF2dot14","readShort","readInt","p","a","uint8","int32","readInt8","int8","int16","readUshorts","arr","uint32","readUint64","l","s","String","fromCharCode","readUnicode","c","_tdec","readUTF8","tdec","readBytes","readASCIIArray","ArrayBuffer","Int8Array","Int16Array","uint16","Uint16Array","Int32Array","Uint32Array","_lctf","font","subt","offset0","offScriptList","offFeatureList","offLookupList","scriptList","readScriptList","featureList","readFeatureList","lookupList","readLookupList","noff","lut","readLookupTable","ltype","flag","cnt","numOfOnes","n","num","readClassDef","format","startGlyph","glyphCount","getInterval","start","end","readCoverage","cvg","fmt","coverageIndex","indexOf","ind","readFeatureTable","lookupCount","indices","readScriptTable","defLangSysOff","default","readLangSysTable","langSysCount","langSysOff","reqFeature","featureCount","features","CFF","buffer","ninds","readIndex","names","tdinds","topDicts","readDict","topdict","sinds","strings","readSubrs","CharStrings","cstr","ROS","FDArray","fdind","dict","_readFDict","FDSelect","rns","Encoding","readEncoding","charset","readCharset","ss","Private","Subrs","gsubinds","bias","nSubrs","Bias","tableSE","glyphByUnicode","cff","glyphBySE","charcode","array","nCodes","first","nLeft","inds","offsize","getCharString","b0","b1","vs","op","size","readCharString","carr","nibs","b","nib0","nib1","chars","parseFloat","cmap","offs","tables","platformID","encodingID","noffset","tind","parse0","parse4","parse6","parse12","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCount","startCount","idDelta","idRangeOffset","glyphIdArray","firstCode","entryCount","nGroups","groups","off","startCharCode","endCharCode","startGlyphID","glyf","g","maxp","numGlyphs","_parseGlyf","loca","gl","noc","xMin","yMin","xMax","yMax","endPts","instructionLength","instructions","crdnum","flags","rep","j","xs","i8","same","ys","x","y","parts","part","m","d","ty","p1","p2","glyphIndex","arg1","arg2","numInstr","instr","GPOS","covOff","coverage","valFmt1","ones1","pos","readValueRecord","valFmt2","ones2","pairsets","psc","psoff","pvc","gid2","value1","value2","val1","val2","classDef1","classDef2","class1Count","class2Count","matrix","row","valFmt","GSUB","delta","newg","vals","loff","readLigatureSet","cDefOffset","cDef","scset","subClassSetCount","scsOff","readSubClassSet","cvgs","backCvg","inptCvg","ahedCvg","lookupRec","readSubstLookupRecords","rUs","lset","readSubClassRule","rule","gcount","scount","input","substLookupRecords","readChainSubClassSet","readChainSubClassRule","pps","pi","subst","lcnt","readLigature","lig","chain","nglyph","ccnt","k","head","fontRevision","unitsPerEm","created","modified","macStyle","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","hhea","ascender","descender","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfHMetrics","hmtx","aWidth","lsBearing","aw","lsb","kern","version","parseV1","nTables","glyph1","rval","readFormat0","pleft","nPairs","left","right","glyph2","ver","maxPoints","maxContours","maxCompositePoints","maxCompositeContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","tname","languageID","nameID","slen","cname","soff","tid","_lang","postScriptName","version0","version1","version2","version5","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","achVendID","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefault","usBreak","usMaxContext","usLowerOpticalPointSize","usUpperOpticalPointSize","post","italicAngle","underlinePosition","underlineThickness","SVG","entries","svgDocIndexOffset","numEntries","endGlyphID","svgDocOffset","svgDocLength","sbuf","svg","f","toPath","pth","cmds","crds","DOMParser","firstChild","tagName","nextSibling","vb","getAttribute","split","_toPath","children","nds","fill","ni","nd","tn","cfl","toks","_tokens","_toksToPath","ts","rn","cn","cc","charCodeAt","ch","charAt","isNum","ox","oy","pc","M","L","H","V","S","C","cmd","cmu","toUpperCase","ps","reps","_reps","xi","yi","x1","y1","x2","y2","x3","y3","co","Math","max","U","codeToGlyph","p0e4","p3e1","p1e0","p0e3","sind","grp","glyphToPath","gid","path","nStems","haveWidth","width","defaultWidthX","open","pdct","gi","_drawCFF","_drawGlyf","_simpleGlyph","_compoGlyph","i0","il","pr","nx","onCurve","prOnCurve","nxOnCurve","P","moveTo","lineTo","qcurveTo","closePath","prt","_getGlyphClass","cd","intr","getPairAdjustment","g1","g2","gpos","llist","flist","tused","fl","ti","ltab","adj","c1","c2","ind1","ind2","stringToGlyphs","gls","codePointAt","gsub","cligs","fi","ci","feat","_getWPfeature","_applySubs","wsep","R","slft","srgt","rlim","rl","good","em1","cind","cls","scs","sc","inp","cind2","lrs","_glsCovered","lr","tab2","glyphsToPath","clr","tpath","pathToSVG","prec","lmap","Q","toFixed","pathToContext","ctx","bezierCurveTo","quadraticCurveTo","beginPath","fillStyle","curveTo","c1x","c1y","c2x","c2y","c3x","c3y","c4x","c4y","jpx","jpy","shift","nominalWidthX","pop","isX","sval","abs","adx","ady","bchar","achar","aind","subr","count1","alternate","tinyInflate","module","Tree","table","trans","Data","dest","sourceIndex","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","sum","tinf_build_tree","tinf_getbit","bit","tinf_read_bits","tinf_decode_symbol","cur","tinf_decode_trees","lt","dt","hlit","hdist","hclen","clen","sym","prev","tinf_inflate_block_data","dist","tinf_inflate_uncompressed_block","tinf_build_fixed_trees","exports","bfinal","slice","subarray","bufferIn","dataViewIn","DataView","offsetIn","read2","getUint16","read4","getUint32","write2","dataViewOut","setUint16","offsetOut","write4","setUint32","WOFFHeader","signature","flavor","reserved","totalSfntSize","majorVersion","minorVersion","metaOffset","metaLength","metaOrigLength","privOffset","privLength","pow","TableDirectoryEntries","compLength","origLength","origChecksum","arrayOut","reduce","acc","entry","bufferOut","TableDirectoryEntry","outOffset","compressedData","uncompressedData","padding","convert_streams","woff2otf","cmdArgLengths","Z","peek","typrFont","glyphMap","fontObj","text","fontSize","letterSpacing","glyphX","fontScale","glyphIndices","charIndex","glyphObj","Infinity","advanceWidth","pathCommandCount","argsIndex","argsArray","numArgs","wrapFontObj","typrFactory","woff2otfFactory","parserFactory","CONFIG","defaultFontURL","sdfGlyphSize","sdfMargin","sdfExponent","textureWidth","tempColor","Color","atlases","getTextRenderInfo","toObj","fromObj","linkEl","createElement","href","toAbsoluteURL","colorRanges","colors","getHex","freeze","atlasKey","atlas","sdfTexture","DataTexture","LuminanceFormat","LinearFilter","processInWorker","newGlyphSDFs","textureData","atlasIndex","texImg","image","biggerArray","height","cols","baseStartIndex","floor","srcStartIndex","rowStartIndex","needsUpdate","parameters","glyphBounds","glyphAtlasIndices","glyphColors","caretPositions","caretHeight","chunkedBounds","lineHeight","topBaseline","blockBounds","visibleBounds","timings","totalBounds","totalBlockSize","x0","y0","needsSort","segments","sortSegments","sort","maxX","absSquareDistanceToLineSegment","lineX0","lineY0","lineX1","lineY1","ldx","ldy","lengthSq","min","dx","dy","addLineSegment","segment","minX","minY","maxY","findNearestSignedDistance","closestDistSq","closestDist","seg","distSq","sqrt","inside","isPointInPoly","createGlyphSegmentsIndex","config","pointOnQuadraticBezier","t2","pointOnCubicBezier","sdfSize","glyphW","glyphH","fontUnitsMaxSearchDist","fontUnitsMargin","textureMinFontX","textureMinFontY","textureMaxFontX","textureMaxFontY","fontUnitsTextureWidth","fontUnitsTextureHeight","fontUnitsTextureMaxDim","lineSegmentsIndex","firstX","firstY","prevX","prevY","forEachPathCommand","prevPoint","nextPoint","sdfX","sdfY","signedDist","alpha","round","renderingBounds","fontParser","sdfGenerator","fontAtlases","fonts","INF","loadFont","fontUrl","pending","tryLoad","onError","request","XMLHttpRequest","responseType","onload","status","statusText","onerror","send","doLoadFont","callbacks","maxWidth","textAlign","textIndent","whiteSpace","overflowWrap","anchorX","anchorY","includeCaretPositions","chunkedBoundsSize","metricsOnly","mainStart","total","fontLoad","layout","sdf","sdfTotal","glyphs","getSdfAtlas","hasMaxWidth","isFinite","newGlyphs","maxLineWidth","renderableGlyphCount","canWrap","layoutStart","fontSizeMult","halfLeading","caretBottomOffset","lineXOffset","currentLine","TextLine","lines","forEachGlyph","char","glyphWidth","curLineCount","nextLine","isWhitespace","isEmpty","glyphAt","splitAt","adjustX","isSoftWrapped","fly","line","anchorXOffset","anchorYOffset","parsePercent","Float32Array","lineYOffset","currentColor","renderableGlyphIndex","prevCharIndex","colorCharIndex","lineGlyphCount","lineWidth","justifyAdjust","whitespaceCount","glyphInfo","idx","glyphAtlasInfo","sdfStart","glyphSDFData","bounds","startIdx","xStart","yStart","visX0","visY0","visX1","visY1","rect","chunkRect","pct","NaN","isNaN","performance","prototype","ceil","flyweight","newLine","splice","measure","createSDFGenerator","createFontProcessor","fontProcessor","GlyphsGeometry","templateGeometries","tempVec3","Vector3","glyphIndexAttrName","InstancedBufferGeometry","super","detail","materialIndex","boundingSphere","Sphere","boundingBox","Box3","_detail","tpl","geom","PlaneBufferGeometry","translate","getTemplateGeometry","attr","attributes","setIndex","getIndex","updateBufferAttr","_chunkedBounds","setInstanceCount","sphere","center","radius","distanceTo","box","clipRect","chunks","w","z","attrName","newArray","itemSize","setAttribute","InstancedBufferAttribute","_maxInstanceCount","deleteAttribute","attribute","Text","defaultMaterial","MeshBasicMaterial","color","side","DoubleSide","transparent","tempMat4","Matrix4","tempVec3a","tempVec3b","tempArray","origin","defaultOrient","raycastMesh","Mesh","syncStartEvent","syncCompleteEvent","SYNCABLE_PROPS","COPYABLE_PROPS","concat","material","outlineWidth","outlineColor","depthOffset","orientation","glyphGeometryDetail","debugSDF","_needsSync","_isSyncing","_queuedSyncs","dispatchEvent","textRenderInfo","_textRenderInfo","geometry","updateGlyphs","queued","sync","renderer","scene","camera","group","isTroikaTextMaterial","_prepareForRender","derivedMaterial","_derivedMaterial","_baseMaterial","_defaultMaterial","textMaterial","derivatives","uTroikaSDFTexture","uTroikaSDFTextureSize","Vector2","uTroikaSDFGlyphSize","uTroikaSDFExponent","uTroikaTotalBounds","Vector4","uTroikaClipRect","uTroikaDistanceOffset","uTroikaOrient","Matrix3","uTroikaUseGlyphColors","uTroikaSDFDebug","uDiffuseRE","defineProperties","shadowSide","createTextDerivedMaterial","onDispose","removeEventListener","outlineMaterial","_outlineMtl","isTextOutlineMaterial","depthWrite","customDepthMaterial","customDistanceMaterial","isOutline","textInfo","fromArray","distanceOffset","pad","applyClipRect","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","colorObj","_input","orient","_orientation","rotMat","hSign","hAxis","vSign","vAxis","lookAt","cross","setFromMatrix4","identity","raycaster","intersects","matrixWorld","multiplyMatrices","raycast","object","privateKey","deprMsgShown","_deprecated_anchor","COMPONENT_NAME","registerComponent","schema","align","oneOf","anchor","baseline","textEntity","el","toLowerCase","appendChild","troikaTextEntity","textMesh","troikaTextMesh","setObject3D","update","mesh","entity","anchorMapping","baselineMapping","materialAttr","removeAttribute","remove","removeChild","ThreedleDum","top","bottom","mappings","aframe","components","keys","registerPrimitive","defaultComponents","troika-text","THREE"],"mappings":"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"}